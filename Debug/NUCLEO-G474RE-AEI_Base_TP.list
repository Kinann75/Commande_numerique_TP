
NUCLEO-G474RE-AEI_Base_TP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce14  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000089c  0800cff8  0800cff8  0001cff8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d894  0800d894  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800d894  0800d894  0001d894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d89c  0800d89c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d89c  0800d89c  0001d89c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d8a0  0800d8a0  0001d8a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800d8a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d8  200001e0  0800da80  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200006b8  0800da80  000206b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cfde  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000389f  00000000  00000000  0003d1ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001680  00000000  00000000  00040a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014f8  00000000  00000000  00042110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a948  00000000  00000000  00043608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b965  00000000  00000000  0006df50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114128  00000000  00000000  000898b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019d9dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007224  00000000  00000000  0019da30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800cfdc 	.word	0x0800cfdc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	0800cfdc 	.word	0x0800cfdc

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b974 	b.w	8000fb8 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9d08      	ldr	r5, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	468e      	mov	lr, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14d      	bne.n	8000d92 <__udivmoddi4+0xaa>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4694      	mov	ip, r2
 8000cfa:	d969      	bls.n	8000dd0 <__udivmoddi4+0xe8>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b152      	cbz	r2, 8000d18 <__udivmoddi4+0x30>
 8000d02:	fa01 f302 	lsl.w	r3, r1, r2
 8000d06:	f1c2 0120 	rsb	r1, r2, #32
 8000d0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d12:	ea41 0e03 	orr.w	lr, r1, r3
 8000d16:	4094      	lsls	r4, r2
 8000d18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d1c:	0c21      	lsrs	r1, r4, #16
 8000d1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d22:	fa1f f78c 	uxth.w	r7, ip
 8000d26:	fb08 e316 	mls	r3, r8, r6, lr
 8000d2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d2e:	fb06 f107 	mul.w	r1, r6, r7
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x64>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d3e:	f080 811f 	bcs.w	8000f80 <__udivmoddi4+0x298>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 811c 	bls.w	8000f80 <__udivmoddi4+0x298>
 8000d48:	3e02      	subs	r6, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1a5b      	subs	r3, r3, r1
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d54:	fb08 3310 	mls	r3, r8, r0, r3
 8000d58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d5c:	fb00 f707 	mul.w	r7, r0, r7
 8000d60:	42a7      	cmp	r7, r4
 8000d62:	d90a      	bls.n	8000d7a <__udivmoddi4+0x92>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6c:	f080 810a 	bcs.w	8000f84 <__udivmoddi4+0x29c>
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	f240 8107 	bls.w	8000f84 <__udivmoddi4+0x29c>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d7e:	1be4      	subs	r4, r4, r7
 8000d80:	2600      	movs	r6, #0
 8000d82:	b11d      	cbz	r5, 8000d8c <__udivmoddi4+0xa4>
 8000d84:	40d4      	lsrs	r4, r2
 8000d86:	2300      	movs	r3, #0
 8000d88:	e9c5 4300 	strd	r4, r3, [r5]
 8000d8c:	4631      	mov	r1, r6
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d909      	bls.n	8000daa <__udivmoddi4+0xc2>
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	f000 80ef 	beq.w	8000f7a <__udivmoddi4+0x292>
 8000d9c:	2600      	movs	r6, #0
 8000d9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000da2:	4630      	mov	r0, r6
 8000da4:	4631      	mov	r1, r6
 8000da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000daa:	fab3 f683 	clz	r6, r3
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	d14a      	bne.n	8000e48 <__udivmoddi4+0x160>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d302      	bcc.n	8000dbc <__udivmoddi4+0xd4>
 8000db6:	4282      	cmp	r2, r0
 8000db8:	f200 80f9 	bhi.w	8000fae <__udivmoddi4+0x2c6>
 8000dbc:	1a84      	subs	r4, r0, r2
 8000dbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	469e      	mov	lr, r3
 8000dc6:	2d00      	cmp	r5, #0
 8000dc8:	d0e0      	beq.n	8000d8c <__udivmoddi4+0xa4>
 8000dca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dce:	e7dd      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000dd0:	b902      	cbnz	r2, 8000dd4 <__udivmoddi4+0xec>
 8000dd2:	deff      	udf	#255	; 0xff
 8000dd4:	fab2 f282 	clz	r2, r2
 8000dd8:	2a00      	cmp	r2, #0
 8000dda:	f040 8092 	bne.w	8000f02 <__udivmoddi4+0x21a>
 8000dde:	eba1 010c 	sub.w	r1, r1, ip
 8000de2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de6:	fa1f fe8c 	uxth.w	lr, ip
 8000dea:	2601      	movs	r6, #1
 8000dec:	0c20      	lsrs	r0, r4, #16
 8000dee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000df2:	fb07 1113 	mls	r1, r7, r3, r1
 8000df6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dfa:	fb0e f003 	mul.w	r0, lr, r3
 8000dfe:	4288      	cmp	r0, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x12c>
 8000e02:	eb1c 0101 	adds.w	r1, ip, r1
 8000e06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x12a>
 8000e0c:	4288      	cmp	r0, r1
 8000e0e:	f200 80cb 	bhi.w	8000fa8 <__udivmoddi4+0x2c0>
 8000e12:	4643      	mov	r3, r8
 8000e14:	1a09      	subs	r1, r1, r0
 8000e16:	b2a4      	uxth	r4, r4
 8000e18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e24:	fb0e fe00 	mul.w	lr, lr, r0
 8000e28:	45a6      	cmp	lr, r4
 8000e2a:	d908      	bls.n	8000e3e <__udivmoddi4+0x156>
 8000e2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e34:	d202      	bcs.n	8000e3c <__udivmoddi4+0x154>
 8000e36:	45a6      	cmp	lr, r4
 8000e38:	f200 80bb 	bhi.w	8000fb2 <__udivmoddi4+0x2ca>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	eba4 040e 	sub.w	r4, r4, lr
 8000e42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e46:	e79c      	b.n	8000d82 <__udivmoddi4+0x9a>
 8000e48:	f1c6 0720 	rsb	r7, r6, #32
 8000e4c:	40b3      	lsls	r3, r6
 8000e4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e56:	fa20 f407 	lsr.w	r4, r0, r7
 8000e5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5e:	431c      	orrs	r4, r3
 8000e60:	40f9      	lsrs	r1, r7
 8000e62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e66:	fa00 f306 	lsl.w	r3, r0, r6
 8000e6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e6e:	0c20      	lsrs	r0, r4, #16
 8000e70:	fa1f fe8c 	uxth.w	lr, ip
 8000e74:	fb09 1118 	mls	r1, r9, r8, r1
 8000e78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e80:	4288      	cmp	r0, r1
 8000e82:	fa02 f206 	lsl.w	r2, r2, r6
 8000e86:	d90b      	bls.n	8000ea0 <__udivmoddi4+0x1b8>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e90:	f080 8088 	bcs.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e94:	4288      	cmp	r0, r1
 8000e96:	f240 8085 	bls.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e9e:	4461      	add	r1, ip
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ea8:	fb09 1110 	mls	r1, r9, r0, r1
 8000eac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eb0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000eb4:	458e      	cmp	lr, r1
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x1e2>
 8000eb8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ebc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ec0:	d26c      	bcs.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec2:	458e      	cmp	lr, r1
 8000ec4:	d96a      	bls.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	4461      	add	r1, ip
 8000eca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ece:	fba0 9402 	umull	r9, r4, r0, r2
 8000ed2:	eba1 010e 	sub.w	r1, r1, lr
 8000ed6:	42a1      	cmp	r1, r4
 8000ed8:	46c8      	mov	r8, r9
 8000eda:	46a6      	mov	lr, r4
 8000edc:	d356      	bcc.n	8000f8c <__udivmoddi4+0x2a4>
 8000ede:	d053      	beq.n	8000f88 <__udivmoddi4+0x2a0>
 8000ee0:	b15d      	cbz	r5, 8000efa <__udivmoddi4+0x212>
 8000ee2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ee6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eea:	fa01 f707 	lsl.w	r7, r1, r7
 8000eee:	fa22 f306 	lsr.w	r3, r2, r6
 8000ef2:	40f1      	lsrs	r1, r6
 8000ef4:	431f      	orrs	r7, r3
 8000ef6:	e9c5 7100 	strd	r7, r1, [r5]
 8000efa:	2600      	movs	r6, #0
 8000efc:	4631      	mov	r1, r6
 8000efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f02:	f1c2 0320 	rsb	r3, r2, #32
 8000f06:	40d8      	lsrs	r0, r3
 8000f08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f10:	4091      	lsls	r1, r2
 8000f12:	4301      	orrs	r1, r0
 8000f14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f18:	fa1f fe8c 	uxth.w	lr, ip
 8000f1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f20:	fb07 3610 	mls	r6, r7, r0, r3
 8000f24:	0c0b      	lsrs	r3, r1, #16
 8000f26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f2e:	429e      	cmp	r6, r3
 8000f30:	fa04 f402 	lsl.w	r4, r4, r2
 8000f34:	d908      	bls.n	8000f48 <__udivmoddi4+0x260>
 8000f36:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f3e:	d22f      	bcs.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f40:	429e      	cmp	r6, r3
 8000f42:	d92d      	bls.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f44:	3802      	subs	r0, #2
 8000f46:	4463      	add	r3, ip
 8000f48:	1b9b      	subs	r3, r3, r6
 8000f4a:	b289      	uxth	r1, r1
 8000f4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f50:	fb07 3316 	mls	r3, r7, r6, r3
 8000f54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f58:	fb06 f30e 	mul.w	r3, r6, lr
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	d908      	bls.n	8000f72 <__udivmoddi4+0x28a>
 8000f60:	eb1c 0101 	adds.w	r1, ip, r1
 8000f64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f68:	d216      	bcs.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	d914      	bls.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6e:	3e02      	subs	r6, #2
 8000f70:	4461      	add	r1, ip
 8000f72:	1ac9      	subs	r1, r1, r3
 8000f74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f78:	e738      	b.n	8000dec <__udivmoddi4+0x104>
 8000f7a:	462e      	mov	r6, r5
 8000f7c:	4628      	mov	r0, r5
 8000f7e:	e705      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000f80:	4606      	mov	r6, r0
 8000f82:	e6e3      	b.n	8000d4c <__udivmoddi4+0x64>
 8000f84:	4618      	mov	r0, r3
 8000f86:	e6f8      	b.n	8000d7a <__udivmoddi4+0x92>
 8000f88:	454b      	cmp	r3, r9
 8000f8a:	d2a9      	bcs.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f94:	3801      	subs	r0, #1
 8000f96:	e7a3      	b.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f98:	4646      	mov	r6, r8
 8000f9a:	e7ea      	b.n	8000f72 <__udivmoddi4+0x28a>
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	e794      	b.n	8000eca <__udivmoddi4+0x1e2>
 8000fa0:	4640      	mov	r0, r8
 8000fa2:	e7d1      	b.n	8000f48 <__udivmoddi4+0x260>
 8000fa4:	46d0      	mov	r8, sl
 8000fa6:	e77b      	b.n	8000ea0 <__udivmoddi4+0x1b8>
 8000fa8:	3b02      	subs	r3, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	e732      	b.n	8000e14 <__udivmoddi4+0x12c>
 8000fae:	4630      	mov	r0, r6
 8000fb0:	e709      	b.n	8000dc6 <__udivmoddi4+0xde>
 8000fb2:	4464      	add	r4, ip
 8000fb4:	3802      	subs	r0, #2
 8000fb6:	e742      	b.n	8000e3e <__udivmoddi4+0x156>

08000fb8 <__aeabi_idiv0>:
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop

08000fbc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08c      	sub	sp, #48	; 0x30
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000fc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	2220      	movs	r2, #32
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f008 fffb 	bl	8009fd0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fda:	4b33      	ldr	r3, [pc, #204]	; (80010a8 <MX_ADC1_Init+0xec>)
 8000fdc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fe0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fe2:	4b31      	ldr	r3, [pc, #196]	; (80010a8 <MX_ADC1_Init+0xec>)
 8000fe4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000fe8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fea:	4b2f      	ldr	r3, [pc, #188]	; (80010a8 <MX_ADC1_Init+0xec>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ff0:	4b2d      	ldr	r3, [pc, #180]	; (80010a8 <MX_ADC1_Init+0xec>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000ff6:	4b2c      	ldr	r3, [pc, #176]	; (80010a8 <MX_ADC1_Init+0xec>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ffc:	4b2a      	ldr	r3, [pc, #168]	; (80010a8 <MX_ADC1_Init+0xec>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001002:	4b29      	ldr	r3, [pc, #164]	; (80010a8 <MX_ADC1_Init+0xec>)
 8001004:	2204      	movs	r2, #4
 8001006:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001008:	4b27      	ldr	r3, [pc, #156]	; (80010a8 <MX_ADC1_Init+0xec>)
 800100a:	2200      	movs	r2, #0
 800100c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800100e:	4b26      	ldr	r3, [pc, #152]	; (80010a8 <MX_ADC1_Init+0xec>)
 8001010:	2201      	movs	r2, #1
 8001012:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001014:	4b24      	ldr	r3, [pc, #144]	; (80010a8 <MX_ADC1_Init+0xec>)
 8001016:	2201      	movs	r2, #1
 8001018:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800101a:	4b23      	ldr	r3, [pc, #140]	; (80010a8 <MX_ADC1_Init+0xec>)
 800101c:	2200      	movs	r2, #0
 800101e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8001022:	4b21      	ldr	r3, [pc, #132]	; (80010a8 <MX_ADC1_Init+0xec>)
 8001024:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 8001028:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800102a:	4b1f      	ldr	r3, [pc, #124]	; (80010a8 <MX_ADC1_Init+0xec>)
 800102c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001030:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001032:	4b1d      	ldr	r3, [pc, #116]	; (80010a8 <MX_ADC1_Init+0xec>)
 8001034:	2201      	movs	r2, #1
 8001036:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800103a:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <MX_ADC1_Init+0xec>)
 800103c:	2200      	movs	r2, #0
 800103e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001040:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <MX_ADC1_Init+0xec>)
 8001042:	2200      	movs	r2, #0
 8001044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001048:	4817      	ldr	r0, [pc, #92]	; (80010a8 <MX_ADC1_Init+0xec>)
 800104a:	f002 f817 	bl	800307c <HAL_ADC_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001054:	f000 fcfa 	bl	8001a4c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001058:	2300      	movs	r3, #0
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800105c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001060:	4619      	mov	r1, r3
 8001062:	4811      	ldr	r0, [pc, #68]	; (80010a8 <MX_ADC1_Init+0xec>)
 8001064:	f003 f8fe 	bl	8004264 <HAL_ADCEx_MultiModeConfigChannel>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800106e:	f000 fced 	bl	8001a4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001072:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <MX_ADC1_Init+0xf0>)
 8001074:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001076:	2306      	movs	r3, #6
 8001078:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800107e:	237f      	movs	r3, #127	; 0x7f
 8001080:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001082:	2304      	movs	r3, #4
 8001084:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	4619      	mov	r1, r3
 800108e:	4806      	ldr	r0, [pc, #24]	; (80010a8 <MX_ADC1_Init+0xec>)
 8001090:	f002 fa9e 	bl	80035d0 <HAL_ADC_ConfigChannel>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800109a:	f000 fcd7 	bl	8001a4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800109e:	bf00      	nop
 80010a0:	3730      	adds	r7, #48	; 0x30
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	200001fc 	.word	0x200001fc
 80010ac:	04300002 	.word	0x04300002

080010b0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b09e      	sub	sp, #120	; 0x78
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010c8:	f107 0310 	add.w	r3, r7, #16
 80010cc:	2254      	movs	r2, #84	; 0x54
 80010ce:	2100      	movs	r1, #0
 80010d0:	4618      	mov	r0, r3
 80010d2:	f008 ff7d 	bl	8009fd0 <memset>
  if(adcHandle->Instance==ADC1)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010de:	d15f      	bne.n	80011a0 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80010e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010e4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80010e6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80010ea:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010ec:	f107 0310 	add.w	r3, r7, #16
 80010f0:	4618      	mov	r0, r3
 80010f2:	f004 fdb7 	bl	8005c64 <HAL_RCCEx_PeriphCLKConfig>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80010fc:	f000 fca6 	bl	8001a4c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001100:	4b29      	ldr	r3, [pc, #164]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 8001102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001104:	4a28      	ldr	r2, [pc, #160]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 8001106:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800110a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800110c:	4b26      	ldr	r3, [pc, #152]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 800110e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001110:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001118:	4b23      	ldr	r3, [pc, #140]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 800111a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111c:	4a22      	ldr	r2, [pc, #136]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 800111e:	f043 0301 	orr.w	r3, r3, #1
 8001122:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001124:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 8001126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001130:	2301      	movs	r3, #1
 8001132:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001134:	2303      	movs	r3, #3
 8001136:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001140:	4619      	mov	r1, r3
 8001142:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001146:	f003 fda7 	bl	8004c98 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800114a:	4b18      	ldr	r3, [pc, #96]	; (80011ac <HAL_ADC_MspInit+0xfc>)
 800114c:	4a18      	ldr	r2, [pc, #96]	; (80011b0 <HAL_ADC_MspInit+0x100>)
 800114e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001150:	4b16      	ldr	r3, [pc, #88]	; (80011ac <HAL_ADC_MspInit+0xfc>)
 8001152:	2205      	movs	r2, #5
 8001154:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <HAL_ADC_MspInit+0xfc>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800115c:	4b13      	ldr	r3, [pc, #76]	; (80011ac <HAL_ADC_MspInit+0xfc>)
 800115e:	2200      	movs	r2, #0
 8001160:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001162:	4b12      	ldr	r3, [pc, #72]	; (80011ac <HAL_ADC_MspInit+0xfc>)
 8001164:	2280      	movs	r2, #128	; 0x80
 8001166:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001168:	4b10      	ldr	r3, [pc, #64]	; (80011ac <HAL_ADC_MspInit+0xfc>)
 800116a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800116e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001170:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <HAL_ADC_MspInit+0xfc>)
 8001172:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001176:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <HAL_ADC_MspInit+0xfc>)
 800117a:	2220      	movs	r2, #32
 800117c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800117e:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <HAL_ADC_MspInit+0xfc>)
 8001180:	2200      	movs	r2, #0
 8001182:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001184:	4809      	ldr	r0, [pc, #36]	; (80011ac <HAL_ADC_MspInit+0xfc>)
 8001186:	f003 fa55 	bl	8004634 <HAL_DMA_Init>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001190:	f000 fc5c 	bl	8001a4c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a05      	ldr	r2, [pc, #20]	; (80011ac <HAL_ADC_MspInit+0xfc>)
 8001198:	655a      	str	r2, [r3, #84]	; 0x54
 800119a:	4a04      	ldr	r2, [pc, #16]	; (80011ac <HAL_ADC_MspInit+0xfc>)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011a0:	bf00      	nop
 80011a2:	3778      	adds	r7, #120	; 0x78
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40021000 	.word	0x40021000
 80011ac:	20000268 	.word	0x20000268
 80011b0:	40020008 	.word	0x40020008

080011b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80011ba:	4b12      	ldr	r3, [pc, #72]	; (8001204 <MX_DMA_Init+0x50>)
 80011bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011be:	4a11      	ldr	r2, [pc, #68]	; (8001204 <MX_DMA_Init+0x50>)
 80011c0:	f043 0304 	orr.w	r3, r3, #4
 80011c4:	6493      	str	r3, [r2, #72]	; 0x48
 80011c6:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <MX_DMA_Init+0x50>)
 80011c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ca:	f003 0304 	and.w	r3, r3, #4
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011d2:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <MX_DMA_Init+0x50>)
 80011d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011d6:	4a0b      	ldr	r2, [pc, #44]	; (8001204 <MX_DMA_Init+0x50>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	6493      	str	r3, [r2, #72]	; 0x48
 80011de:	4b09      	ldr	r3, [pc, #36]	; (8001204 <MX_DMA_Init+0x50>)
 80011e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	603b      	str	r3, [r7, #0]
 80011e8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2100      	movs	r1, #0
 80011ee:	200b      	movs	r0, #11
 80011f0:	f003 f9f8 	bl	80045e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011f4:	200b      	movs	r0, #11
 80011f6:	f003 fa0f 	bl	8004618 <HAL_NVIC_EnableIRQ>

}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40021000 	.word	0x40021000

08001208 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b088      	sub	sp, #32
 800120c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120e:	f107 030c 	add.w	r3, r7, #12
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
 800121c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800121e:	4b39      	ldr	r3, [pc, #228]	; (8001304 <MX_GPIO_Init+0xfc>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001222:	4a38      	ldr	r2, [pc, #224]	; (8001304 <MX_GPIO_Init+0xfc>)
 8001224:	f043 0304 	orr.w	r3, r3, #4
 8001228:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122a:	4b36      	ldr	r3, [pc, #216]	; (8001304 <MX_GPIO_Init+0xfc>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122e:	f003 0304 	and.w	r3, r3, #4
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001236:	4b33      	ldr	r3, [pc, #204]	; (8001304 <MX_GPIO_Init+0xfc>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123a:	4a32      	ldr	r2, [pc, #200]	; (8001304 <MX_GPIO_Init+0xfc>)
 800123c:	f043 0320 	orr.w	r3, r3, #32
 8001240:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001242:	4b30      	ldr	r3, [pc, #192]	; (8001304 <MX_GPIO_Init+0xfc>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001246:	f003 0320 	and.w	r3, r3, #32
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	4b2d      	ldr	r3, [pc, #180]	; (8001304 <MX_GPIO_Init+0xfc>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001252:	4a2c      	ldr	r2, [pc, #176]	; (8001304 <MX_GPIO_Init+0xfc>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	64d3      	str	r3, [r2, #76]	; 0x4c
 800125a:	4b2a      	ldr	r3, [pc, #168]	; (8001304 <MX_GPIO_Init+0xfc>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	603b      	str	r3, [r7, #0]
 8001264:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 8001266:	2200      	movs	r2, #0
 8001268:	2108      	movs	r1, #8
 800126a:	4827      	ldr	r0, [pc, #156]	; (8001308 <MX_GPIO_Init+0x100>)
 800126c:	f003 fe96 	bl	8004f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001270:	2200      	movs	r2, #0
 8001272:	2120      	movs	r1, #32
 8001274:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001278:	f003 fe90 	bl	8004f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800127c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001280:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001282:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001286:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	4619      	mov	r1, r3
 8001292:	481d      	ldr	r0, [pc, #116]	; (8001308 <MX_GPIO_Init+0x100>)
 8001294:	f003 fd00 	bl	8004c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ISO_RESET_Pin;
 8001298:	2308      	movs	r3, #8
 800129a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129c:	2301      	movs	r3, #1
 800129e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ISO_RESET_GPIO_Port, &GPIO_InitStruct);
 80012a8:	f107 030c 	add.w	r3, r7, #12
 80012ac:	4619      	mov	r1, r3
 80012ae:	4816      	ldr	r0, [pc, #88]	; (8001308 <MX_GPIO_Init+0x100>)
 80012b0:	f003 fcf2 	bl	8004c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 80012b4:	2312      	movs	r3, #18
 80012b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b8:	2300      	movs	r3, #0
 80012ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c0:	f107 030c 	add.w	r3, r7, #12
 80012c4:	4619      	mov	r1, r3
 80012c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ca:	f003 fce5 	bl	8004c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80012ce:	2320      	movs	r3, #32
 80012d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d2:	2301      	movs	r3, #1
 80012d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012da:	2300      	movs	r3, #0
 80012dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80012de:	f107 030c 	add.w	r3, r7, #12
 80012e2:	4619      	mov	r1, r3
 80012e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e8:	f003 fcd6 	bl	8004c98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012ec:	2200      	movs	r2, #0
 80012ee:	2100      	movs	r1, #0
 80012f0:	2028      	movs	r0, #40	; 0x28
 80012f2:	f003 f977 	bl	80045e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012f6:	2028      	movs	r0, #40	; 0x28
 80012f8:	f003 f98e 	bl	8004618 <HAL_NVIC_EnableIRQ>

}
 80012fc:	bf00      	nop
 80012fe:	3720      	adds	r7, #32
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40021000 	.word	0x40021000
 8001308:	48000800 	.word	0x48000800
 800130c:	00000000 	.word	0x00000000

08001310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001310:	b5b0      	push	{r4, r5, r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001314:	f001 fc11 	bl	8002b3a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001318:	f000 fad4 	bl	80018c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800131c:	f7ff ff74 	bl	8001208 <MX_GPIO_Init>
  MX_DMA_Init();
 8001320:	f7ff ff48 	bl	80011b4 <MX_DMA_Init>
  MX_TIM1_Init();
 8001324:	f001 f8a6 	bl	8002474 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001328:	f001 fb32 	bl	8002990 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800132c:	f7ff fe46 	bl	8000fbc <MX_ADC1_Init>
  MX_TIM2_Init();
 8001330:	f001 f95e 	bl	80025f0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001334:	f001 f9aa 	bl	800268c <MX_TIM3_Init>
  MX_TIM5_Init();
 8001338:	f001 f9fe 	bl	8002738 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 800133c:	2201      	movs	r2, #1
 800133e:	49b2      	ldr	r1, [pc, #712]	; (8001608 <main+0x2f8>)
 8001340:	48b2      	ldr	r0, [pc, #712]	; (800160c <main+0x2fc>)
 8001342:	f006 fe87 	bl	8008054 <HAL_UART_Receive_IT>
	HAL_Delay(1);
 8001346:	2001      	movs	r0, #1
 8001348:	f001 fc2e 	bl	8002ba8 <HAL_Delay>
	shellInit();
 800134c:	f000 fbe6 	bl	8001b1c <shellInit>

	HAL_TIM_Base_Start(&htim2);
 8001350:	48af      	ldr	r0, [pc, #700]	; (8001610 <main+0x300>)
 8001352:	f004 ff2d 	bl	80061b0 <HAL_TIM_Base_Start>

	if(HAL_OK!=HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED))
 8001356:	217f      	movs	r1, #127	; 0x7f
 8001358:	48ae      	ldr	r0, [pc, #696]	; (8001614 <main+0x304>)
 800135a:	f002 ff21 	bl	80041a0 <HAL_ADCEx_Calibration_Start>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <main+0x58>
	{
		Error_Handler();
 8001364:	f000 fb72 	bl	8001a4c <Error_Handler>
	}
	if(HAL_OK!=HAL_ADC_Start_DMA(&hadc1, ADC_Buffer, 10)){
 8001368:	220a      	movs	r2, #10
 800136a:	49ab      	ldr	r1, [pc, #684]	; (8001618 <main+0x308>)
 800136c:	48a9      	ldr	r0, [pc, #676]	; (8001614 <main+0x304>)
 800136e:	f002 f847 	bl	8003400 <HAL_ADC_Start_DMA>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <main+0x6c>
		Error_Handler();
 8001378:	f000 fb68 	bl	8001a4c <Error_Handler>
	}


	TIM3->CNT=32000;
 800137c:	4ba7      	ldr	r3, [pc, #668]	; (800161c <main+0x30c>)
 800137e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001382:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8001384:	213c      	movs	r1, #60	; 0x3c
 8001386:	48a6      	ldr	r0, [pc, #664]	; (8001620 <main+0x310>)
 8001388:	f005 fa14 	bl	80067b4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim5);
 800138c:	48a5      	ldr	r0, [pc, #660]	; (8001624 <main+0x314>)
 800138e:	f004 ff7f 	bl	8006290 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001392:	2100      	movs	r1, #0
 8001394:	48a4      	ldr	r0, [pc, #656]	; (8001628 <main+0x318>)
 8001396:	f005 f855 	bl	8006444 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800139a:	2100      	movs	r1, #0
 800139c:	48a2      	ldr	r0, [pc, #648]	; (8001628 <main+0x318>)
 800139e:	f006 fafd 	bl	800799c <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80013a2:	2104      	movs	r1, #4
 80013a4:	48a0      	ldr	r0, [pc, #640]	; (8001628 <main+0x318>)
 80013a6:	f005 f84d 	bl	8006444 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80013aa:	2104      	movs	r1, #4
 80013ac:	489e      	ldr	r0, [pc, #632]	; (8001628 <main+0x318>)
 80013ae:	f006 faf5 	bl	800799c <HAL_TIMEx_PWMN_Start>


	erreur_vitesse[0]=erreur_vitesse[1];
 80013b2:	4b9e      	ldr	r3, [pc, #632]	; (800162c <main+0x31c>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	4a9d      	ldr	r2, [pc, #628]	; (800162c <main+0x31c>)
 80013b8:	6013      	str	r3, [r2, #0]
	alpha2_v[0]=alpha2_v[1];
 80013ba:	4b9d      	ldr	r3, [pc, #628]	; (8001630 <main+0x320>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	4a9c      	ldr	r2, [pc, #624]	; (8001630 <main+0x320>)
 80013c0:	6013      	str	r3, [r2, #0]
	alpha_corrige_v[0]=alpha_corrige_v[1];
 80013c2:	4b9c      	ldr	r3, [pc, #624]	; (8001634 <main+0x324>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	4a9b      	ldr	r2, [pc, #620]	; (8001634 <main+0x324>)
 80013c8:	6013      	str	r3, [r2, #0]
	erreur_vitesse[1]=V_CONSIGNE-vitesse;
 80013ca:	4b9b      	ldr	r3, [pc, #620]	; (8001638 <main+0x328>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 80013d2:	ee07 3a90 	vmov	s15, r3
 80013d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013da:	4b94      	ldr	r3, [pc, #592]	; (800162c <main+0x31c>)
 80013dc:	edc3 7a01 	vstr	s15, [r3, #4]
	alpha1_v=erreur_vitesse[1] *Pv;
 80013e0:	4b92      	ldr	r3, [pc, #584]	; (800162c <main+0x31c>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff f8e7 	bl	80005b8 <__aeabi_f2d>
 80013ea:	a383      	add	r3, pc, #524	; (adr r3, 80015f8 <main+0x2e8>)
 80013ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f0:	f7ff f93a 	bl	8000668 <__aeabi_dmul>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4610      	mov	r0, r2
 80013fa:	4619      	mov	r1, r3
 80013fc:	f7ff fc0c 	bl	8000c18 <__aeabi_d2f>
 8001400:	4603      	mov	r3, r0
 8001402:	4a8e      	ldr	r2, [pc, #568]	; (800163c <main+0x32c>)
 8001404:	6013      	str	r3, [r2, #0]
	alpha2_v[1]=alpha2_v[0]+((Iv*Te)/2)*(erreur_vitesse[1]-erreur_vitesse[0]);
 8001406:	4b8a      	ldr	r3, [pc, #552]	; (8001630 <main+0x320>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff f8d4 	bl	80005b8 <__aeabi_f2d>
 8001410:	4604      	mov	r4, r0
 8001412:	460d      	mov	r5, r1
 8001414:	4b85      	ldr	r3, [pc, #532]	; (800162c <main+0x31c>)
 8001416:	ed93 7a01 	vldr	s14, [r3, #4]
 800141a:	4b84      	ldr	r3, [pc, #528]	; (800162c <main+0x31c>)
 800141c:	edd3 7a00 	vldr	s15, [r3]
 8001420:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001424:	ee17 0a90 	vmov	r0, s15
 8001428:	f7ff f8c6 	bl	80005b8 <__aeabi_f2d>
 800142c:	a374      	add	r3, pc, #464	; (adr r3, 8001600 <main+0x2f0>)
 800142e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001432:	f7ff f919 	bl	8000668 <__aeabi_dmul>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	4620      	mov	r0, r4
 800143c:	4629      	mov	r1, r5
 800143e:	f7fe ff5d 	bl	80002fc <__adddf3>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	4610      	mov	r0, r2
 8001448:	4619      	mov	r1, r3
 800144a:	f7ff fbe5 	bl	8000c18 <__aeabi_d2f>
 800144e:	4603      	mov	r3, r0
 8001450:	4a77      	ldr	r2, [pc, #476]	; (8001630 <main+0x320>)
 8001452:	6053      	str	r3, [r2, #4]
	alpha_corrige_v[1]=alpha_corrige_v[0]+alpha1_v+alpha2_v[1];
 8001454:	4b77      	ldr	r3, [pc, #476]	; (8001634 <main+0x324>)
 8001456:	ed93 7a00 	vldr	s14, [r3]
 800145a:	4b78      	ldr	r3, [pc, #480]	; (800163c <main+0x32c>)
 800145c:	edd3 7a00 	vldr	s15, [r3]
 8001460:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001464:	4b72      	ldr	r3, [pc, #456]	; (8001630 <main+0x320>)
 8001466:	edd3 7a01 	vldr	s15, [r3, #4]
 800146a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800146e:	4b71      	ldr	r3, [pc, #452]	; (8001634 <main+0x324>)
 8001470:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if (flag==1)
 8001474:	4b72      	ldr	r3, [pc, #456]	; (8001640 <main+0x330>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d119      	bne.n	80014b0 <main+0x1a0>
		{
			HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin,GPIO_PIN_SET);
 800147c:	2201      	movs	r2, #1
 800147e:	2108      	movs	r1, #8
 8001480:	4870      	ldr	r0, [pc, #448]	; (8001644 <main+0x334>)
 8001482:	f003 fd8b 	bl	8004f9c <HAL_GPIO_WritePin>
			for(i=0;i<70;i++)
 8001486:	4b70      	ldr	r3, [pc, #448]	; (8001648 <main+0x338>)
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	e004      	b.n	8001498 <main+0x188>
 800148e:	4b6e      	ldr	r3, [pc, #440]	; (8001648 <main+0x338>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	3301      	adds	r3, #1
 8001494:	4a6c      	ldr	r2, [pc, #432]	; (8001648 <main+0x338>)
 8001496:	6013      	str	r3, [r2, #0]
 8001498:	4b6b      	ldr	r3, [pc, #428]	; (8001648 <main+0x338>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b45      	cmp	r3, #69	; 0x45
 800149e:	ddf6      	ble.n	800148e <main+0x17e>
			{
			}
			HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin,GPIO_PIN_RESET);
 80014a0:	2200      	movs	r2, #0
 80014a2:	2108      	movs	r1, #8
 80014a4:	4867      	ldr	r0, [pc, #412]	; (8001644 <main+0x334>)
 80014a6:	f003 fd79 	bl	8004f9c <HAL_GPIO_WritePin>
			flag=0;
 80014aa:	4b65      	ldr	r3, [pc, #404]	; (8001640 <main+0x330>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	701a      	strb	r2, [r3, #0]
		}
		// SuperLoop inside the while(1), only flag changed from interrupt could launch functions
		if(uartRxReceived){
 80014b0:	4b66      	ldr	r3, [pc, #408]	; (800164c <main+0x33c>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d00b      	beq.n	80014d0 <main+0x1c0>
			if(shellGetChar()){
 80014b8:	f000 fb68 	bl	8001b8c <shellGetChar>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <main+0x1ba>
				shellExec();
 80014c2:	f000 fbd9 	bl	8001c78 <shellExec>
				shellPrompt();
 80014c6:	f000 fb41 	bl	8001b4c <shellPrompt>
			}
			uartRxReceived = 0;
 80014ca:	4b60      	ldr	r3, [pc, #384]	; (800164c <main+0x33c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	701a      	strb	r2, [r3, #0]
		}



		if (flag_asserv==1){
 80014d0:	4b5f      	ldr	r3, [pc, #380]	; (8001650 <main+0x340>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d1cd      	bne.n	8001474 <main+0x164>
			if(flag_vitesse==1){
 80014d8:	4b5e      	ldr	r3, [pc, #376]	; (8001654 <main+0x344>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d17e      	bne.n	80015de <main+0x2ce>
				erreur_vitesse[0]=erreur_vitesse[1];
 80014e0:	4b52      	ldr	r3, [pc, #328]	; (800162c <main+0x31c>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	4a51      	ldr	r2, [pc, #324]	; (800162c <main+0x31c>)
 80014e6:	6013      	str	r3, [r2, #0]
				alpha2_v[0]=alpha2_v[1];
 80014e8:	4b51      	ldr	r3, [pc, #324]	; (8001630 <main+0x320>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	4a50      	ldr	r2, [pc, #320]	; (8001630 <main+0x320>)
 80014ee:	6013      	str	r3, [r2, #0]
				alpha_corrige_v[0]=alpha_corrige_v[1];
 80014f0:	4b50      	ldr	r3, [pc, #320]	; (8001634 <main+0x324>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	4a4f      	ldr	r2, [pc, #316]	; (8001634 <main+0x324>)
 80014f6:	6013      	str	r3, [r2, #0]
				erreur_vitesse[1]=V_CONSIGNE-vitesse;
 80014f8:	4b4f      	ldr	r3, [pc, #316]	; (8001638 <main+0x328>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 8001500:	ee07 3a90 	vmov	s15, r3
 8001504:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001508:	4b48      	ldr	r3, [pc, #288]	; (800162c <main+0x31c>)
 800150a:	edc3 7a01 	vstr	s15, [r3, #4]
				alpha1_v=erreur_vitesse[1]*Pv;
 800150e:	4b47      	ldr	r3, [pc, #284]	; (800162c <main+0x31c>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff f850 	bl	80005b8 <__aeabi_f2d>
 8001518:	a337      	add	r3, pc, #220	; (adr r3, 80015f8 <main+0x2e8>)
 800151a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151e:	f7ff f8a3 	bl	8000668 <__aeabi_dmul>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4610      	mov	r0, r2
 8001528:	4619      	mov	r1, r3
 800152a:	f7ff fb75 	bl	8000c18 <__aeabi_d2f>
 800152e:	4603      	mov	r3, r0
 8001530:	4a42      	ldr	r2, [pc, #264]	; (800163c <main+0x32c>)
 8001532:	6013      	str	r3, [r2, #0]
				alpha2_v[1]=alpha2_v[0]+((Iv*Te)/2)*(erreur_vitesse[1]-erreur_vitesse[0]);
 8001534:	4b3e      	ldr	r3, [pc, #248]	; (8001630 <main+0x320>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff f83d 	bl	80005b8 <__aeabi_f2d>
 800153e:	4604      	mov	r4, r0
 8001540:	460d      	mov	r5, r1
 8001542:	4b3a      	ldr	r3, [pc, #232]	; (800162c <main+0x31c>)
 8001544:	ed93 7a01 	vldr	s14, [r3, #4]
 8001548:	4b38      	ldr	r3, [pc, #224]	; (800162c <main+0x31c>)
 800154a:	edd3 7a00 	vldr	s15, [r3]
 800154e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001552:	ee17 0a90 	vmov	r0, s15
 8001556:	f7ff f82f 	bl	80005b8 <__aeabi_f2d>
 800155a:	a329      	add	r3, pc, #164	; (adr r3, 8001600 <main+0x2f0>)
 800155c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001560:	f7ff f882 	bl	8000668 <__aeabi_dmul>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	4620      	mov	r0, r4
 800156a:	4629      	mov	r1, r5
 800156c:	f7fe fec6 	bl	80002fc <__adddf3>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	4610      	mov	r0, r2
 8001576:	4619      	mov	r1, r3
 8001578:	f7ff fb4e 	bl	8000c18 <__aeabi_d2f>
 800157c:	4603      	mov	r3, r0
 800157e:	4a2c      	ldr	r2, [pc, #176]	; (8001630 <main+0x320>)
 8001580:	6053      	str	r3, [r2, #4]
				if (alpha2_v[1]>7)
 8001582:	4b2b      	ldr	r3, [pc, #172]	; (8001630 <main+0x320>)
 8001584:	edd3 7a01 	vldr	s15, [r3, #4]
 8001588:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 800158c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001594:	dd03      	ble.n	800159e <main+0x28e>
				{
					alpha2_v[1]=7;
 8001596:	4b26      	ldr	r3, [pc, #152]	; (8001630 <main+0x320>)
 8001598:	4a2f      	ldr	r2, [pc, #188]	; (8001658 <main+0x348>)
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	e00c      	b.n	80015b8 <main+0x2a8>
				}
				else if(alpha2_v[1]<-7)
 800159e:	4b24      	ldr	r3, [pc, #144]	; (8001630 <main+0x320>)
 80015a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80015a4:	eeb9 7a0c 	vmov.f32	s14, #156	; 0xc0e00000 -7.0
 80015a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b0:	d502      	bpl.n	80015b8 <main+0x2a8>
				{
					alpha2_v[1]=-7;
 80015b2:	4b1f      	ldr	r3, [pc, #124]	; (8001630 <main+0x320>)
 80015b4:	4a29      	ldr	r2, [pc, #164]	; (800165c <main+0x34c>)
 80015b6:	605a      	str	r2, [r3, #4]
				}
				alpha_corrige_v[1]=alpha_corrige_v[0]+alpha1_v+alpha2_v[1];
 80015b8:	4b1e      	ldr	r3, [pc, #120]	; (8001634 <main+0x324>)
 80015ba:	ed93 7a00 	vldr	s14, [r3]
 80015be:	4b1f      	ldr	r3, [pc, #124]	; (800163c <main+0x32c>)
 80015c0:	edd3 7a00 	vldr	s15, [r3]
 80015c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015c8:	4b19      	ldr	r3, [pc, #100]	; (8001630 <main+0x320>)
 80015ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80015ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d2:	4b18      	ldr	r3, [pc, #96]	; (8001634 <main+0x324>)
 80015d4:	edc3 7a01 	vstr	s15, [r3, #4]
				flag_vitesse=0;
 80015d8:	4b1e      	ldr	r3, [pc, #120]	; (8001654 <main+0x344>)
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
			}


			if (flagADC==1){
 80015de:	4b20      	ldr	r3, [pc, #128]	; (8001660 <main+0x350>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	f47f af46 	bne.w	8001474 <main+0x164>
				sum=0;
 80015e8:	4b1e      	ldr	r3, [pc, #120]	; (8001664 <main+0x354>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
				for(j=0;j<20;j++)
 80015ee:	4b1e      	ldr	r3, [pc, #120]	; (8001668 <main+0x358>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	e04a      	b.n	800168c <main+0x37c>
 80015f6:	bf00      	nop
 80015f8:	eb1c432d 	.word	0xeb1c432d
 80015fc:	3f2a36e2 	.word	0x3f2a36e2
 8001600:	30553262 	.word	0x30553262
 8001604:	3ee3a92a 	.word	0x3ee3a92a
 8001608:	200005cc 	.word	0x200005cc
 800160c:	20000614 	.word	0x20000614
 8001610:	200004e4 	.word	0x200004e4
 8001614:	200001fc 	.word	0x200001fc
 8001618:	200002cc 	.word	0x200002cc
 800161c:	40000400 	.word	0x40000400
 8001620:	20000530 	.word	0x20000530
 8001624:	2000057c 	.word	0x2000057c
 8001628:	20000498 	.word	0x20000498
 800162c:	20000328 	.word	0x20000328
 8001630:	20000330 	.word	0x20000330
 8001634:	2000033c 	.word	0x2000033c
 8001638:	2000031c 	.word	0x2000031c
 800163c:	20000338 	.word	0x20000338
 8001640:	200002c8 	.word	0x200002c8
 8001644:	48000800 	.word	0x48000800
 8001648:	2000036c 	.word	0x2000036c
 800164c:	200005c8 	.word	0x200005c8
 8001650:	20000368 	.word	0x20000368
 8001654:	20000364 	.word	0x20000364
 8001658:	40e00000 	.word	0x40e00000
 800165c:	c0e00000 	.word	0xc0e00000
 8001660:	200002c9 	.word	0x200002c9
 8001664:	20000420 	.word	0x20000420
 8001668:	20000370 	.word	0x20000370
				{
					sum=sum+ADC_Buffer[j];
 800166c:	4b80      	ldr	r3, [pc, #512]	; (8001870 <main+0x560>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a80      	ldr	r2, [pc, #512]	; (8001874 <main+0x564>)
 8001672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001676:	4a80      	ldr	r2, [pc, #512]	; (8001878 <main+0x568>)
 8001678:	6812      	ldr	r2, [r2, #0]
 800167a:	4413      	add	r3, r2
 800167c:	461a      	mov	r2, r3
 800167e:	4b7e      	ldr	r3, [pc, #504]	; (8001878 <main+0x568>)
 8001680:	601a      	str	r2, [r3, #0]
				for(j=0;j<20;j++)
 8001682:	4b7b      	ldr	r3, [pc, #492]	; (8001870 <main+0x560>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	3301      	adds	r3, #1
 8001688:	4a79      	ldr	r2, [pc, #484]	; (8001870 <main+0x560>)
 800168a:	6013      	str	r3, [r2, #0]
 800168c:	4b78      	ldr	r3, [pc, #480]	; (8001870 <main+0x560>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b13      	cmp	r3, #19
 8001692:	ddeb      	ble.n	800166c <main+0x35c>
				}
				mesure_mean=sum/10;
 8001694:	4b78      	ldr	r3, [pc, #480]	; (8001878 <main+0x568>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a78      	ldr	r2, [pc, #480]	; (800187c <main+0x56c>)
 800169a:	fb82 1203 	smull	r1, r2, r2, r3
 800169e:	1092      	asrs	r2, r2, #2
 80016a0:	17db      	asrs	r3, r3, #31
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7fe ff75 	bl	8000594 <__aeabi_i2d>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4974      	ldr	r1, [pc, #464]	; (8001880 <main+0x570>)
 80016b0:	e9c1 2300 	strd	r2, r3, [r1]
				j=0;
 80016b4:	4b6e      	ldr	r3, [pc, #440]	; (8001870 <main+0x560>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
				courant_buffer[0]=courant_buffer[1];
 80016ba:	4b72      	ldr	r3, [pc, #456]	; (8001884 <main+0x574>)
 80016bc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80016c0:	4970      	ldr	r1, [pc, #448]	; (8001884 <main+0x574>)
 80016c2:	e9c1 2300 	strd	r2, r3, [r1]
				mesure_voltage=((double)mesure_mean*3.3)/4096.0;
 80016c6:	4b6e      	ldr	r3, [pc, #440]	; (8001880 <main+0x570>)
 80016c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016cc:	a362      	add	r3, pc, #392	; (adr r3, 8001858 <main+0x548>)
 80016ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d2:	f7fe ffc9 	bl	8000668 <__aeabi_dmul>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4610      	mov	r0, r2
 80016dc:	4619      	mov	r1, r3
 80016de:	f04f 0200 	mov.w	r2, #0
 80016e2:	4b69      	ldr	r3, [pc, #420]	; (8001888 <main+0x578>)
 80016e4:	f7ff f8ea 	bl	80008bc <__aeabi_ddiv>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4967      	ldr	r1, [pc, #412]	; (800188c <main+0x57c>)
 80016ee:	e9c1 2300 	strd	r2, r3, [r1]
				Imoyen=(mesure_voltage-2.5)*12;
 80016f2:	4b66      	ldr	r3, [pc, #408]	; (800188c <main+0x57c>)
 80016f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016f8:	f04f 0200 	mov.w	r2, #0
 80016fc:	4b64      	ldr	r3, [pc, #400]	; (8001890 <main+0x580>)
 80016fe:	f7fe fdfb 	bl	80002f8 <__aeabi_dsub>
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	4610      	mov	r0, r2
 8001708:	4619      	mov	r1, r3
 800170a:	f04f 0200 	mov.w	r2, #0
 800170e:	4b61      	ldr	r3, [pc, #388]	; (8001894 <main+0x584>)
 8001710:	f7fe ffaa 	bl	8000668 <__aeabi_dmul>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	495f      	ldr	r1, [pc, #380]	; (8001898 <main+0x588>)
 800171a:	e9c1 2300 	strd	r2, r3, [r1]
				courant_buffer[1]=Imoyen;
 800171e:	4b5e      	ldr	r3, [pc, #376]	; (8001898 <main+0x588>)
 8001720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001724:	4957      	ldr	r1, [pc, #348]	; (8001884 <main+0x574>)
 8001726:	e9c1 2302 	strd	r2, r3, [r1, #8]
				sum=0;
 800172a:	4b53      	ldr	r3, [pc, #332]	; (8001878 <main+0x568>)
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
				erreur[0]=erreur[1];
 8001730:	4b5a      	ldr	r3, [pc, #360]	; (800189c <main+0x58c>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	4a59      	ldr	r2, [pc, #356]	; (800189c <main+0x58c>)
 8001736:	6013      	str	r3, [r2, #0]
				alpha2[0]=alpha2[1];
 8001738:	4b59      	ldr	r3, [pc, #356]	; (80018a0 <main+0x590>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	4a58      	ldr	r2, [pc, #352]	; (80018a0 <main+0x590>)
 800173e:	6013      	str	r3, [r2, #0]
				//erreur[1]=I_CONSIGNE-courant_buffer[1];
				erreur[1]=alpha_corrige_v[1]-courant_buffer[1];
 8001740:	4b58      	ldr	r3, [pc, #352]	; (80018a4 <main+0x594>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	4618      	mov	r0, r3
 8001746:	f7fe ff37 	bl	80005b8 <__aeabi_f2d>
 800174a:	4b4e      	ldr	r3, [pc, #312]	; (8001884 <main+0x574>)
 800174c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001750:	f7fe fdd2 	bl	80002f8 <__aeabi_dsub>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4610      	mov	r0, r2
 800175a:	4619      	mov	r1, r3
 800175c:	f7ff fa5c 	bl	8000c18 <__aeabi_d2f>
 8001760:	4603      	mov	r3, r0
 8001762:	4a4e      	ldr	r2, [pc, #312]	; (800189c <main+0x58c>)
 8001764:	6053      	str	r3, [r2, #4]
				alpha_corrige[0]=alpha_corrige[1];
 8001766:	4b50      	ldr	r3, [pc, #320]	; (80018a8 <main+0x598>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	4a4f      	ldr	r2, [pc, #316]	; (80018a8 <main+0x598>)
 800176c:	6013      	str	r3, [r2, #0]
				alpha1=erreur[1]*P;
 800176e:	4b4b      	ldr	r3, [pc, #300]	; (800189c <main+0x58c>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	4618      	mov	r0, r3
 8001774:	f7fe ff20 	bl	80005b8 <__aeabi_f2d>
 8001778:	a339      	add	r3, pc, #228	; (adr r3, 8001860 <main+0x550>)
 800177a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177e:	f7fe ff73 	bl	8000668 <__aeabi_dmul>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	4610      	mov	r0, r2
 8001788:	4619      	mov	r1, r3
 800178a:	f7ff fa45 	bl	8000c18 <__aeabi_d2f>
 800178e:	4603      	mov	r3, r0
 8001790:	4a46      	ldr	r2, [pc, #280]	; (80018ac <main+0x59c>)
 8001792:	6013      	str	r3, [r2, #0]
				alpha2[1]=alpha2[0]+((I*Te)/2)*(erreur[1]-erreur[0]);
 8001794:	4b42      	ldr	r3, [pc, #264]	; (80018a0 <main+0x590>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f7fe ff0d 	bl	80005b8 <__aeabi_f2d>
 800179e:	4604      	mov	r4, r0
 80017a0:	460d      	mov	r5, r1
 80017a2:	4b3e      	ldr	r3, [pc, #248]	; (800189c <main+0x58c>)
 80017a4:	ed93 7a01 	vldr	s14, [r3, #4]
 80017a8:	4b3c      	ldr	r3, [pc, #240]	; (800189c <main+0x58c>)
 80017aa:	edd3 7a00 	vldr	s15, [r3]
 80017ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017b2:	ee17 0a90 	vmov	r0, s15
 80017b6:	f7fe feff 	bl	80005b8 <__aeabi_f2d>
 80017ba:	a32b      	add	r3, pc, #172	; (adr r3, 8001868 <main+0x558>)
 80017bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c0:	f7fe ff52 	bl	8000668 <__aeabi_dmul>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4620      	mov	r0, r4
 80017ca:	4629      	mov	r1, r5
 80017cc:	f7fe fd96 	bl	80002fc <__adddf3>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4610      	mov	r0, r2
 80017d6:	4619      	mov	r1, r3
 80017d8:	f7ff fa1e 	bl	8000c18 <__aeabi_d2f>
 80017dc:	4603      	mov	r3, r0
 80017de:	4a30      	ldr	r2, [pc, #192]	; (80018a0 <main+0x590>)
 80017e0:	6053      	str	r3, [r2, #4]
				alpha_corrige[1]=alpha_corrige[0]+alpha1+alpha2[1];
 80017e2:	4b31      	ldr	r3, [pc, #196]	; (80018a8 <main+0x598>)
 80017e4:	ed93 7a00 	vldr	s14, [r3]
 80017e8:	4b30      	ldr	r3, [pc, #192]	; (80018ac <main+0x59c>)
 80017ea:	edd3 7a00 	vldr	s15, [r3]
 80017ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017f2:	4b2b      	ldr	r3, [pc, #172]	; (80018a0 <main+0x590>)
 80017f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80017f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017fc:	4b2a      	ldr	r3, [pc, #168]	; (80018a8 <main+0x598>)
 80017fe:	edc3 7a01 	vstr	s15, [r3, #4]
				if (alpha_corrige[1]>50)
 8001802:	4b29      	ldr	r3, [pc, #164]	; (80018a8 <main+0x598>)
 8001804:	edd3 7a01 	vldr	s15, [r3, #4]
 8001808:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80018b0 <main+0x5a0>
 800180c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001814:	dd03      	ble.n	800181e <main+0x50e>
				{
					alpha_corrige[1]=50;
 8001816:	4b24      	ldr	r3, [pc, #144]	; (80018a8 <main+0x598>)
 8001818:	4a26      	ldr	r2, [pc, #152]	; (80018b4 <main+0x5a4>)
 800181a:	605a      	str	r2, [r3, #4]
 800181c:	e00c      	b.n	8001838 <main+0x528>
				}
				else if(alpha_corrige[1]<-50)
 800181e:	4b22      	ldr	r3, [pc, #136]	; (80018a8 <main+0x598>)
 8001820:	edd3 7a01 	vldr	s15, [r3, #4]
 8001824:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80018b8 <main+0x5a8>
 8001828:	eef4 7ac7 	vcmpe.f32	s15, s14
 800182c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001830:	d502      	bpl.n	8001838 <main+0x528>
				{
					alpha_corrige[1]=-50;
 8001832:	4b1d      	ldr	r3, [pc, #116]	; (80018a8 <main+0x598>)
 8001834:	4a21      	ldr	r2, [pc, #132]	; (80018bc <main+0x5ac>)
 8001836:	605a      	str	r2, [r3, #4]
				}
				set_alpha((50+(int)alpha_corrige[1]));
 8001838:	4b1b      	ldr	r3, [pc, #108]	; (80018a8 <main+0x598>)
 800183a:	edd3 7a01 	vldr	s15, [r3, #4]
 800183e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001842:	ee17 3a90 	vmov	r3, s15
 8001846:	3332      	adds	r3, #50	; 0x32
 8001848:	4618      	mov	r0, r3
 800184a:	f000 f93f 	bl	8001acc <set_alpha>
				flagADC=0;
 800184e:	4b1c      	ldr	r3, [pc, #112]	; (80018c0 <main+0x5b0>)
 8001850:	2200      	movs	r2, #0
 8001852:	701a      	strb	r2, [r3, #0]
		if (flag==1)
 8001854:	e60e      	b.n	8001474 <main+0x164>
 8001856:	bf00      	nop
 8001858:	66666666 	.word	0x66666666
 800185c:	400a6666 	.word	0x400a6666
 8001860:	eb1c432d 	.word	0xeb1c432d
 8001864:	3f2a36e2 	.word	0x3f2a36e2
 8001868:	30553262 	.word	0x30553262
 800186c:	3ee3a92a 	.word	0x3ee3a92a
 8001870:	20000370 	.word	0x20000370
 8001874:	200002cc 	.word	0x200002cc
 8001878:	20000420 	.word	0x20000420
 800187c:	66666667 	.word	0x66666667
 8001880:	20000424 	.word	0x20000424
 8001884:	20000438 	.word	0x20000438
 8001888:	40b00000 	.word	0x40b00000
 800188c:	20000428 	.word	0x20000428
 8001890:	40040000 	.word	0x40040000
 8001894:	40280000 	.word	0x40280000
 8001898:	20000430 	.word	0x20000430
 800189c:	20000344 	.word	0x20000344
 80018a0:	20000350 	.word	0x20000350
 80018a4:	2000033c 	.word	0x2000033c
 80018a8:	20000358 	.word	0x20000358
 80018ac:	2000034c 	.word	0x2000034c
 80018b0:	42480000 	.word	0x42480000
 80018b4:	42480000 	.word	0x42480000
 80018b8:	c2480000 	.word	0xc2480000
 80018bc:	c2480000 	.word	0xc2480000
 80018c0:	200002c9 	.word	0x200002c9

080018c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b094      	sub	sp, #80	; 0x50
 80018c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ca:	f107 0318 	add.w	r3, r7, #24
 80018ce:	2238      	movs	r2, #56	; 0x38
 80018d0:	2100      	movs	r1, #0
 80018d2:	4618      	mov	r0, r3
 80018d4:	f008 fb7c 	bl	8009fd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018d8:	1d3b      	adds	r3, r7, #4
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	60da      	str	r2, [r3, #12]
 80018e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80018e6:	2000      	movs	r0, #0
 80018e8:	f003 fba2 	bl	8005030 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018ec:	2301      	movs	r3, #1
 80018ee:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018f4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018f6:	2302      	movs	r3, #2
 80018f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018fa:	2303      	movs	r3, #3
 80018fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80018fe:	2306      	movs	r3, #6
 8001900:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001902:	2355      	movs	r3, #85	; 0x55
 8001904:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001906:	2302      	movs	r3, #2
 8001908:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800190a:	2302      	movs	r3, #2
 800190c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800190e:	2302      	movs	r3, #2
 8001910:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001912:	f107 0318 	add.w	r3, r7, #24
 8001916:	4618      	mov	r0, r3
 8001918:	f003 fc3e 	bl	8005198 <HAL_RCC_OscConfig>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001922:	f000 f893 	bl	8001a4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001926:	230f      	movs	r3, #15
 8001928:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800192a:	2303      	movs	r3, #3
 800192c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001932:	2300      	movs	r3, #0
 8001934:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800193a:	1d3b      	adds	r3, r7, #4
 800193c:	2104      	movs	r1, #4
 800193e:	4618      	mov	r0, r3
 8001940:	f003 ff42 	bl	80057c8 <HAL_RCC_ClockConfig>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800194a:	f000 f87f 	bl	8001a4c <Error_Handler>
  }
}
 800194e:	bf00      	nop
 8001950:	3750      	adds	r7, #80	; 0x50
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	80fb      	strh	r3, [r7, #6]
	flag=1;
 8001962:	4b04      	ldr	r3, [pc, #16]	; (8001974 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001964:	2201      	movs	r2, #1
 8001966:	701a      	strb	r2, [r3, #0]
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	200002c8 	.word	0x200002c8

08001978 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]

	flagADC=1;
 8001980:	4b04      	ldr	r3, [pc, #16]	; (8001994 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001982:	2201      	movs	r2, #1
 8001984:	701a      	strb	r2, [r3, #0]
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	200002c9 	.word	0x200002c9

08001998 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a22      	ldr	r2, [pc, #136]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d101      	bne.n	80019ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019aa:	f001 f8df 	bl	8002b6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if(htim->Instance==TIM5){
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a20      	ldr	r2, [pc, #128]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d131      	bne.n	8001a1c <HAL_TIM_PeriodElapsedCallback+0x84>
	  valeur_timer=TIM3->CNT;
 80019b8:	4b1f      	ldr	r3, [pc, #124]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80019ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019bc:	461a      	mov	r2, r3
 80019be:	4b1f      	ldr	r3, [pc, #124]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80019c0:	601a      	str	r2, [r3, #0]
	  vitesse_buffer[0]=vitesse;
 80019c2:	4b1f      	ldr	r3, [pc, #124]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a1f      	ldr	r2, [pc, #124]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80019c8:	6013      	str	r3, [r2, #0]
	  vitesse=((((valeur_timer-32000)*60)/4096)/PERIODE_VITESSE);
 80019ca:	4b1c      	ldr	r3, [pc, #112]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f5a3 42fa 	sub.w	r2, r3, #32000	; 0x7d00
 80019d2:	4613      	mov	r3, r2
 80019d4:	011b      	lsls	r3, r3, #4
 80019d6:	1a9b      	subs	r3, r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	da01      	bge.n	80019e2 <HAL_TIM_PeriodElapsedCallback+0x4a>
 80019de:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80019e2:	131b      	asrs	r3, r3, #12
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7fe fdd5 	bl	8000594 <__aeabi_i2d>
 80019ea:	a30f      	add	r3, pc, #60	; (adr r3, 8001a28 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80019ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f0:	f7fe ff64 	bl	80008bc <__aeabi_ddiv>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4610      	mov	r0, r2
 80019fa:	4619      	mov	r1, r3
 80019fc:	f7ff f8e4 	bl	8000bc8 <__aeabi_d2iz>
 8001a00:	4603      	mov	r3, r0
 8001a02:	4a0f      	ldr	r2, [pc, #60]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001a04:	6013      	str	r3, [r2, #0]
	  vitesse_buffer[1]=vitesse;
 8001a06:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a0e      	ldr	r2, [pc, #56]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001a0c:	6053      	str	r3, [r2, #4]
	  TIM3->CNT=32000;
 8001a0e:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001a10:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001a14:	625a      	str	r2, [r3, #36]	; 0x24
	  flag_vitesse=1;
 8001a16:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	601a      	str	r2, [r3, #0]

  }
  /* USER CODE END Callback 1 */
}
 8001a1c:	bf00      	nop
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	f3af 8000 	nop.w
 8001a28:	9999999a 	.word	0x9999999a
 8001a2c:	3fb99999 	.word	0x3fb99999
 8001a30:	40001000 	.word	0x40001000
 8001a34:	40000c00 	.word	0x40000c00
 8001a38:	40000400 	.word	0x40000400
 8001a3c:	20000360 	.word	0x20000360
 8001a40:	2000031c 	.word	0x2000031c
 8001a44:	20000320 	.word	0x20000320
 8001a48:	20000364 	.word	0x20000364

08001a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a50:	b672      	cpsid	i
}
 8001a52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001a54:	e7fe      	b.n	8001a54 <Error_Handler+0x8>
	...

08001a58 <motorPowerOn>:

/**
  * @brief  Switch on the motor driver
  * @retval None
  */
void motorPowerOn(void){
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // just for test, you can delete it
 8001a5e:	2120      	movs	r1, #32
 8001a60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a64:	f003 fab2 	bl	8004fcc <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin,GPIO_PIN_SET);
 8001a68:	2201      	movs	r2, #1
 8001a6a:	2108      	movs	r1, #8
 8001a6c:	480a      	ldr	r0, [pc, #40]	; (8001a98 <motorPowerOn+0x40>)
 8001a6e:	f003 fa95 	bl	8004f9c <HAL_GPIO_WritePin>
	int i;
	for(i=0;i<70;i++)
 8001a72:	2300      	movs	r3, #0
 8001a74:	607b      	str	r3, [r7, #4]
 8001a76:	e002      	b.n	8001a7e <motorPowerOn+0x26>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	607b      	str	r3, [r7, #4]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b45      	cmp	r3, #69	; 0x45
 8001a82:	ddf9      	ble.n	8001a78 <motorPowerOn+0x20>
	{
	}
    HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin,GPIO_PIN_RESET);
 8001a84:	2200      	movs	r2, #0
 8001a86:	2108      	movs	r1, #8
 8001a88:	4803      	ldr	r0, [pc, #12]	; (8001a98 <motorPowerOn+0x40>)
 8001a8a:	f003 fa87 	bl	8004f9c <HAL_GPIO_WritePin>
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	48000800 	.word	0x48000800

08001a9c <motorPowerOff>:

/**
  * @brief  Switch off the motor driver
  * @retval None
  */
void motorPowerOff(void){
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // just for test, you can delete it
 8001aa0:	2120      	movs	r1, #32
 8001aa2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aa6:	f003 fa91 	bl	8004fcc <HAL_GPIO_TogglePin>
}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}

08001aae <motorSetSpeed>:
/**
  * @brief  Set the motor speed
  * @param  speed : target speed of the motor
  * @retval None
  */
void motorSetSpeed(int speed){
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b084      	sub	sp, #16
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
	int alpha=0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // just for test, you can delete it
 8001aba:	2120      	movs	r1, #32
 8001abc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ac0:	f003 fa84 	bl	8004fcc <HAL_GPIO_TogglePin>
	alpha=(int)alpha;
	char a=sprintf("rapport cyclique : %d\r\n",alpha);
	HAL_UART_Transmit(&huart2,a,sizeof(a), HAL_MAX_DELAY);
	set_alpha(alpha);
	*/
}
 8001ac4:	bf00      	nop
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <set_alpha>:
  * @brief  Set the motor speed
  * @param  a : set alpha to the value of a in %
  * @retval None
  */
void set_alpha(int a)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
	TIM1->CCR1=a*(TIM1->ARR)/100;
 8001ad4:	4b0f      	ldr	r3, [pc, #60]	; (8001b14 <set_alpha+0x48>)
 8001ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	fb02 f303 	mul.w	r3, r2, r3
 8001ade:	4a0d      	ldr	r2, [pc, #52]	; (8001b14 <set_alpha+0x48>)
 8001ae0:	490d      	ldr	r1, [pc, #52]	; (8001b18 <set_alpha+0x4c>)
 8001ae2:	fba1 1303 	umull	r1, r3, r1, r3
 8001ae6:	095b      	lsrs	r3, r3, #5
 8001ae8:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2=TIM1->ARR-a*(TIM1->ARR)/100;
 8001aea:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <set_alpha+0x48>)
 8001aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aee:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <set_alpha+0x48>)
 8001af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af2:	6879      	ldr	r1, [r7, #4]
 8001af4:	fb01 f303 	mul.w	r3, r1, r3
 8001af8:	4907      	ldr	r1, [pc, #28]	; (8001b18 <set_alpha+0x4c>)
 8001afa:	fba1 1303 	umull	r1, r3, r1, r3
 8001afe:	095b      	lsrs	r3, r3, #5
 8001b00:	4904      	ldr	r1, [pc, #16]	; (8001b14 <set_alpha+0x48>)
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	638b      	str	r3, [r1, #56]	; 0x38

}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	40012c00 	.word	0x40012c00
 8001b18:	51eb851f 	.word	0x51eb851f

08001b1c <shellInit>:

/**
  * @brief  Send a stating message
  * @retval None
  */
void shellInit(void){
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 8001b20:	f04f 33ff 	mov.w	r3, #4294967295
 8001b24:	226c      	movs	r2, #108	; 0x6c
 8001b26:	4906      	ldr	r1, [pc, #24]	; (8001b40 <shellInit+0x24>)
 8001b28:	4806      	ldr	r0, [pc, #24]	; (8001b44 <shellInit+0x28>)
 8001b2a:	f006 f9fc 	bl	8007f26 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8001b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b32:	221a      	movs	r2, #26
 8001b34:	4904      	ldr	r1, [pc, #16]	; (8001b48 <shellInit+0x2c>)
 8001b36:	4803      	ldr	r0, [pc, #12]	; (8001b44 <shellInit+0x28>)
 8001b38:	f006 f9f5 	bl	8007f26 <HAL_UART_Transmit>
}
 8001b3c:	bf00      	nop
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	0800d0f0 	.word	0x0800d0f0
 8001b44:	20000614 	.word	0x20000614
 8001b48:	0800d0d4 	.word	0x0800d0d4

08001b4c <shellPrompt>:

/**
  * @brief  Send the prompt
  * @retval None
  */
void shellPrompt(void){
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8001b50:	f04f 33ff 	mov.w	r3, #4294967295
 8001b54:	221a      	movs	r2, #26
 8001b56:	4903      	ldr	r1, [pc, #12]	; (8001b64 <shellPrompt+0x18>)
 8001b58:	4803      	ldr	r0, [pc, #12]	; (8001b68 <shellPrompt+0x1c>)
 8001b5a:	f006 f9e4 	bl	8007f26 <HAL_UART_Transmit>
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	0800d0d4 	.word	0x0800d0d4
 8001b68:	20000614 	.word	0x20000614

08001b6c <shellCmdNotFound>:

/**
  * @brief  Send the default message if the command is not found
  * @retval None
  */
void shellCmdNotFound(void){
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8001b70:	f04f 33ff 	mov.w	r3, #4294967295
 8001b74:	2214      	movs	r2, #20
 8001b76:	4903      	ldr	r1, [pc, #12]	; (8001b84 <shellCmdNotFound+0x18>)
 8001b78:	4803      	ldr	r0, [pc, #12]	; (8001b88 <shellCmdNotFound+0x1c>)
 8001b7a:	f006 f9d4 	bl	8007f26 <HAL_UART_Transmit>
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	0800d3d0 	.word	0x0800d3d0
 8001b88:	20000614 	.word	0x20000614

08001b8c <shellGetChar>:

/**
  * @brief  Function called for saving the new character and call and setup argc and argv variable if ENTER is pressed
  * @retval 1 if a new command is available, 0 if not.
  */
uint8_t shellGetChar(void){
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
	uint8_t newCmdReady = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	71fb      	strb	r3, [r7, #7]
	char* token;

	switch(uartRxBuffer[0]){
 8001b96:	4b2f      	ldr	r3, [pc, #188]	; (8001c54 <shellGetChar+0xc8>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	2b0d      	cmp	r3, #13
 8001b9c:	d002      	beq.n	8001ba4 <shellGetChar+0x18>
 8001b9e:	2b7f      	cmp	r3, #127	; 0x7f
 8001ba0:	d02f      	beq.n	8001c02 <shellGetChar+0x76>
 8001ba2:	e040      	b.n	8001c26 <shellGetChar+0x9a>
		// If Enter, update argc and argv
	case ASCII_CR:
		HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8001ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba8:	2203      	movs	r2, #3
 8001baa:	492b      	ldr	r1, [pc, #172]	; (8001c58 <shellGetChar+0xcc>)
 8001bac:	482b      	ldr	r0, [pc, #172]	; (8001c5c <shellGetChar+0xd0>)
 8001bae:	f006 f9ba 	bl	8007f26 <HAL_UART_Transmit>
		cmdBuffer[idxCmd] = '\0';
 8001bb2:	4b2b      	ldr	r3, [pc, #172]	; (8001c60 <shellGetChar+0xd4>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	4b2a      	ldr	r3, [pc, #168]	; (8001c64 <shellGetChar+0xd8>)
 8001bba:	2100      	movs	r1, #0
 8001bbc:	5499      	strb	r1, [r3, r2]
		argc = 0;
 8001bbe:	4b2a      	ldr	r3, [pc, #168]	; (8001c68 <shellGetChar+0xdc>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	701a      	strb	r2, [r3, #0]
		token = (char*)strtok(cmdBuffer, " ");
 8001bc4:	4929      	ldr	r1, [pc, #164]	; (8001c6c <shellGetChar+0xe0>)
 8001bc6:	4827      	ldr	r0, [pc, #156]	; (8001c64 <shellGetChar+0xd8>)
 8001bc8:	f008 fec8 	bl	800a95c <strtok>
 8001bcc:	6038      	str	r0, [r7, #0]
		while(token!=NULL){
 8001bce:	e00f      	b.n	8001bf0 <shellGetChar+0x64>
			argv[argc++] = token;
 8001bd0:	4b25      	ldr	r3, [pc, #148]	; (8001c68 <shellGetChar+0xdc>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	1c5a      	adds	r2, r3, #1
 8001bd6:	b2d1      	uxtb	r1, r2
 8001bd8:	4a23      	ldr	r2, [pc, #140]	; (8001c68 <shellGetChar+0xdc>)
 8001bda:	7011      	strb	r1, [r2, #0]
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4a24      	ldr	r2, [pc, #144]	; (8001c70 <shellGetChar+0xe4>)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			token = (char*)strtok(NULL, " ");
 8001be6:	4921      	ldr	r1, [pc, #132]	; (8001c6c <shellGetChar+0xe0>)
 8001be8:	2000      	movs	r0, #0
 8001bea:	f008 feb7 	bl	800a95c <strtok>
 8001bee:	6038      	str	r0, [r7, #0]
		while(token!=NULL){
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1ec      	bne.n	8001bd0 <shellGetChar+0x44>
		}

		idxCmd = 0;
 8001bf6:	4b1a      	ldr	r3, [pc, #104]	; (8001c60 <shellGetChar+0xd4>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	701a      	strb	r2, [r3, #0]
		newCmdReady = 1;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	71fb      	strb	r3, [r7, #7]
		break;
 8001c00:	e023      	b.n	8001c4a <shellGetChar+0xbe>
		// Delete last character if "return" is pressed
	case ASCII_BS:
		cmdBuffer[idxCmd--] = '\0';
 8001c02:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <shellGetChar+0xd4>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	1e5a      	subs	r2, r3, #1
 8001c08:	b2d1      	uxtb	r1, r2
 8001c0a:	4a15      	ldr	r2, [pc, #84]	; (8001c60 <shellGetChar+0xd4>)
 8001c0c:	7011      	strb	r1, [r2, #0]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	4b14      	ldr	r3, [pc, #80]	; (8001c64 <shellGetChar+0xd8>)
 8001c12:	2100      	movs	r1, #0
 8001c14:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&huart2, uartRxBuffer, 1, HAL_MAX_DELAY);
 8001c16:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	490d      	ldr	r1, [pc, #52]	; (8001c54 <shellGetChar+0xc8>)
 8001c1e:	480f      	ldr	r0, [pc, #60]	; (8001c5c <shellGetChar+0xd0>)
 8001c20:	f006 f981 	bl	8007f26 <HAL_UART_Transmit>
		break;
 8001c24:	e011      	b.n	8001c4a <shellGetChar+0xbe>
		// Default state : add new character to the command buffer
	default:
		cmdBuffer[idxCmd++] = uartRxBuffer[0];
 8001c26:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <shellGetChar+0xd4>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	1c5a      	adds	r2, r3, #1
 8001c2c:	b2d1      	uxtb	r1, r2
 8001c2e:	4a0c      	ldr	r2, [pc, #48]	; (8001c60 <shellGetChar+0xd4>)
 8001c30:	7011      	strb	r1, [r2, #0]
 8001c32:	461a      	mov	r2, r3
 8001c34:	4b07      	ldr	r3, [pc, #28]	; (8001c54 <shellGetChar+0xc8>)
 8001c36:	7819      	ldrb	r1, [r3, #0]
 8001c38:	4b0a      	ldr	r3, [pc, #40]	; (8001c64 <shellGetChar+0xd8>)
 8001c3a:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&huart2, uartRxBuffer, 1, HAL_MAX_DELAY);
 8001c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c40:	2201      	movs	r2, #1
 8001c42:	4904      	ldr	r1, [pc, #16]	; (8001c54 <shellGetChar+0xc8>)
 8001c44:	4805      	ldr	r0, [pc, #20]	; (8001c5c <shellGetChar+0xd0>)
 8001c46:	f006 f96e 	bl	8007f26 <HAL_UART_Transmit>
	}

	return newCmdReady;
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	200005cc 	.word	0x200005cc
 8001c58:	0800d15c 	.word	0x0800d15c
 8001c5c:	20000614 	.word	0x20000614
 8001c60:	200003b4 	.word	0x200003b4
 8001c64:	20000374 	.word	0x20000374
 8001c68:	200003dc 	.word	0x200003dc
 8001c6c:	0800cff8 	.word	0x0800cff8
 8001c70:	200003b8 	.word	0x200003b8
 8001c74:	00000000 	.word	0x00000000

08001c78 <shellExec>:

/**
  * @brief  Call function depends of the value of argc and argv
  * @retval None
  */
void shellExec(void){
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
	int i=0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	607b      	str	r3, [r7, #4]

	if(strcmp(argv[0],"set")==0){
 8001c82:	4b8f      	ldr	r3, [pc, #572]	; (8001ec0 <shellExec+0x248>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	498f      	ldr	r1, [pc, #572]	; (8001ec4 <shellExec+0x24c>)
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7fe fac9 	bl	8000220 <strcmp>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d16f      	bne.n	8001d74 <shellExec+0xfc>
		if(strcmp(argv[1],"PA5")==0 && ((strcmp(argv[2],"0")==0)||(strcmp(argv[2],"1")==0)) ){
 8001c94:	4b8a      	ldr	r3, [pc, #552]	; (8001ec0 <shellExec+0x248>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	498b      	ldr	r1, [pc, #556]	; (8001ec8 <shellExec+0x250>)
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7fe fac0 	bl	8000220 <strcmp>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d137      	bne.n	8001d16 <shellExec+0x9e>
 8001ca6:	4b86      	ldr	r3, [pc, #536]	; (8001ec0 <shellExec+0x248>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	4988      	ldr	r1, [pc, #544]	; (8001ecc <shellExec+0x254>)
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe fab7 	bl	8000220 <strcmp>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d008      	beq.n	8001cca <shellExec+0x52>
 8001cb8:	4b81      	ldr	r3, [pc, #516]	; (8001ec0 <shellExec+0x248>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	4984      	ldr	r1, [pc, #528]	; (8001ed0 <shellExec+0x258>)
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7fe faae 	bl	8000220 <strcmp>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d125      	bne.n	8001d16 <shellExec+0x9e>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, atoi(argv[2]));
 8001cca:	4b7d      	ldr	r3, [pc, #500]	; (8001ec0 <shellExec+0x248>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f008 f950 	bl	8009f74 <atoi>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	461a      	mov	r2, r3
 8001cda:	2120      	movs	r1, #32
 8001cdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ce0:	f003 f95c 	bl	8004f9c <HAL_GPIO_WritePin>
			stringSize = snprintf((char*)uartTxBuffer,UART_TX_BUFFER_SIZE,"Switch on/off led : %d\r\n",atoi(argv[2]));
 8001ce4:	4b76      	ldr	r3, [pc, #472]	; (8001ec0 <shellExec+0x248>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f008 f943 	bl	8009f74 <atoi>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	4a78      	ldr	r2, [pc, #480]	; (8001ed4 <shellExec+0x25c>)
 8001cf2:	2140      	movs	r1, #64	; 0x40
 8001cf4:	4878      	ldr	r0, [pc, #480]	; (8001ed8 <shellExec+0x260>)
 8001cf6:	f008 fddd 	bl	800a8b4 <sniprintf>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	4b77      	ldr	r3, [pc, #476]	; (8001edc <shellExec+0x264>)
 8001d00:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, uartTxBuffer, stringSize, HAL_MAX_DELAY);
 8001d02:	4b76      	ldr	r3, [pc, #472]	; (8001edc <shellExec+0x264>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	f04f 33ff 	mov.w	r3, #4294967295
 8001d0c:	4972      	ldr	r1, [pc, #456]	; (8001ed8 <shellExec+0x260>)
 8001d0e:	4874      	ldr	r0, [pc, #464]	; (8001ee0 <shellExec+0x268>)
 8001d10:	f006 f909 	bl	8007f26 <HAL_UART_Transmit>
 8001d14:	e1b3      	b.n	800207e <shellExec+0x406>
		}
		else if(strcmp(argv[1],"speed")==0){
 8001d16:	4b6a      	ldr	r3, [pc, #424]	; (8001ec0 <shellExec+0x248>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	4972      	ldr	r1, [pc, #456]	; (8001ee4 <shellExec+0x26c>)
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7fe fa7f 	bl	8000220 <strcmp>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d122      	bne.n	8001d6e <shellExec+0xf6>
			if(atoi(argv[2])==0 && strcmp(argv[2],"0")!=0){
 8001d28:	4b65      	ldr	r3, [pc, #404]	; (8001ec0 <shellExec+0x248>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f008 f921 	bl	8009f74 <atoi>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d110      	bne.n	8001d5a <shellExec+0xe2>
 8001d38:	4b61      	ldr	r3, [pc, #388]	; (8001ec0 <shellExec+0x248>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	4963      	ldr	r1, [pc, #396]	; (8001ecc <shellExec+0x254>)
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7fe fa6e 	bl	8000220 <strcmp>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d007      	beq.n	8001d5a <shellExec+0xe2>
				HAL_UART_Transmit(&huart2, motorSpeedInst, sizeof(motorSpeedInst), HAL_MAX_DELAY);
 8001d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4e:	2230      	movs	r2, #48	; 0x30
 8001d50:	4965      	ldr	r1, [pc, #404]	; (8001ee8 <shellExec+0x270>)
 8001d52:	4863      	ldr	r0, [pc, #396]	; (8001ee0 <shellExec+0x268>)
 8001d54:	f006 f8e7 	bl	8007f26 <HAL_UART_Transmit>
 8001d58:	e191      	b.n	800207e <shellExec+0x406>
			}
			else{
				motorSetSpeed(atoi(argv[2]));
 8001d5a:	4b59      	ldr	r3, [pc, #356]	; (8001ec0 <shellExec+0x248>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f008 f908 	bl	8009f74 <atoi>
 8001d64:	4603      	mov	r3, r0
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fea1 	bl	8001aae <motorSetSpeed>
				}
			}
	else{
		shellCmdNotFound();
	}
}
 8001d6c:	e187      	b.n	800207e <shellExec+0x406>
			shellCmdNotFound();
 8001d6e:	f7ff fefd 	bl	8001b6c <shellCmdNotFound>
}
 8001d72:	e184      	b.n	800207e <shellExec+0x406>
	else if(strcmp(argv[0],"help")==0)
 8001d74:	4b52      	ldr	r3, [pc, #328]	; (8001ec0 <shellExec+0x248>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	495c      	ldr	r1, [pc, #368]	; (8001eec <shellExec+0x274>)
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7fe fa50 	bl	8000220 <strcmp>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d108      	bne.n	8001d98 <shellExec+0x120>
		HAL_UART_Transmit(&huart2, help, sizeof(help), HAL_MAX_DELAY);
 8001d86:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8a:	f44f 7281 	mov.w	r2, #258	; 0x102
 8001d8e:	4958      	ldr	r1, [pc, #352]	; (8001ef0 <shellExec+0x278>)
 8001d90:	4853      	ldr	r0, [pc, #332]	; (8001ee0 <shellExec+0x268>)
 8001d92:	f006 f8c8 	bl	8007f26 <HAL_UART_Transmit>
}
 8001d96:	e172      	b.n	800207e <shellExec+0x406>
	else if(strcmp(argv[0],"pinout")==0)
 8001d98:	4b49      	ldr	r3, [pc, #292]	; (8001ec0 <shellExec+0x248>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4955      	ldr	r1, [pc, #340]	; (8001ef4 <shellExec+0x27c>)
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7fe fa3e 	bl	8000220 <strcmp>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d108      	bne.n	8001dbc <shellExec+0x144>
		HAL_UART_Transmit(&huart2, pinout, sizeof(pinout), HAL_MAX_DELAY);
 8001daa:	f04f 33ff 	mov.w	r3, #4294967295
 8001dae:	f44f 7281 	mov.w	r2, #258	; 0x102
 8001db2:	4951      	ldr	r1, [pc, #324]	; (8001ef8 <shellExec+0x280>)
 8001db4:	484a      	ldr	r0, [pc, #296]	; (8001ee0 <shellExec+0x268>)
 8001db6:	f006 f8b6 	bl	8007f26 <HAL_UART_Transmit>
}
 8001dba:	e160      	b.n	800207e <shellExec+0x406>
	else if((strcmp(argv[0],"power")==0)&&(strcmp(argv[1],"on")==0))
 8001dbc:	4b40      	ldr	r3, [pc, #256]	; (8001ec0 <shellExec+0x248>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	494e      	ldr	r1, [pc, #312]	; (8001efc <shellExec+0x284>)
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7fe fa2c 	bl	8000220 <strcmp>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d112      	bne.n	8001df4 <shellExec+0x17c>
 8001dce:	4b3c      	ldr	r3, [pc, #240]	; (8001ec0 <shellExec+0x248>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	494b      	ldr	r1, [pc, #300]	; (8001f00 <shellExec+0x288>)
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7fe fa23 	bl	8000220 <strcmp>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d109      	bne.n	8001df4 <shellExec+0x17c>
		HAL_UART_Transmit(&huart2, powerOn, sizeof(powerOn), HAL_MAX_DELAY);
 8001de0:	f04f 33ff 	mov.w	r3, #4294967295
 8001de4:	221a      	movs	r2, #26
 8001de6:	4947      	ldr	r1, [pc, #284]	; (8001f04 <shellExec+0x28c>)
 8001de8:	483d      	ldr	r0, [pc, #244]	; (8001ee0 <shellExec+0x268>)
 8001dea:	f006 f89c 	bl	8007f26 <HAL_UART_Transmit>
		motorPowerOn();
 8001dee:	f7ff fe33 	bl	8001a58 <motorPowerOn>
 8001df2:	e144      	b.n	800207e <shellExec+0x406>
	else if((strcmp(argv[0],"power")==0)&&(strcmp(argv[1],"off")==0))
 8001df4:	4b32      	ldr	r3, [pc, #200]	; (8001ec0 <shellExec+0x248>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4940      	ldr	r1, [pc, #256]	; (8001efc <shellExec+0x284>)
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7fe fa10 	bl	8000220 <strcmp>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d112      	bne.n	8001e2c <shellExec+0x1b4>
 8001e06:	4b2e      	ldr	r3, [pc, #184]	; (8001ec0 <shellExec+0x248>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	493f      	ldr	r1, [pc, #252]	; (8001f08 <shellExec+0x290>)
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7fe fa07 	bl	8000220 <strcmp>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d109      	bne.n	8001e2c <shellExec+0x1b4>
		HAL_UART_Transmit(&huart2, powerOff, sizeof(powerOff), HAL_MAX_DELAY);
 8001e18:	f04f 33ff 	mov.w	r3, #4294967295
 8001e1c:	221b      	movs	r2, #27
 8001e1e:	493b      	ldr	r1, [pc, #236]	; (8001f0c <shellExec+0x294>)
 8001e20:	482f      	ldr	r0, [pc, #188]	; (8001ee0 <shellExec+0x268>)
 8001e22:	f006 f880 	bl	8007f26 <HAL_UART_Transmit>
		motorPowerOff();
 8001e26:	f7ff fe39 	bl	8001a9c <motorPowerOff>
 8001e2a:	e128      	b.n	800207e <shellExec+0x406>
	else if((strcmp(argv[0],"alpha")==0))
 8001e2c:	4b24      	ldr	r3, [pc, #144]	; (8001ec0 <shellExec+0x248>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4937      	ldr	r1, [pc, #220]	; (8001f10 <shellExec+0x298>)
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7fe f9f4 	bl	8000220 <strcmp>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d110      	bne.n	8001e60 <shellExec+0x1e8>
		HAL_UART_Transmit(&huart2, alpha, sizeof(alpha), HAL_MAX_DELAY);
 8001e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e42:	2213      	movs	r2, #19
 8001e44:	4933      	ldr	r1, [pc, #204]	; (8001f14 <shellExec+0x29c>)
 8001e46:	4826      	ldr	r0, [pc, #152]	; (8001ee0 <shellExec+0x268>)
 8001e48:	f006 f86d 	bl	8007f26 <HAL_UART_Transmit>
		set_alpha(atoi(argv[1]));
 8001e4c:	4b1c      	ldr	r3, [pc, #112]	; (8001ec0 <shellExec+0x248>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f008 f88f 	bl	8009f74 <atoi>
 8001e56:	4603      	mov	r3, r0
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff fe37 	bl	8001acc <set_alpha>
}
 8001e5e:	e10e      	b.n	800207e <shellExec+0x406>
	else if ((strcmp(argv[0],"set")==0)&&(strcmp(argv[1],"speed")==0))
 8001e60:	4b17      	ldr	r3, [pc, #92]	; (8001ec0 <shellExec+0x248>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4917      	ldr	r1, [pc, #92]	; (8001ec4 <shellExec+0x24c>)
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7fe f9da 	bl	8000220 <strcmp>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d119      	bne.n	8001ea6 <shellExec+0x22e>
 8001e72:	4b13      	ldr	r3, [pc, #76]	; (8001ec0 <shellExec+0x248>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	491b      	ldr	r1, [pc, #108]	; (8001ee4 <shellExec+0x26c>)
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7fe f9d1 	bl	8000220 <strcmp>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d110      	bne.n	8001ea6 <shellExec+0x22e>
		HAL_UART_Transmit(&huart2, setspeed, sizeof(setspeed), HAL_MAX_DELAY);
 8001e84:	f04f 33ff 	mov.w	r3, #4294967295
 8001e88:	221d      	movs	r2, #29
 8001e8a:	4923      	ldr	r1, [pc, #140]	; (8001f18 <shellExec+0x2a0>)
 8001e8c:	4814      	ldr	r0, [pc, #80]	; (8001ee0 <shellExec+0x268>)
 8001e8e:	f006 f84a 	bl	8007f26 <HAL_UART_Transmit>
		motorSetSpeed(atoi (argv[2]));
 8001e92:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <shellExec+0x248>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f008 f86c 	bl	8009f74 <atoi>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff fe05 	bl	8001aae <motorSetSpeed>
 8001ea4:	e0eb      	b.n	800207e <shellExec+0x406>
	else if ((strcmp(argv[0],"mesure")==0))
 8001ea6:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <shellExec+0x248>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	491c      	ldr	r1, [pc, #112]	; (8001f1c <shellExec+0x2a4>)
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7fe f9b7 	bl	8000220 <strcmp>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f040 809f 	bne.w	8001ff8 <shellExec+0x380>
		for(i=0;i<20;i++)
 8001eba:	2300      	movs	r3, #0
 8001ebc:	607b      	str	r3, [r7, #4]
 8001ebe:	e03c      	b.n	8001f3a <shellExec+0x2c2>
 8001ec0:	200003b8 	.word	0x200003b8
 8001ec4:	0800cffc 	.word	0x0800cffc
 8001ec8:	0800d000 	.word	0x0800d000
 8001ecc:	0800d004 	.word	0x0800d004
 8001ed0:	0800d008 	.word	0x0800d008
 8001ed4:	0800d00c 	.word	0x0800d00c
 8001ed8:	200005d0 	.word	0x200005d0
 8001edc:	20000610 	.word	0x20000610
 8001ee0:	20000614 	.word	0x20000614
 8001ee4:	0800d028 	.word	0x0800d028
 8001ee8:	0800d3a0 	.word	0x0800d3a0
 8001eec:	0800d030 	.word	0x0800d030
 8001ef0:	0800d160 	.word	0x0800d160
 8001ef4:	0800d038 	.word	0x0800d038
 8001ef8:	0800d264 	.word	0x0800d264
 8001efc:	0800d040 	.word	0x0800d040
 8001f00:	0800d048 	.word	0x0800d048
 8001f04:	0800d368 	.word	0x0800d368
 8001f08:	0800d04c 	.word	0x0800d04c
 8001f0c:	0800d384 	.word	0x0800d384
 8001f10:	0800d050 	.word	0x0800d050
 8001f14:	0800d3e4 	.word	0x0800d3e4
 8001f18:	0800d3f8 	.word	0x0800d3f8
 8001f1c:	0800d058 	.word	0x0800d058
			sum=sum+ADC_Buffer[i];
 8001f20:	4a5b      	ldr	r2, [pc, #364]	; (8002090 <shellExec+0x418>)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f28:	461a      	mov	r2, r3
 8001f2a:	4b5a      	ldr	r3, [pc, #360]	; (8002094 <shellExec+0x41c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4413      	add	r3, r2
 8001f30:	4a58      	ldr	r2, [pc, #352]	; (8002094 <shellExec+0x41c>)
 8001f32:	6013      	str	r3, [r2, #0]
		for(i=0;i<20;i++)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3301      	adds	r3, #1
 8001f38:	607b      	str	r3, [r7, #4]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2b13      	cmp	r3, #19
 8001f3e:	ddef      	ble.n	8001f20 <shellExec+0x2a8>
		mesure_mean=sum/10;
 8001f40:	4b54      	ldr	r3, [pc, #336]	; (8002094 <shellExec+0x41c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a54      	ldr	r2, [pc, #336]	; (8002098 <shellExec+0x420>)
 8001f46:	fb82 1203 	smull	r1, r2, r2, r3
 8001f4a:	1092      	asrs	r2, r2, #2
 8001f4c:	17db      	asrs	r3, r3, #31
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	4a52      	ldr	r2, [pc, #328]	; (800209c <shellExec+0x424>)
 8001f52:	6013      	str	r3, [r2, #0]
		i=0;
 8001f54:	2300      	movs	r3, #0
 8001f56:	607b      	str	r3, [r7, #4]
		courant_buffer[0]=courant_buffer[1];
 8001f58:	4b51      	ldr	r3, [pc, #324]	; (80020a0 <shellExec+0x428>)
 8001f5a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001f5e:	4950      	ldr	r1, [pc, #320]	; (80020a0 <shellExec+0x428>)
 8001f60:	e9c1 2300 	strd	r2, r3, [r1]
		mesure_voltage=((double)mesure_mean*3.3)/4096.0;
 8001f64:	4b4d      	ldr	r3, [pc, #308]	; (800209c <shellExec+0x424>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7fe fb13 	bl	8000594 <__aeabi_i2d>
 8001f6e:	a346      	add	r3, pc, #280	; (adr r3, 8002088 <shellExec+0x410>)
 8001f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f74:	f7fe fb78 	bl	8000668 <__aeabi_dmul>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	4619      	mov	r1, r3
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	4b47      	ldr	r3, [pc, #284]	; (80020a4 <shellExec+0x42c>)
 8001f86:	f7fe fc99 	bl	80008bc <__aeabi_ddiv>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	4946      	ldr	r1, [pc, #280]	; (80020a8 <shellExec+0x430>)
 8001f90:	e9c1 2300 	strd	r2, r3, [r1]
		Imoyen=(mesure_voltage-2.5)*12;
 8001f94:	4b44      	ldr	r3, [pc, #272]	; (80020a8 <shellExec+0x430>)
 8001f96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f9a:	f04f 0200 	mov.w	r2, #0
 8001f9e:	4b43      	ldr	r3, [pc, #268]	; (80020ac <shellExec+0x434>)
 8001fa0:	f7fe f9aa 	bl	80002f8 <__aeabi_dsub>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	4610      	mov	r0, r2
 8001faa:	4619      	mov	r1, r3
 8001fac:	f04f 0200 	mov.w	r2, #0
 8001fb0:	4b3f      	ldr	r3, [pc, #252]	; (80020b0 <shellExec+0x438>)
 8001fb2:	f7fe fb59 	bl	8000668 <__aeabi_dmul>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	460b      	mov	r3, r1
 8001fba:	493e      	ldr	r1, [pc, #248]	; (80020b4 <shellExec+0x43c>)
 8001fbc:	e9c1 2300 	strd	r2, r3, [r1]
		courant_buffer[1]=Imoyen;
 8001fc0:	4b3c      	ldr	r3, [pc, #240]	; (80020b4 <shellExec+0x43c>)
 8001fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc6:	4936      	ldr	r1, [pc, #216]	; (80020a0 <shellExec+0x428>)
 8001fc8:	e9c1 2302 	strd	r2, r3, [r1, #8]
		sprintf(chaine1,"le courant vaut %f A \r\n",Imoyen);
 8001fcc:	4b39      	ldr	r3, [pc, #228]	; (80020b4 <shellExec+0x43c>)
 8001fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd2:	4939      	ldr	r1, [pc, #228]	; (80020b8 <shellExec+0x440>)
 8001fd4:	4839      	ldr	r0, [pc, #228]	; (80020bc <shellExec+0x444>)
 8001fd6:	f008 fca1 	bl	800a91c <siprintf>
		HAL_UART_Transmit(&huart2, chaine1,strlen(chaine1),HAL_MAX_DELAY);
 8001fda:	4838      	ldr	r0, [pc, #224]	; (80020bc <shellExec+0x444>)
 8001fdc:	f7fe f92a 	bl	8000234 <strlen>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe8:	4934      	ldr	r1, [pc, #208]	; (80020bc <shellExec+0x444>)
 8001fea:	4835      	ldr	r0, [pc, #212]	; (80020c0 <shellExec+0x448>)
 8001fec:	f005 ff9b 	bl	8007f26 <HAL_UART_Transmit>
		sum=0;
 8001ff0:	4b28      	ldr	r3, [pc, #160]	; (8002094 <shellExec+0x41c>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
}
 8001ff6:	e042      	b.n	800207e <shellExec+0x406>
	else if (strcmp(argv[0],"showspeed")==0)
 8001ff8:	4b32      	ldr	r3, [pc, #200]	; (80020c4 <shellExec+0x44c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4932      	ldr	r1, [pc, #200]	; (80020c8 <shellExec+0x450>)
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe f90e 	bl	8000220 <strcmp>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d112      	bne.n	8002030 <shellExec+0x3b8>
			sprintf(chaine2,"la vitesse est de %d tr.min \r\n",vitesse);
 800200a:	4b30      	ldr	r3, [pc, #192]	; (80020cc <shellExec+0x454>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	461a      	mov	r2, r3
 8002010:	492f      	ldr	r1, [pc, #188]	; (80020d0 <shellExec+0x458>)
 8002012:	4830      	ldr	r0, [pc, #192]	; (80020d4 <shellExec+0x45c>)
 8002014:	f008 fc82 	bl	800a91c <siprintf>
			HAL_UART_Transmit(&huart2,chaine2 ,strlen(chaine2), HAL_MAX_DELAY);
 8002018:	482e      	ldr	r0, [pc, #184]	; (80020d4 <shellExec+0x45c>)
 800201a:	f7fe f90b 	bl	8000234 <strlen>
 800201e:	4603      	mov	r3, r0
 8002020:	b29a      	uxth	r2, r3
 8002022:	f04f 33ff 	mov.w	r3, #4294967295
 8002026:	492b      	ldr	r1, [pc, #172]	; (80020d4 <shellExec+0x45c>)
 8002028:	4825      	ldr	r0, [pc, #148]	; (80020c0 <shellExec+0x448>)
 800202a:	f005 ff7c 	bl	8007f26 <HAL_UART_Transmit>
}
 800202e:	e026      	b.n	800207e <shellExec+0x406>
	else if (strcmp(argv[0],"asserv")==0)
 8002030:	4b24      	ldr	r3, [pc, #144]	; (80020c4 <shellExec+0x44c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4928      	ldr	r1, [pc, #160]	; (80020d8 <shellExec+0x460>)
 8002036:	4618      	mov	r0, r3
 8002038:	f7fe f8f2 	bl	8000220 <strcmp>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d11a      	bne.n	8002078 <shellExec+0x400>
				sprintf(chaine2,"asservissement lance à la vitesse \r\n");
 8002042:	4926      	ldr	r1, [pc, #152]	; (80020dc <shellExec+0x464>)
 8002044:	4823      	ldr	r0, [pc, #140]	; (80020d4 <shellExec+0x45c>)
 8002046:	f008 fc69 	bl	800a91c <siprintf>
				HAL_UART_Transmit(&huart2,chaine2 ,strlen(chaine2), HAL_MAX_DELAY);
 800204a:	4822      	ldr	r0, [pc, #136]	; (80020d4 <shellExec+0x45c>)
 800204c:	f7fe f8f2 	bl	8000234 <strlen>
 8002050:	4603      	mov	r3, r0
 8002052:	b29a      	uxth	r2, r3
 8002054:	f04f 33ff 	mov.w	r3, #4294967295
 8002058:	491e      	ldr	r1, [pc, #120]	; (80020d4 <shellExec+0x45c>)
 800205a:	4819      	ldr	r0, [pc, #100]	; (80020c0 <shellExec+0x448>)
 800205c:	f005 ff63 	bl	8007f26 <HAL_UART_Transmit>
				if(flag_asserv==0){
 8002060:	4b1f      	ldr	r3, [pc, #124]	; (80020e0 <shellExec+0x468>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d103      	bne.n	8002070 <shellExec+0x3f8>
					flag_asserv=1;
 8002068:	4b1d      	ldr	r3, [pc, #116]	; (80020e0 <shellExec+0x468>)
 800206a:	2201      	movs	r2, #1
 800206c:	601a      	str	r2, [r3, #0]
}
 800206e:	e006      	b.n	800207e <shellExec+0x406>
					flag_asserv=0;
 8002070:	4b1b      	ldr	r3, [pc, #108]	; (80020e0 <shellExec+0x468>)
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
}
 8002076:	e002      	b.n	800207e <shellExec+0x406>
		shellCmdNotFound();
 8002078:	f7ff fd78 	bl	8001b6c <shellCmdNotFound>
}
 800207c:	e7ff      	b.n	800207e <shellExec+0x406>
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	66666666 	.word	0x66666666
 800208c:	400a6666 	.word	0x400a6666
 8002090:	200002cc 	.word	0x200002cc
 8002094:	20000420 	.word	0x20000420
 8002098:	66666667 	.word	0x66666667
 800209c:	20000424 	.word	0x20000424
 80020a0:	20000438 	.word	0x20000438
 80020a4:	40b00000 	.word	0x40b00000
 80020a8:	20000428 	.word	0x20000428
 80020ac:	40040000 	.word	0x40040000
 80020b0:	40280000 	.word	0x40280000
 80020b4:	20000430 	.word	0x20000430
 80020b8:	0800d060 	.word	0x0800d060
 80020bc:	200003e0 	.word	0x200003e0
 80020c0:	20000614 	.word	0x20000614
 80020c4:	200003b8 	.word	0x200003b8
 80020c8:	0800d078 	.word	0x0800d078
 80020cc:	2000031c 	.word	0x2000031c
 80020d0:	0800d084 	.word	0x0800d084
 80020d4:	20000400 	.word	0x20000400
 80020d8:	0800d0a4 	.word	0x0800d0a4
 80020dc:	0800d0ac 	.word	0x0800d0ac
 80020e0:	20000368 	.word	0x20000368

080020e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ea:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <HAL_MspInit+0x44>)
 80020ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ee:	4a0e      	ldr	r2, [pc, #56]	; (8002128 <HAL_MspInit+0x44>)
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	6613      	str	r3, [r2, #96]	; 0x60
 80020f6:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <HAL_MspInit+0x44>)
 80020f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	607b      	str	r3, [r7, #4]
 8002100:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002102:	4b09      	ldr	r3, [pc, #36]	; (8002128 <HAL_MspInit+0x44>)
 8002104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002106:	4a08      	ldr	r2, [pc, #32]	; (8002128 <HAL_MspInit+0x44>)
 8002108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800210c:	6593      	str	r3, [r2, #88]	; 0x58
 800210e:	4b06      	ldr	r3, [pc, #24]	; (8002128 <HAL_MspInit+0x44>)
 8002110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002116:	603b      	str	r3, [r7, #0]
 8002118:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800211a:	f003 f82d 	bl	8005178 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40021000 	.word	0x40021000

0800212c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b08c      	sub	sp, #48	; 0x30
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002134:	2300      	movs	r3, #0
 8002136:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8002138:	2300      	movs	r3, #0
 800213a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800213c:	2300      	movs	r3, #0
 800213e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002142:	4b2d      	ldr	r3, [pc, #180]	; (80021f8 <HAL_InitTick+0xcc>)
 8002144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002146:	4a2c      	ldr	r2, [pc, #176]	; (80021f8 <HAL_InitTick+0xcc>)
 8002148:	f043 0310 	orr.w	r3, r3, #16
 800214c:	6593      	str	r3, [r2, #88]	; 0x58
 800214e:	4b2a      	ldr	r3, [pc, #168]	; (80021f8 <HAL_InitTick+0xcc>)
 8002150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002152:	f003 0310 	and.w	r3, r3, #16
 8002156:	60bb      	str	r3, [r7, #8]
 8002158:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800215a:	f107 020c 	add.w	r2, r7, #12
 800215e:	f107 0310 	add.w	r3, r7, #16
 8002162:	4611      	mov	r1, r2
 8002164:	4618      	mov	r0, r3
 8002166:	f003 fd05 	bl	8005b74 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800216a:	f003 fcd7 	bl	8005b1c <HAL_RCC_GetPCLK1Freq>
 800216e:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002172:	4a22      	ldr	r2, [pc, #136]	; (80021fc <HAL_InitTick+0xd0>)
 8002174:	fba2 2303 	umull	r2, r3, r2, r3
 8002178:	0c9b      	lsrs	r3, r3, #18
 800217a:	3b01      	subs	r3, #1
 800217c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800217e:	4b20      	ldr	r3, [pc, #128]	; (8002200 <HAL_InitTick+0xd4>)
 8002180:	4a20      	ldr	r2, [pc, #128]	; (8002204 <HAL_InitTick+0xd8>)
 8002182:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002184:	4b1e      	ldr	r3, [pc, #120]	; (8002200 <HAL_InitTick+0xd4>)
 8002186:	f240 32e7 	movw	r2, #999	; 0x3e7
 800218a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800218c:	4a1c      	ldr	r2, [pc, #112]	; (8002200 <HAL_InitTick+0xd4>)
 800218e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002190:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002192:	4b1b      	ldr	r3, [pc, #108]	; (8002200 <HAL_InitTick+0xd4>)
 8002194:	2200      	movs	r2, #0
 8002196:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002198:	4b19      	ldr	r3, [pc, #100]	; (8002200 <HAL_InitTick+0xd4>)
 800219a:	2200      	movs	r2, #0
 800219c:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 800219e:	4818      	ldr	r0, [pc, #96]	; (8002200 <HAL_InitTick+0xd4>)
 80021a0:	f003 ffae 	bl	8006100 <HAL_TIM_Base_Init>
 80021a4:	4603      	mov	r3, r0
 80021a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80021aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d11b      	bne.n	80021ea <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80021b2:	4813      	ldr	r0, [pc, #76]	; (8002200 <HAL_InitTick+0xd4>)
 80021b4:	f004 f86c 	bl	8006290 <HAL_TIM_Base_Start_IT>
 80021b8:	4603      	mov	r3, r0
 80021ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80021be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d111      	bne.n	80021ea <HAL_InitTick+0xbe>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80021c6:	2036      	movs	r0, #54	; 0x36
 80021c8:	f002 fa26 	bl	8004618 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b0f      	cmp	r3, #15
 80021d0:	d808      	bhi.n	80021e4 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80021d2:	2200      	movs	r2, #0
 80021d4:	6879      	ldr	r1, [r7, #4]
 80021d6:	2036      	movs	r0, #54	; 0x36
 80021d8:	f002 fa04 	bl	80045e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021dc:	4a0a      	ldr	r2, [pc, #40]	; (8002208 <HAL_InitTick+0xdc>)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6013      	str	r3, [r2, #0]
 80021e2:	e002      	b.n	80021ea <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80021ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3730      	adds	r7, #48	; 0x30
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40021000 	.word	0x40021000
 80021fc:	431bde83 	.word	0x431bde83
 8002200:	20000448 	.word	0x20000448
 8002204:	40001000 	.word	0x40001000
 8002208:	20000004 	.word	0x20000004

0800220c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002210:	e7fe      	b.n	8002210 <NMI_Handler+0x4>

08002212 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002212:	b480      	push	{r7}
 8002214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002216:	e7fe      	b.n	8002216 <HardFault_Handler+0x4>

08002218 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800221c:	e7fe      	b.n	800221c <MemManage_Handler+0x4>

0800221e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002222:	e7fe      	b.n	8002222 <BusFault_Handler+0x4>

08002224 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002228:	e7fe      	b.n	8002228 <UsageFault_Handler+0x4>

0800222a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800222e:	bf00      	nop
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800223c:	bf00      	nop
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002246:	b480      	push	{r7}
 8002248:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
	...

08002264 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002268:	4802      	ldr	r0, [pc, #8]	; (8002274 <DMA1_Channel1_IRQHandler+0x10>)
 800226a:	f002 fbc6 	bl	80049fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000268 	.word	0x20000268

08002278 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800227c:	4802      	ldr	r0, [pc, #8]	; (8002288 <USART2_IRQHandler+0x10>)
 800227e:	f005 ff3f 	bl	8008100 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	20000614 	.word	0x20000614

0800228c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8002290:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002294:	f002 feb4 	bl	8005000 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002298:	bf00      	nop
 800229a:	bd80      	pop	{r7, pc}

0800229c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80022a0:	4802      	ldr	r0, [pc, #8]	; (80022ac <TIM5_IRQHandler+0x10>)
 80022a2:	f004 fb15 	bl	80068d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	2000057c 	.word	0x2000057c

080022b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80022b4:	4802      	ldr	r0, [pc, #8]	; (80022c0 <TIM6_DAC_IRQHandler+0x10>)
 80022b6:	f004 fb0b 	bl	80068d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80022ba:	bf00      	nop
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	20000448 	.word	0x20000448

080022c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
	return 1;
 80022c8:	2301      	movs	r3, #1
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <_kill>:

int _kill(int pid, int sig)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80022de:	f007 fe4d 	bl	8009f7c <__errno>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2216      	movs	r2, #22
 80022e6:	601a      	str	r2, [r3, #0]
	return -1;
 80022e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <_exit>:

void _exit (int status)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80022fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f7ff ffe7 	bl	80022d4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002306:	e7fe      	b.n	8002306 <_exit+0x12>

08002308 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]
 8002318:	e00a      	b.n	8002330 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800231a:	f3af 8000 	nop.w
 800231e:	4601      	mov	r1, r0
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	60ba      	str	r2, [r7, #8]
 8002326:	b2ca      	uxtb	r2, r1
 8002328:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	3301      	adds	r3, #1
 800232e:	617b      	str	r3, [r7, #20]
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	429a      	cmp	r2, r3
 8002336:	dbf0      	blt.n	800231a <_read+0x12>
	}

return len;
 8002338:	687b      	ldr	r3, [r7, #4]
}
 800233a:	4618      	mov	r0, r3
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b086      	sub	sp, #24
 8002346:	af00      	add	r7, sp, #0
 8002348:	60f8      	str	r0, [r7, #12]
 800234a:	60b9      	str	r1, [r7, #8]
 800234c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800234e:	2300      	movs	r3, #0
 8002350:	617b      	str	r3, [r7, #20]
 8002352:	e009      	b.n	8002368 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	1c5a      	adds	r2, r3, #1
 8002358:	60ba      	str	r2, [r7, #8]
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	3301      	adds	r3, #1
 8002366:	617b      	str	r3, [r7, #20]
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	429a      	cmp	r2, r3
 800236e:	dbf1      	blt.n	8002354 <_write+0x12>
	}
	return len;
 8002370:	687b      	ldr	r3, [r7, #4]
}
 8002372:	4618      	mov	r0, r3
 8002374:	3718      	adds	r7, #24
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <_close>:

int _close(int file)
{
 800237a:	b480      	push	{r7}
 800237c:	b083      	sub	sp, #12
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
	return -1;
 8002382:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002386:	4618      	mov	r0, r3
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr

08002392 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002392:	b480      	push	{r7}
 8002394:	b083      	sub	sp, #12
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
 800239a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023a2:	605a      	str	r2, [r3, #4]
	return 0;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <_isatty>:

int _isatty(int file)
{
 80023b2:	b480      	push	{r7}
 80023b4:	b083      	sub	sp, #12
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
	return 1;
 80023ba:	2301      	movs	r3, #1
}
 80023bc:	4618      	mov	r0, r3
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
	return 0;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3714      	adds	r7, #20
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
	...

080023e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023ec:	4a14      	ldr	r2, [pc, #80]	; (8002440 <_sbrk+0x5c>)
 80023ee:	4b15      	ldr	r3, [pc, #84]	; (8002444 <_sbrk+0x60>)
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023f8:	4b13      	ldr	r3, [pc, #76]	; (8002448 <_sbrk+0x64>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d102      	bne.n	8002406 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002400:	4b11      	ldr	r3, [pc, #68]	; (8002448 <_sbrk+0x64>)
 8002402:	4a12      	ldr	r2, [pc, #72]	; (800244c <_sbrk+0x68>)
 8002404:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002406:	4b10      	ldr	r3, [pc, #64]	; (8002448 <_sbrk+0x64>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4413      	add	r3, r2
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	429a      	cmp	r2, r3
 8002412:	d207      	bcs.n	8002424 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002414:	f007 fdb2 	bl	8009f7c <__errno>
 8002418:	4603      	mov	r3, r0
 800241a:	220c      	movs	r2, #12
 800241c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800241e:	f04f 33ff 	mov.w	r3, #4294967295
 8002422:	e009      	b.n	8002438 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002424:	4b08      	ldr	r3, [pc, #32]	; (8002448 <_sbrk+0x64>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800242a:	4b07      	ldr	r3, [pc, #28]	; (8002448 <_sbrk+0x64>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4413      	add	r3, r2
 8002432:	4a05      	ldr	r2, [pc, #20]	; (8002448 <_sbrk+0x64>)
 8002434:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002436:	68fb      	ldr	r3, [r7, #12]
}
 8002438:	4618      	mov	r0, r3
 800243a:	3718      	adds	r7, #24
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	20020000 	.word	0x20020000
 8002444:	00000400 	.word	0x00000400
 8002448:	20000494 	.word	0x20000494
 800244c:	200006b8 	.word	0x200006b8

08002450 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002454:	4b06      	ldr	r3, [pc, #24]	; (8002470 <SystemInit+0x20>)
 8002456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800245a:	4a05      	ldr	r2, [pc, #20]	; (8002470 <SystemInit+0x20>)
 800245c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002460:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002464:	bf00      	nop
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b09c      	sub	sp, #112	; 0x70
 8002478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800247a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	605a      	str	r2, [r3, #4]
 8002484:	609a      	str	r2, [r3, #8]
 8002486:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002488:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002494:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	605a      	str	r2, [r3, #4]
 800249e:	609a      	str	r2, [r3, #8]
 80024a0:	60da      	str	r2, [r3, #12]
 80024a2:	611a      	str	r2, [r3, #16]
 80024a4:	615a      	str	r2, [r3, #20]
 80024a6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80024a8:	1d3b      	adds	r3, r7, #4
 80024aa:	2234      	movs	r2, #52	; 0x34
 80024ac:	2100      	movs	r1, #0
 80024ae:	4618      	mov	r0, r3
 80024b0:	f007 fd8e 	bl	8009fd0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80024b4:	4b4c      	ldr	r3, [pc, #304]	; (80025e8 <MX_TIM1_Init+0x174>)
 80024b6:	4a4d      	ldr	r2, [pc, #308]	; (80025ec <MX_TIM1_Init+0x178>)
 80024b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80024ba:	4b4b      	ldr	r3, [pc, #300]	; (80025e8 <MX_TIM1_Init+0x174>)
 80024bc:	2200      	movs	r2, #0
 80024be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80024c0:	4b49      	ldr	r3, [pc, #292]	; (80025e8 <MX_TIM1_Init+0x174>)
 80024c2:	2220      	movs	r2, #32
 80024c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5311;
 80024c6:	4b48      	ldr	r3, [pc, #288]	; (80025e8 <MX_TIM1_Init+0x174>)
 80024c8:	f241 42bf 	movw	r2, #5311	; 0x14bf
 80024cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024ce:	4b46      	ldr	r3, [pc, #280]	; (80025e8 <MX_TIM1_Init+0x174>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80024d4:	4b44      	ldr	r3, [pc, #272]	; (80025e8 <MX_TIM1_Init+0x174>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024da:	4b43      	ldr	r3, [pc, #268]	; (80025e8 <MX_TIM1_Init+0x174>)
 80024dc:	2200      	movs	r2, #0
 80024de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80024e0:	4841      	ldr	r0, [pc, #260]	; (80025e8 <MX_TIM1_Init+0x174>)
 80024e2:	f003 fe0d 	bl	8006100 <HAL_TIM_Base_Init>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80024ec:	f7ff faae 	bl	8001a4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024f4:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80024f6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80024fa:	4619      	mov	r1, r3
 80024fc:	483a      	ldr	r0, [pc, #232]	; (80025e8 <MX_TIM1_Init+0x174>)
 80024fe:	f004 fc7b 	bl	8006df8 <HAL_TIM_ConfigClockSource>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002508:	f7ff faa0 	bl	8001a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800250c:	4836      	ldr	r0, [pc, #216]	; (80025e8 <MX_TIM1_Init+0x174>)
 800250e:	f003 ff37 	bl	8006380 <HAL_TIM_PWM_Init>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002518:	f7ff fa98 	bl	8001a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800251c:	2320      	movs	r3, #32
 800251e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002520:	2300      	movs	r3, #0
 8002522:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002528:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800252c:	4619      	mov	r1, r3
 800252e:	482e      	ldr	r0, [pc, #184]	; (80025e8 <MX_TIM1_Init+0x174>)
 8002530:	f005 faf6 	bl	8007b20 <HAL_TIMEx_MasterConfigSynchronization>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800253a:	f7ff fa87 	bl	8001a4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800253e:	2360      	movs	r3, #96	; 0x60
 8002540:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 2655;
 8002542:	f640 235f 	movw	r3, #2655	; 0xa5f
 8002546:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002548:	2300      	movs	r3, #0
 800254a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800254c:	2300      	movs	r3, #0
 800254e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002550:	2300      	movs	r3, #0
 8002552:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002554:	2300      	movs	r3, #0
 8002556:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002558:	2300      	movs	r3, #0
 800255a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800255c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002560:	2200      	movs	r2, #0
 8002562:	4619      	mov	r1, r3
 8002564:	4820      	ldr	r0, [pc, #128]	; (80025e8 <MX_TIM1_Init+0x174>)
 8002566:	f004 fb33 	bl	8006bd0 <HAL_TIM_PWM_ConfigChannel>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8002570:	f7ff fa6c 	bl	8001a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002574:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002578:	2204      	movs	r2, #4
 800257a:	4619      	mov	r1, r3
 800257c:	481a      	ldr	r0, [pc, #104]	; (80025e8 <MX_TIM1_Init+0x174>)
 800257e:	f004 fb27 	bl	8006bd0 <HAL_TIM_PWM_ConfigChannel>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8002588:	f7ff fa60 	bl	8001a4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800258c:	2300      	movs	r3, #0
 800258e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002590:	2300      	movs	r3, #0
 8002592:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002594:	2300      	movs	r3, #0
 8002596:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 205;
 8002598:	23cd      	movs	r3, #205	; 0xcd
 800259a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800259c:	2300      	movs	r3, #0
 800259e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80025a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025a4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80025a6:	2300      	movs	r3, #0
 80025a8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80025aa:	2300      	movs	r3, #0
 80025ac:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80025ae:	2300      	movs	r3, #0
 80025b0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80025b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80025b8:	2300      	movs	r3, #0
 80025ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80025bc:	2300      	movs	r3, #0
 80025be:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80025c0:	2300      	movs	r3, #0
 80025c2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80025c4:	1d3b      	adds	r3, r7, #4
 80025c6:	4619      	mov	r1, r3
 80025c8:	4807      	ldr	r0, [pc, #28]	; (80025e8 <MX_TIM1_Init+0x174>)
 80025ca:	f005 fb3f 	bl	8007c4c <HAL_TIMEx_ConfigBreakDeadTime>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 80025d4:	f7ff fa3a 	bl	8001a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80025d8:	4803      	ldr	r0, [pc, #12]	; (80025e8 <MX_TIM1_Init+0x174>)
 80025da:	f000 f98b 	bl	80028f4 <HAL_TIM_MspPostInit>

}
 80025de:	bf00      	nop
 80025e0:	3770      	adds	r7, #112	; 0x70
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000498 	.word	0x20000498
 80025ec:	40012c00 	.word	0x40012c00

080025f0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b088      	sub	sp, #32
 80025f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025f6:	f107 0310 	add.w	r3, r7, #16
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	605a      	str	r2, [r3, #4]
 8002600:	609a      	str	r2, [r3, #8]
 8002602:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002604:	1d3b      	adds	r3, r7, #4
 8002606:	2200      	movs	r2, #0
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	605a      	str	r2, [r3, #4]
 800260c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800260e:	4b1e      	ldr	r3, [pc, #120]	; (8002688 <MX_TIM2_Init+0x98>)
 8002610:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002614:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002616:	4b1c      	ldr	r3, [pc, #112]	; (8002688 <MX_TIM2_Init+0x98>)
 8002618:	2200      	movs	r2, #0
 800261a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800261c:	4b1a      	ldr	r3, [pc, #104]	; (8002688 <MX_TIM2_Init+0x98>)
 800261e:	2200      	movs	r2, #0
 8002620:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 531;
 8002622:	4b19      	ldr	r3, [pc, #100]	; (8002688 <MX_TIM2_Init+0x98>)
 8002624:	f240 2213 	movw	r2, #531	; 0x213
 8002628:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800262a:	4b17      	ldr	r3, [pc, #92]	; (8002688 <MX_TIM2_Init+0x98>)
 800262c:	2200      	movs	r2, #0
 800262e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002630:	4b15      	ldr	r3, [pc, #84]	; (8002688 <MX_TIM2_Init+0x98>)
 8002632:	2200      	movs	r2, #0
 8002634:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002636:	4814      	ldr	r0, [pc, #80]	; (8002688 <MX_TIM2_Init+0x98>)
 8002638:	f003 fd62 	bl	8006100 <HAL_TIM_Base_Init>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002642:	f7ff fa03 	bl	8001a4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800264a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800264c:	f107 0310 	add.w	r3, r7, #16
 8002650:	4619      	mov	r1, r3
 8002652:	480d      	ldr	r0, [pc, #52]	; (8002688 <MX_TIM2_Init+0x98>)
 8002654:	f004 fbd0 	bl	8006df8 <HAL_TIM_ConfigClockSource>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800265e:	f7ff f9f5 	bl	8001a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002662:	2320      	movs	r3, #32
 8002664:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002666:	2380      	movs	r3, #128	; 0x80
 8002668:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800266a:	1d3b      	adds	r3, r7, #4
 800266c:	4619      	mov	r1, r3
 800266e:	4806      	ldr	r0, [pc, #24]	; (8002688 <MX_TIM2_Init+0x98>)
 8002670:	f005 fa56 	bl	8007b20 <HAL_TIMEx_MasterConfigSynchronization>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800267a:	f7ff f9e7 	bl	8001a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800267e:	bf00      	nop
 8002680:	3720      	adds	r7, #32
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	200004e4 	.word	0x200004e4

0800268c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b08c      	sub	sp, #48	; 0x30
 8002690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002692:	f107 030c 	add.w	r3, r7, #12
 8002696:	2224      	movs	r2, #36	; 0x24
 8002698:	2100      	movs	r1, #0
 800269a:	4618      	mov	r0, r3
 800269c:	f007 fc98 	bl	8009fd0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026a0:	463b      	mov	r3, r7
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	605a      	str	r2, [r3, #4]
 80026a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80026aa:	4b21      	ldr	r3, [pc, #132]	; (8002730 <MX_TIM3_Init+0xa4>)
 80026ac:	4a21      	ldr	r2, [pc, #132]	; (8002734 <MX_TIM3_Init+0xa8>)
 80026ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80026b0:	4b1f      	ldr	r3, [pc, #124]	; (8002730 <MX_TIM3_Init+0xa4>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026b6:	4b1e      	ldr	r3, [pc, #120]	; (8002730 <MX_TIM3_Init+0xa4>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80026bc:	4b1c      	ldr	r3, [pc, #112]	; (8002730 <MX_TIM3_Init+0xa4>)
 80026be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026c4:	4b1a      	ldr	r3, [pc, #104]	; (8002730 <MX_TIM3_Init+0xa4>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026ca:	4b19      	ldr	r3, [pc, #100]	; (8002730 <MX_TIM3_Init+0xa4>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80026d0:	2303      	movs	r3, #3
 80026d2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80026d4:	2300      	movs	r3, #0
 80026d6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80026d8:	2301      	movs	r3, #1
 80026da:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80026dc:	2300      	movs	r3, #0
 80026de:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80026e0:	2300      	movs	r3, #0
 80026e2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80026e4:	2300      	movs	r3, #0
 80026e6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80026e8:	2301      	movs	r3, #1
 80026ea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80026ec:	2300      	movs	r3, #0
 80026ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80026f0:	2300      	movs	r3, #0
 80026f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80026f4:	f107 030c 	add.w	r3, r7, #12
 80026f8:	4619      	mov	r1, r3
 80026fa:	480d      	ldr	r0, [pc, #52]	; (8002730 <MX_TIM3_Init+0xa4>)
 80026fc:	f003 ffb4 	bl	8006668 <HAL_TIM_Encoder_Init>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002706:	f7ff f9a1 	bl	8001a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800270a:	2300      	movs	r3, #0
 800270c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800270e:	2300      	movs	r3, #0
 8002710:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002712:	463b      	mov	r3, r7
 8002714:	4619      	mov	r1, r3
 8002716:	4806      	ldr	r0, [pc, #24]	; (8002730 <MX_TIM3_Init+0xa4>)
 8002718:	f005 fa02 	bl	8007b20 <HAL_TIMEx_MasterConfigSynchronization>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002722:	f7ff f993 	bl	8001a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002726:	bf00      	nop
 8002728:	3730      	adds	r7, #48	; 0x30
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	20000530 	.word	0x20000530
 8002734:	40000400 	.word	0x40000400

08002738 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b088      	sub	sp, #32
 800273c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800273e:	f107 0310 	add.w	r3, r7, #16
 8002742:	2200      	movs	r2, #0
 8002744:	601a      	str	r2, [r3, #0]
 8002746:	605a      	str	r2, [r3, #4]
 8002748:	609a      	str	r2, [r3, #8]
 800274a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800274c:	1d3b      	adds	r3, r7, #4
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	605a      	str	r2, [r3, #4]
 8002754:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002756:	4b1d      	ldr	r3, [pc, #116]	; (80027cc <MX_TIM5_Init+0x94>)
 8002758:	4a1d      	ldr	r2, [pc, #116]	; (80027d0 <MX_TIM5_Init+0x98>)
 800275a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800275c:	4b1b      	ldr	r3, [pc, #108]	; (80027cc <MX_TIM5_Init+0x94>)
 800275e:	2200      	movs	r2, #0
 8002760:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002762:	4b1a      	ldr	r3, [pc, #104]	; (80027cc <MX_TIM5_Init+0x94>)
 8002764:	2200      	movs	r2, #0
 8002766:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1.6999999E7;
 8002768:	4b18      	ldr	r3, [pc, #96]	; (80027cc <MX_TIM5_Init+0x94>)
 800276a:	4a1a      	ldr	r2, [pc, #104]	; (80027d4 <MX_TIM5_Init+0x9c>)
 800276c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800276e:	4b17      	ldr	r3, [pc, #92]	; (80027cc <MX_TIM5_Init+0x94>)
 8002770:	2200      	movs	r2, #0
 8002772:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002774:	4b15      	ldr	r3, [pc, #84]	; (80027cc <MX_TIM5_Init+0x94>)
 8002776:	2200      	movs	r2, #0
 8002778:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800277a:	4814      	ldr	r0, [pc, #80]	; (80027cc <MX_TIM5_Init+0x94>)
 800277c:	f003 fcc0 	bl	8006100 <HAL_TIM_Base_Init>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002786:	f7ff f961 	bl	8001a4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800278a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800278e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002790:	f107 0310 	add.w	r3, r7, #16
 8002794:	4619      	mov	r1, r3
 8002796:	480d      	ldr	r0, [pc, #52]	; (80027cc <MX_TIM5_Init+0x94>)
 8002798:	f004 fb2e 	bl	8006df8 <HAL_TIM_ConfigClockSource>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80027a2:	f7ff f953 	bl	8001a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027a6:	2300      	movs	r3, #0
 80027a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027aa:	2300      	movs	r3, #0
 80027ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80027ae:	1d3b      	adds	r3, r7, #4
 80027b0:	4619      	mov	r1, r3
 80027b2:	4806      	ldr	r0, [pc, #24]	; (80027cc <MX_TIM5_Init+0x94>)
 80027b4:	f005 f9b4 	bl	8007b20 <HAL_TIMEx_MasterConfigSynchronization>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80027be:	f7ff f945 	bl	8001a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80027c2:	bf00      	nop
 80027c4:	3720      	adds	r7, #32
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	2000057c 	.word	0x2000057c
 80027d0:	40000c00 	.word	0x40000c00
 80027d4:	0103663f 	.word	0x0103663f

080027d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a1f      	ldr	r2, [pc, #124]	; (8002864 <HAL_TIM_Base_MspInit+0x8c>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d10c      	bne.n	8002804 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027ea:	4b1f      	ldr	r3, [pc, #124]	; (8002868 <HAL_TIM_Base_MspInit+0x90>)
 80027ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ee:	4a1e      	ldr	r2, [pc, #120]	; (8002868 <HAL_TIM_Base_MspInit+0x90>)
 80027f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027f4:	6613      	str	r3, [r2, #96]	; 0x60
 80027f6:	4b1c      	ldr	r3, [pc, #112]	; (8002868 <HAL_TIM_Base_MspInit+0x90>)
 80027f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027fe:	617b      	str	r3, [r7, #20]
 8002800:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002802:	e02a      	b.n	800285a <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM2)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800280c:	d10c      	bne.n	8002828 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800280e:	4b16      	ldr	r3, [pc, #88]	; (8002868 <HAL_TIM_Base_MspInit+0x90>)
 8002810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002812:	4a15      	ldr	r2, [pc, #84]	; (8002868 <HAL_TIM_Base_MspInit+0x90>)
 8002814:	f043 0301 	orr.w	r3, r3, #1
 8002818:	6593      	str	r3, [r2, #88]	; 0x58
 800281a:	4b13      	ldr	r3, [pc, #76]	; (8002868 <HAL_TIM_Base_MspInit+0x90>)
 800281c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	613b      	str	r3, [r7, #16]
 8002824:	693b      	ldr	r3, [r7, #16]
}
 8002826:	e018      	b.n	800285a <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM5)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a0f      	ldr	r2, [pc, #60]	; (800286c <HAL_TIM_Base_MspInit+0x94>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d113      	bne.n	800285a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002832:	4b0d      	ldr	r3, [pc, #52]	; (8002868 <HAL_TIM_Base_MspInit+0x90>)
 8002834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002836:	4a0c      	ldr	r2, [pc, #48]	; (8002868 <HAL_TIM_Base_MspInit+0x90>)
 8002838:	f043 0308 	orr.w	r3, r3, #8
 800283c:	6593      	str	r3, [r2, #88]	; 0x58
 800283e:	4b0a      	ldr	r3, [pc, #40]	; (8002868 <HAL_TIM_Base_MspInit+0x90>)
 8002840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002842:	f003 0308 	and.w	r3, r3, #8
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800284a:	2200      	movs	r2, #0
 800284c:	2100      	movs	r1, #0
 800284e:	2032      	movs	r0, #50	; 0x32
 8002850:	f001 fec8 	bl	80045e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002854:	2032      	movs	r0, #50	; 0x32
 8002856:	f001 fedf 	bl	8004618 <HAL_NVIC_EnableIRQ>
}
 800285a:	bf00      	nop
 800285c:	3718      	adds	r7, #24
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40012c00 	.word	0x40012c00
 8002868:	40021000 	.word	0x40021000
 800286c:	40000c00 	.word	0x40000c00

08002870 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b08a      	sub	sp, #40	; 0x28
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002878:	f107 0314 	add.w	r3, r7, #20
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	605a      	str	r2, [r3, #4]
 8002882:	609a      	str	r2, [r3, #8]
 8002884:	60da      	str	r2, [r3, #12]
 8002886:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a17      	ldr	r2, [pc, #92]	; (80028ec <HAL_TIM_Encoder_MspInit+0x7c>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d128      	bne.n	80028e4 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002892:	4b17      	ldr	r3, [pc, #92]	; (80028f0 <HAL_TIM_Encoder_MspInit+0x80>)
 8002894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002896:	4a16      	ldr	r2, [pc, #88]	; (80028f0 <HAL_TIM_Encoder_MspInit+0x80>)
 8002898:	f043 0302 	orr.w	r3, r3, #2
 800289c:	6593      	str	r3, [r2, #88]	; 0x58
 800289e:	4b14      	ldr	r3, [pc, #80]	; (80028f0 <HAL_TIM_Encoder_MspInit+0x80>)
 80028a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	613b      	str	r3, [r7, #16]
 80028a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028aa:	4b11      	ldr	r3, [pc, #68]	; (80028f0 <HAL_TIM_Encoder_MspInit+0x80>)
 80028ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ae:	4a10      	ldr	r2, [pc, #64]	; (80028f0 <HAL_TIM_Encoder_MspInit+0x80>)
 80028b0:	f043 0301 	orr.w	r3, r3, #1
 80028b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028b6:	4b0e      	ldr	r3, [pc, #56]	; (80028f0 <HAL_TIM_Encoder_MspInit+0x80>)
 80028b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028c2:	23c0      	movs	r3, #192	; 0xc0
 80028c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c6:	2302      	movs	r3, #2
 80028c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ca:	2300      	movs	r3, #0
 80028cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ce:	2300      	movs	r3, #0
 80028d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028d2:	2302      	movs	r3, #2
 80028d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028d6:	f107 0314 	add.w	r3, r7, #20
 80028da:	4619      	mov	r1, r3
 80028dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028e0:	f002 f9da 	bl	8004c98 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80028e4:	bf00      	nop
 80028e6:	3728      	adds	r7, #40	; 0x28
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40000400 	.word	0x40000400
 80028f0:	40021000 	.word	0x40021000

080028f4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b088      	sub	sp, #32
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028fc:	f107 030c 	add.w	r3, r7, #12
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	609a      	str	r2, [r3, #8]
 8002908:	60da      	str	r2, [r3, #12]
 800290a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a12      	ldr	r2, [pc, #72]	; (800295c <HAL_TIM_MspPostInit+0x68>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d11d      	bne.n	8002952 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002916:	4b12      	ldr	r3, [pc, #72]	; (8002960 <HAL_TIM_MspPostInit+0x6c>)
 8002918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291a:	4a11      	ldr	r2, [pc, #68]	; (8002960 <HAL_TIM_MspPostInit+0x6c>)
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002922:	4b0f      	ldr	r3, [pc, #60]	; (8002960 <HAL_TIM_MspPostInit+0x6c>)
 8002924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	60bb      	str	r3, [r7, #8]
 800292c:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 800292e:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8002932:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002934:	2302      	movs	r3, #2
 8002936:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002938:	2300      	movs	r3, #0
 800293a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800293c:	2300      	movs	r3, #0
 800293e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002940:	2306      	movs	r3, #6
 8002942:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002944:	f107 030c 	add.w	r3, r7, #12
 8002948:	4619      	mov	r1, r3
 800294a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800294e:	f002 f9a3 	bl	8004c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002952:	bf00      	nop
 8002954:	3720      	adds	r7, #32
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40012c00 	.word	0x40012c00
 8002960:	40021000 	.word	0x40021000

08002964 <HAL_UART_RxCpltCallback>:

/**
  * @brief  Function called at each new character received
  * @retval None
  */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 800296c:	4b05      	ldr	r3, [pc, #20]	; (8002984 <HAL_UART_RxCpltCallback+0x20>)
 800296e:	2201      	movs	r2, #1
 8002970:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8002972:	2201      	movs	r2, #1
 8002974:	4904      	ldr	r1, [pc, #16]	; (8002988 <HAL_UART_RxCpltCallback+0x24>)
 8002976:	4805      	ldr	r0, [pc, #20]	; (800298c <HAL_UART_RxCpltCallback+0x28>)
 8002978:	f005 fb6c 	bl	8008054 <HAL_UART_Receive_IT>
}
 800297c:	bf00      	nop
 800297e:	3708      	adds	r7, #8
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	200005c8 	.word	0x200005c8
 8002988:	200005cc 	.word	0x200005cc
 800298c:	20000614 	.word	0x20000614

08002990 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002994:	4b22      	ldr	r3, [pc, #136]	; (8002a20 <MX_USART2_UART_Init+0x90>)
 8002996:	4a23      	ldr	r2, [pc, #140]	; (8002a24 <MX_USART2_UART_Init+0x94>)
 8002998:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800299a:	4b21      	ldr	r3, [pc, #132]	; (8002a20 <MX_USART2_UART_Init+0x90>)
 800299c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029a2:	4b1f      	ldr	r3, [pc, #124]	; (8002a20 <MX_USART2_UART_Init+0x90>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80029a8:	4b1d      	ldr	r3, [pc, #116]	; (8002a20 <MX_USART2_UART_Init+0x90>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80029ae:	4b1c      	ldr	r3, [pc, #112]	; (8002a20 <MX_USART2_UART_Init+0x90>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80029b4:	4b1a      	ldr	r3, [pc, #104]	; (8002a20 <MX_USART2_UART_Init+0x90>)
 80029b6:	220c      	movs	r2, #12
 80029b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029ba:	4b19      	ldr	r3, [pc, #100]	; (8002a20 <MX_USART2_UART_Init+0x90>)
 80029bc:	2200      	movs	r2, #0
 80029be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029c0:	4b17      	ldr	r3, [pc, #92]	; (8002a20 <MX_USART2_UART_Init+0x90>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029c6:	4b16      	ldr	r3, [pc, #88]	; (8002a20 <MX_USART2_UART_Init+0x90>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80029cc:	4b14      	ldr	r3, [pc, #80]	; (8002a20 <MX_USART2_UART_Init+0x90>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029d2:	4b13      	ldr	r3, [pc, #76]	; (8002a20 <MX_USART2_UART_Init+0x90>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029d8:	4811      	ldr	r0, [pc, #68]	; (8002a20 <MX_USART2_UART_Init+0x90>)
 80029da:	f005 fa54 	bl	8007e86 <HAL_UART_Init>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80029e4:	f7ff f832 	bl	8001a4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029e8:	2100      	movs	r1, #0
 80029ea:	480d      	ldr	r0, [pc, #52]	; (8002a20 <MX_USART2_UART_Init+0x90>)
 80029ec:	f007 f9f7 	bl	8009dde <HAL_UARTEx_SetTxFifoThreshold>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80029f6:	f7ff f829 	bl	8001a4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029fa:	2100      	movs	r1, #0
 80029fc:	4808      	ldr	r0, [pc, #32]	; (8002a20 <MX_USART2_UART_Init+0x90>)
 80029fe:	f007 fa2c 	bl	8009e5a <HAL_UARTEx_SetRxFifoThreshold>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002a08:	f7ff f820 	bl	8001a4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002a0c:	4804      	ldr	r0, [pc, #16]	; (8002a20 <MX_USART2_UART_Init+0x90>)
 8002a0e:	f007 f9ad 	bl	8009d6c <HAL_UARTEx_DisableFifoMode>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002a18:	f7ff f818 	bl	8001a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a1c:	bf00      	nop
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	20000614 	.word	0x20000614
 8002a24:	40004400 	.word	0x40004400

08002a28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b09e      	sub	sp, #120	; 0x78
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a30:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	605a      	str	r2, [r3, #4]
 8002a3a:	609a      	str	r2, [r3, #8]
 8002a3c:	60da      	str	r2, [r3, #12]
 8002a3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a40:	f107 0310 	add.w	r3, r7, #16
 8002a44:	2254      	movs	r2, #84	; 0x54
 8002a46:	2100      	movs	r1, #0
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f007 fac1 	bl	8009fd0 <memset>
  if(uartHandle->Instance==USART2)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a23      	ldr	r2, [pc, #140]	; (8002ae0 <HAL_UART_MspInit+0xb8>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d13e      	bne.n	8002ad6 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002a58:	2302      	movs	r3, #2
 8002a5a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a60:	f107 0310 	add.w	r3, r7, #16
 8002a64:	4618      	mov	r0, r3
 8002a66:	f003 f8fd 	bl	8005c64 <HAL_RCCEx_PeriphCLKConfig>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002a70:	f7fe ffec 	bl	8001a4c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a74:	4b1b      	ldr	r3, [pc, #108]	; (8002ae4 <HAL_UART_MspInit+0xbc>)
 8002a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a78:	4a1a      	ldr	r2, [pc, #104]	; (8002ae4 <HAL_UART_MspInit+0xbc>)
 8002a7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a7e:	6593      	str	r3, [r2, #88]	; 0x58
 8002a80:	4b18      	ldr	r3, [pc, #96]	; (8002ae4 <HAL_UART_MspInit+0xbc>)
 8002a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a8c:	4b15      	ldr	r3, [pc, #84]	; (8002ae4 <HAL_UART_MspInit+0xbc>)
 8002a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a90:	4a14      	ldr	r2, [pc, #80]	; (8002ae4 <HAL_UART_MspInit+0xbc>)
 8002a92:	f043 0301 	orr.w	r3, r3, #1
 8002a96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a98:	4b12      	ldr	r3, [pc, #72]	; (8002ae4 <HAL_UART_MspInit+0xbc>)
 8002a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	60bb      	str	r3, [r7, #8]
 8002aa2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002aa4:	230c      	movs	r3, #12
 8002aa6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aac:	2300      	movs	r3, #0
 8002aae:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ab4:	2307      	movs	r3, #7
 8002ab6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002abc:	4619      	mov	r1, r3
 8002abe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ac2:	f002 f8e9 	bl	8004c98 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	2100      	movs	r1, #0
 8002aca:	2026      	movs	r0, #38	; 0x26
 8002acc:	f001 fd8a 	bl	80045e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002ad0:	2026      	movs	r0, #38	; 0x26
 8002ad2:	f001 fda1 	bl	8004618 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002ad6:	bf00      	nop
 8002ad8:	3778      	adds	r7, #120	; 0x78
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	40004400 	.word	0x40004400
 8002ae4:	40021000 	.word	0x40021000

08002ae8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ae8:	480d      	ldr	r0, [pc, #52]	; (8002b20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002aea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002aec:	480d      	ldr	r0, [pc, #52]	; (8002b24 <LoopForever+0x6>)
  ldr r1, =_edata
 8002aee:	490e      	ldr	r1, [pc, #56]	; (8002b28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002af0:	4a0e      	ldr	r2, [pc, #56]	; (8002b2c <LoopForever+0xe>)
  movs r3, #0
 8002af2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002af4:	e002      	b.n	8002afc <LoopCopyDataInit>

08002af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002afa:	3304      	adds	r3, #4

08002afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b00:	d3f9      	bcc.n	8002af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b02:	4a0b      	ldr	r2, [pc, #44]	; (8002b30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b04:	4c0b      	ldr	r4, [pc, #44]	; (8002b34 <LoopForever+0x16>)
  movs r3, #0
 8002b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b08:	e001      	b.n	8002b0e <LoopFillZerobss>

08002b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b0c:	3204      	adds	r2, #4

08002b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b10:	d3fb      	bcc.n	8002b0a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002b12:	f7ff fc9d 	bl	8002450 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b16:	f007 fa37 	bl	8009f88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b1a:	f7fe fbf9 	bl	8001310 <main>

08002b1e <LoopForever>:

LoopForever:
    b LoopForever
 8002b1e:	e7fe      	b.n	8002b1e <LoopForever>
  ldr   r0, =_estack
 8002b20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b28:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002b2c:	0800d8a4 	.word	0x0800d8a4
  ldr r2, =_sbss
 8002b30:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002b34:	200006b8 	.word	0x200006b8

08002b38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b38:	e7fe      	b.n	8002b38 <ADC1_2_IRQHandler>

08002b3a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b082      	sub	sp, #8
 8002b3e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002b40:	2300      	movs	r3, #0
 8002b42:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b44:	2003      	movs	r0, #3
 8002b46:	f001 fd42 	bl	80045ce <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b4a:	200f      	movs	r0, #15
 8002b4c:	f7ff faee 	bl	800212c <HAL_InitTick>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d002      	beq.n	8002b5c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	71fb      	strb	r3, [r7, #7]
 8002b5a:	e001      	b.n	8002b60 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002b5c:	f7ff fac2 	bl	80020e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002b60:	79fb      	ldrb	r3, [r7, #7]

}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
	...

08002b6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b70:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <HAL_IncTick+0x1c>)
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <HAL_IncTick+0x20>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4413      	add	r3, r2
 8002b7a:	4a03      	ldr	r2, [pc, #12]	; (8002b88 <HAL_IncTick+0x1c>)
 8002b7c:	6013      	str	r3, [r2, #0]
}
 8002b7e:	bf00      	nop
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	200006a4 	.word	0x200006a4
 8002b8c:	20000008 	.word	0x20000008

08002b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  return uwTick;
 8002b94:	4b03      	ldr	r3, [pc, #12]	; (8002ba4 <HAL_GetTick+0x14>)
 8002b96:	681b      	ldr	r3, [r3, #0]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	200006a4 	.word	0x200006a4

08002ba8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bb0:	f7ff ffee 	bl	8002b90 <HAL_GetTick>
 8002bb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc0:	d004      	beq.n	8002bcc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bc2:	4b09      	ldr	r3, [pc, #36]	; (8002be8 <HAL_Delay+0x40>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	4413      	add	r3, r2
 8002bca:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bcc:	bf00      	nop
 8002bce:	f7ff ffdf 	bl	8002b90 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d8f7      	bhi.n	8002bce <HAL_Delay+0x26>
  {
  }
}
 8002bde:	bf00      	nop
 8002be0:	bf00      	nop
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	20000008 	.word	0x20000008

08002bec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	431a      	orrs	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	609a      	str	r2, [r3, #8]
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr

08002c12 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002c12:	b480      	push	{r7}
 8002c14:	b083      	sub	sp, #12
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
 8002c1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	431a      	orrs	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	609a      	str	r2, [r3, #8]
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b087      	sub	sp, #28
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
 8002c60:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	3360      	adds	r3, #96	; 0x60
 8002c66:	461a      	mov	r2, r3
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	4b08      	ldr	r3, [pc, #32]	; (8002c98 <LL_ADC_SetOffset+0x44>)
 8002c76:	4013      	ands	r3, r2
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	4313      	orrs	r3, r2
 8002c84:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002c8c:	bf00      	nop
 8002c8e:	371c      	adds	r7, #28
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	03fff000 	.word	0x03fff000

08002c9c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	3360      	adds	r3, #96	; 0x60
 8002caa:	461a      	mov	r2, r3
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4413      	add	r3, r2
 8002cb2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b087      	sub	sp, #28
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	3360      	adds	r3, #96	; 0x60
 8002cd8:	461a      	mov	r2, r3
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4413      	add	r3, r2
 8002ce0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	431a      	orrs	r2, r3
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002cf2:	bf00      	nop
 8002cf4:	371c      	adds	r7, #28
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b087      	sub	sp, #28
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	60f8      	str	r0, [r7, #12]
 8002d06:	60b9      	str	r1, [r7, #8]
 8002d08:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	3360      	adds	r3, #96	; 0x60
 8002d0e:	461a      	mov	r2, r3
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4413      	add	r3, r2
 8002d16:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	431a      	orrs	r2, r3
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002d28:	bf00      	nop
 8002d2a:	371c      	adds	r7, #28
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b087      	sub	sp, #28
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	3360      	adds	r3, #96	; 0x60
 8002d44:	461a      	mov	r2, r3
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002d5e:	bf00      	nop
 8002d60:	371c      	adds	r7, #28
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
 8002d72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	615a      	str	r2, [r3, #20]
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002da4:	2301      	movs	r3, #1
 8002da6:	e000      	b.n	8002daa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr

08002db6 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b087      	sub	sp, #28
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	60f8      	str	r0, [r7, #12]
 8002dbe:	60b9      	str	r1, [r7, #8]
 8002dc0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	3330      	adds	r3, #48	; 0x30
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	0a1b      	lsrs	r3, r3, #8
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	f003 030c 	and.w	r3, r3, #12
 8002dd2:	4413      	add	r3, r2
 8002dd4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	f003 031f 	and.w	r3, r3, #31
 8002de0:	211f      	movs	r1, #31
 8002de2:	fa01 f303 	lsl.w	r3, r1, r3
 8002de6:	43db      	mvns	r3, r3
 8002de8:	401a      	ands	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	0e9b      	lsrs	r3, r3, #26
 8002dee:	f003 011f 	and.w	r1, r3, #31
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	f003 031f 	and.w	r3, r3, #31
 8002df8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002e02:	bf00      	nop
 8002e04:	371c      	adds	r7, #28
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b087      	sub	sp, #28
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	60f8      	str	r0, [r7, #12]
 8002e16:	60b9      	str	r1, [r7, #8]
 8002e18:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	3314      	adds	r3, #20
 8002e1e:	461a      	mov	r2, r3
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	0e5b      	lsrs	r3, r3, #25
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	f003 0304 	and.w	r3, r3, #4
 8002e2a:	4413      	add	r3, r2
 8002e2c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	0d1b      	lsrs	r3, r3, #20
 8002e36:	f003 031f 	and.w	r3, r3, #31
 8002e3a:	2107      	movs	r1, #7
 8002e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e40:	43db      	mvns	r3, r3
 8002e42:	401a      	ands	r2, r3
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	0d1b      	lsrs	r3, r3, #20
 8002e48:	f003 031f 	and.w	r3, r3, #31
 8002e4c:	6879      	ldr	r1, [r7, #4]
 8002e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e52:	431a      	orrs	r2, r3
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002e58:	bf00      	nop
 8002e5a:	371c      	adds	r7, #28
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a0f      	ldr	r2, [pc, #60]	; (8002eb0 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d10a      	bne.n	8002e8e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e84:	431a      	orrs	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002e8c:	e00a      	b.n	8002ea4 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e9a:	43db      	mvns	r3, r3
 8002e9c:	401a      	ands	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002ea4:	bf00      	nop
 8002ea6:	3714      	adds	r7, #20
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	407f0000 	.word	0x407f0000

08002eb4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f003 031f 	and.w	r3, r3, #31
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002ee0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6093      	str	r3, [r2, #8]
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f08:	d101      	bne.n	8002f0e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e000      	b.n	8002f10 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002f2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f30:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f58:	d101      	bne.n	8002f5e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e000      	b.n	8002f60 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f80:	f043 0201 	orr.w	r2, r3, #1
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002fa4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002fa8:	f043 0202 	orr.w	r2, r3, #2
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d101      	bne.n	8002fd4 <LL_ADC_IsEnabled+0x18>
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e000      	b.n	8002fd6 <LL_ADC_IsEnabled+0x1a>
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b083      	sub	sp, #12
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d101      	bne.n	8002ffa <LL_ADC_IsDisableOngoing+0x18>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e000      	b.n	8002ffc <LL_ADC_IsDisableOngoing+0x1a>
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003018:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800301c:	f043 0204 	orr.w	r2, r3, #4
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 0304 	and.w	r3, r3, #4
 8003040:	2b04      	cmp	r3, #4
 8003042:	d101      	bne.n	8003048 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003044:	2301      	movs	r3, #1
 8003046:	e000      	b.n	800304a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003056:	b480      	push	{r7}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 0308 	and.w	r3, r3, #8
 8003066:	2b08      	cmp	r3, #8
 8003068:	d101      	bne.n	800306e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800306a:	2301      	movs	r3, #1
 800306c:	e000      	b.n	8003070 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800307c:	b590      	push	{r4, r7, lr}
 800307e:	b089      	sub	sp, #36	; 0x24
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003084:	2300      	movs	r3, #0
 8003086:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003088:	2300      	movs	r3, #0
 800308a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e1af      	b.n	80033f6 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d109      	bne.n	80030b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f7fe f803 	bl	80010b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff ff19 	bl	8002ef4 <LL_ADC_IsDeepPowerDownEnabled>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d004      	beq.n	80030d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff feff 	bl	8002ed0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff ff34 	bl	8002f44 <LL_ADC_IsInternalRegulatorEnabled>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d115      	bne.n	800310e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7ff ff18 	bl	8002f1c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030ec:	4b9f      	ldr	r3, [pc, #636]	; (800336c <HAL_ADC_Init+0x2f0>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	099b      	lsrs	r3, r3, #6
 80030f2:	4a9f      	ldr	r2, [pc, #636]	; (8003370 <HAL_ADC_Init+0x2f4>)
 80030f4:	fba2 2303 	umull	r2, r3, r2, r3
 80030f8:	099b      	lsrs	r3, r3, #6
 80030fa:	3301      	adds	r3, #1
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003100:	e002      	b.n	8003108 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	3b01      	subs	r3, #1
 8003106:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1f9      	bne.n	8003102 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff ff16 	bl	8002f44 <LL_ADC_IsInternalRegulatorEnabled>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10d      	bne.n	800313a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003122:	f043 0210 	orr.w	r2, r3, #16
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800312e:	f043 0201 	orr.w	r2, r3, #1
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4618      	mov	r0, r3
 8003140:	f7ff ff76 	bl	8003030 <LL_ADC_REG_IsConversionOngoing>
 8003144:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800314a:	f003 0310 	and.w	r3, r3, #16
 800314e:	2b00      	cmp	r3, #0
 8003150:	f040 8148 	bne.w	80033e4 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	2b00      	cmp	r3, #0
 8003158:	f040 8144 	bne.w	80033e4 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003160:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003164:	f043 0202 	orr.w	r2, r3, #2
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff ff23 	bl	8002fbc <LL_ADC_IsEnabled>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d141      	bne.n	8003200 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003184:	d004      	beq.n	8003190 <HAL_ADC_Init+0x114>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a7a      	ldr	r2, [pc, #488]	; (8003374 <HAL_ADC_Init+0x2f8>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d10f      	bne.n	80031b0 <HAL_ADC_Init+0x134>
 8003190:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003194:	f7ff ff12 	bl	8002fbc <LL_ADC_IsEnabled>
 8003198:	4604      	mov	r4, r0
 800319a:	4876      	ldr	r0, [pc, #472]	; (8003374 <HAL_ADC_Init+0x2f8>)
 800319c:	f7ff ff0e 	bl	8002fbc <LL_ADC_IsEnabled>
 80031a0:	4603      	mov	r3, r0
 80031a2:	4323      	orrs	r3, r4
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	bf0c      	ite	eq
 80031a8:	2301      	moveq	r3, #1
 80031aa:	2300      	movne	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	e012      	b.n	80031d6 <HAL_ADC_Init+0x15a>
 80031b0:	4871      	ldr	r0, [pc, #452]	; (8003378 <HAL_ADC_Init+0x2fc>)
 80031b2:	f7ff ff03 	bl	8002fbc <LL_ADC_IsEnabled>
 80031b6:	4604      	mov	r4, r0
 80031b8:	4870      	ldr	r0, [pc, #448]	; (800337c <HAL_ADC_Init+0x300>)
 80031ba:	f7ff feff 	bl	8002fbc <LL_ADC_IsEnabled>
 80031be:	4603      	mov	r3, r0
 80031c0:	431c      	orrs	r4, r3
 80031c2:	486f      	ldr	r0, [pc, #444]	; (8003380 <HAL_ADC_Init+0x304>)
 80031c4:	f7ff fefa 	bl	8002fbc <LL_ADC_IsEnabled>
 80031c8:	4603      	mov	r3, r0
 80031ca:	4323      	orrs	r3, r4
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	bf0c      	ite	eq
 80031d0:	2301      	moveq	r3, #1
 80031d2:	2300      	movne	r3, #0
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d012      	beq.n	8003200 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031e2:	d004      	beq.n	80031ee <HAL_ADC_Init+0x172>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a62      	ldr	r2, [pc, #392]	; (8003374 <HAL_ADC_Init+0x2f8>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d101      	bne.n	80031f2 <HAL_ADC_Init+0x176>
 80031ee:	4a65      	ldr	r2, [pc, #404]	; (8003384 <HAL_ADC_Init+0x308>)
 80031f0:	e000      	b.n	80031f4 <HAL_ADC_Init+0x178>
 80031f2:	4a65      	ldr	r2, [pc, #404]	; (8003388 <HAL_ADC_Init+0x30c>)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	4619      	mov	r1, r3
 80031fa:	4610      	mov	r0, r2
 80031fc:	f7ff fcf6 	bl	8002bec <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	7f5b      	ldrb	r3, [r3, #29]
 8003204:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800320a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003210:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003216:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800321e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003220:	4313      	orrs	r3, r2
 8003222:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800322a:	2b01      	cmp	r3, #1
 800322c:	d106      	bne.n	800323c <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003232:	3b01      	subs	r3, #1
 8003234:	045b      	lsls	r3, r3, #17
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4313      	orrs	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003240:	2b00      	cmp	r3, #0
 8003242:	d009      	beq.n	8003258 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003248:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003250:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	4313      	orrs	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68da      	ldr	r2, [r3, #12]
 800325e:	4b4b      	ldr	r3, [pc, #300]	; (800338c <HAL_ADC_Init+0x310>)
 8003260:	4013      	ands	r3, r2
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	6812      	ldr	r2, [r2, #0]
 8003266:	69b9      	ldr	r1, [r7, #24]
 8003268:	430b      	orrs	r3, r1
 800326a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff fed2 	bl	8003030 <LL_ADC_REG_IsConversionOngoing>
 800328c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff fedf 	bl	8003056 <LL_ADC_INJ_IsConversionOngoing>
 8003298:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d17f      	bne.n	80033a0 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d17c      	bne.n	80033a0 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80032aa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032b2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80032b4:	4313      	orrs	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032c2:	f023 0302 	bic.w	r3, r3, #2
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	6812      	ldr	r2, [r2, #0]
 80032ca:	69b9      	ldr	r1, [r7, #24]
 80032cc:	430b      	orrs	r3, r1
 80032ce:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d017      	beq.n	8003308 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	691a      	ldr	r2, [r3, #16]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80032e6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80032f0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80032f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6911      	ldr	r1, [r2, #16]
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	6812      	ldr	r2, [r2, #0]
 8003300:	430b      	orrs	r3, r1
 8003302:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003306:	e013      	b.n	8003330 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	691a      	ldr	r2, [r3, #16]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003316:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6812      	ldr	r2, [r2, #0]
 8003324:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003328:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800332c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003336:	2b01      	cmp	r3, #1
 8003338:	d12a      	bne.n	8003390 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003344:	f023 0304 	bic.w	r3, r3, #4
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003350:	4311      	orrs	r1, r2
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003356:	4311      	orrs	r1, r2
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800335c:	430a      	orrs	r2, r1
 800335e:	431a      	orrs	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f042 0201 	orr.w	r2, r2, #1
 8003368:	611a      	str	r2, [r3, #16]
 800336a:	e019      	b.n	80033a0 <HAL_ADC_Init+0x324>
 800336c:	20000000 	.word	0x20000000
 8003370:	053e2d63 	.word	0x053e2d63
 8003374:	50000100 	.word	0x50000100
 8003378:	50000400 	.word	0x50000400
 800337c:	50000500 	.word	0x50000500
 8003380:	50000600 	.word	0x50000600
 8003384:	50000300 	.word	0x50000300
 8003388:	50000700 	.word	0x50000700
 800338c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	691a      	ldr	r2, [r3, #16]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0201 	bic.w	r2, r2, #1
 800339e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d10c      	bne.n	80033c2 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ae:	f023 010f 	bic.w	r1, r3, #15
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	1e5a      	subs	r2, r3, #1
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	430a      	orrs	r2, r1
 80033be:	631a      	str	r2, [r3, #48]	; 0x30
 80033c0:	e007      	b.n	80033d2 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 020f 	bic.w	r2, r2, #15
 80033d0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d6:	f023 0303 	bic.w	r3, r3, #3
 80033da:	f043 0201 	orr.w	r2, r3, #1
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	65da      	str	r2, [r3, #92]	; 0x5c
 80033e2:	e007      	b.n	80033f4 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e8:	f043 0210 	orr.w	r2, r3, #16
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80033f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3724      	adds	r7, #36	; 0x24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd90      	pop	{r4, r7, pc}
 80033fe:	bf00      	nop

08003400 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003414:	d004      	beq.n	8003420 <HAL_ADC_Start_DMA+0x20>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a5a      	ldr	r2, [pc, #360]	; (8003584 <HAL_ADC_Start_DMA+0x184>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d101      	bne.n	8003424 <HAL_ADC_Start_DMA+0x24>
 8003420:	4b59      	ldr	r3, [pc, #356]	; (8003588 <HAL_ADC_Start_DMA+0x188>)
 8003422:	e000      	b.n	8003426 <HAL_ADC_Start_DMA+0x26>
 8003424:	4b59      	ldr	r3, [pc, #356]	; (800358c <HAL_ADC_Start_DMA+0x18c>)
 8003426:	4618      	mov	r0, r3
 8003428:	f7ff fd44 	bl	8002eb4 <LL_ADC_GetMultimode>
 800342c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4618      	mov	r0, r3
 8003434:	f7ff fdfc 	bl	8003030 <LL_ADC_REG_IsConversionOngoing>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	f040 809b 	bne.w	8003576 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003446:	2b01      	cmp	r3, #1
 8003448:	d101      	bne.n	800344e <HAL_ADC_Start_DMA+0x4e>
 800344a:	2302      	movs	r3, #2
 800344c:	e096      	b.n	800357c <HAL_ADC_Start_DMA+0x17c>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a4d      	ldr	r2, [pc, #308]	; (8003590 <HAL_ADC_Start_DMA+0x190>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d008      	beq.n	8003472 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d005      	beq.n	8003472 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	2b05      	cmp	r3, #5
 800346a:	d002      	beq.n	8003472 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	2b09      	cmp	r3, #9
 8003470:	d17a      	bne.n	8003568 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 fcec 	bl	8003e50 <ADC_Enable>
 8003478:	4603      	mov	r3, r0
 800347a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800347c:	7dfb      	ldrb	r3, [r7, #23]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d16d      	bne.n	800355e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003486:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800348a:	f023 0301 	bic.w	r3, r3, #1
 800348e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a3a      	ldr	r2, [pc, #232]	; (8003584 <HAL_ADC_Start_DMA+0x184>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d009      	beq.n	80034b4 <HAL_ADC_Start_DMA+0xb4>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a3b      	ldr	r2, [pc, #236]	; (8003594 <HAL_ADC_Start_DMA+0x194>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d002      	beq.n	80034b0 <HAL_ADC_Start_DMA+0xb0>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	e003      	b.n	80034b8 <HAL_ADC_Start_DMA+0xb8>
 80034b0:	4b39      	ldr	r3, [pc, #228]	; (8003598 <HAL_ADC_Start_DMA+0x198>)
 80034b2:	e001      	b.n	80034b8 <HAL_ADC_Start_DMA+0xb8>
 80034b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	6812      	ldr	r2, [r2, #0]
 80034bc:	4293      	cmp	r3, r2
 80034be:	d002      	beq.n	80034c6 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d105      	bne.n	80034d2 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d006      	beq.n	80034ec <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034e2:	f023 0206 	bic.w	r2, r3, #6
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	661a      	str	r2, [r3, #96]	; 0x60
 80034ea:	e002      	b.n	80034f2 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f6:	4a29      	ldr	r2, [pc, #164]	; (800359c <HAL_ADC_Start_DMA+0x19c>)
 80034f8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034fe:	4a28      	ldr	r2, [pc, #160]	; (80035a0 <HAL_ADC_Start_DMA+0x1a0>)
 8003500:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003506:	4a27      	ldr	r2, [pc, #156]	; (80035a4 <HAL_ADC_Start_DMA+0x1a4>)
 8003508:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	221c      	movs	r2, #28
 8003510:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f042 0210 	orr.w	r2, r2, #16
 8003528:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68da      	ldr	r2, [r3, #12]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f042 0201 	orr.w	r2, r2, #1
 8003538:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	3340      	adds	r3, #64	; 0x40
 8003544:	4619      	mov	r1, r3
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f001 f91b 	bl	8004784 <HAL_DMA_Start_IT>
 800354e:	4603      	mov	r3, r0
 8003550:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff fd56 	bl	8003008 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800355c:	e00d      	b.n	800357a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8003566:	e008      	b.n	800357a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003574:	e001      	b.n	800357a <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003576:	2302      	movs	r3, #2
 8003578:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800357a:	7dfb      	ldrb	r3, [r7, #23]
}
 800357c:	4618      	mov	r0, r3
 800357e:	3718      	adds	r7, #24
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	50000100 	.word	0x50000100
 8003588:	50000300 	.word	0x50000300
 800358c:	50000700 	.word	0x50000700
 8003590:	50000600 	.word	0x50000600
 8003594:	50000500 	.word	0x50000500
 8003598:	50000400 	.word	0x50000400
 800359c:	08003fd3 	.word	0x08003fd3
 80035a0:	080040ab 	.word	0x080040ab
 80035a4:	080040c7 	.word	0x080040c7

080035a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b0b6      	sub	sp, #216	; 0xd8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035da:	2300      	movs	r3, #0
 80035dc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80035e0:	2300      	movs	r3, #0
 80035e2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d102      	bne.n	80035f4 <HAL_ADC_ConfigChannel+0x24>
 80035ee:	2302      	movs	r3, #2
 80035f0:	f000 bc13 	b.w	8003e1a <HAL_ADC_ConfigChannel+0x84a>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4618      	mov	r0, r3
 8003602:	f7ff fd15 	bl	8003030 <LL_ADC_REG_IsConversionOngoing>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	f040 83f3 	bne.w	8003df4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6818      	ldr	r0, [r3, #0]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	6859      	ldr	r1, [r3, #4]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	461a      	mov	r2, r3
 800361c:	f7ff fbcb 	bl	8002db6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4618      	mov	r0, r3
 8003626:	f7ff fd03 	bl	8003030 <LL_ADC_REG_IsConversionOngoing>
 800362a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff fd0f 	bl	8003056 <LL_ADC_INJ_IsConversionOngoing>
 8003638:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800363c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003640:	2b00      	cmp	r3, #0
 8003642:	f040 81d9 	bne.w	80039f8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003646:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800364a:	2b00      	cmp	r3, #0
 800364c:	f040 81d4 	bne.w	80039f8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003658:	d10f      	bne.n	800367a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6818      	ldr	r0, [r3, #0]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2200      	movs	r2, #0
 8003664:	4619      	mov	r1, r3
 8003666:	f7ff fbd2 	bl	8002e0e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003672:	4618      	mov	r0, r3
 8003674:	f7ff fb79 	bl	8002d6a <LL_ADC_SetSamplingTimeCommonConfig>
 8003678:	e00e      	b.n	8003698 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6818      	ldr	r0, [r3, #0]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	6819      	ldr	r1, [r3, #0]
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	461a      	mov	r2, r3
 8003688:	f7ff fbc1 	bl	8002e0e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2100      	movs	r1, #0
 8003692:	4618      	mov	r0, r3
 8003694:	f7ff fb69 	bl	8002d6a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	695a      	ldr	r2, [r3, #20]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	08db      	lsrs	r3, r3, #3
 80036a4:	f003 0303 	and.w	r3, r3, #3
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	fa02 f303 	lsl.w	r3, r2, r3
 80036ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	d022      	beq.n	8003700 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6818      	ldr	r0, [r3, #0]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	6919      	ldr	r1, [r3, #16]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80036ca:	f7ff fac3 	bl	8002c54 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6818      	ldr	r0, [r3, #0]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	6919      	ldr	r1, [r3, #16]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	461a      	mov	r2, r3
 80036dc:	f7ff fb0f 	bl	8002cfe <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6818      	ldr	r0, [r3, #0]
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	6919      	ldr	r1, [r3, #16]
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	7f1b      	ldrb	r3, [r3, #28]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d102      	bne.n	80036f6 <HAL_ADC_ConfigChannel+0x126>
 80036f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036f4:	e000      	b.n	80036f8 <HAL_ADC_ConfigChannel+0x128>
 80036f6:	2300      	movs	r3, #0
 80036f8:	461a      	mov	r2, r3
 80036fa:	f7ff fb1b 	bl	8002d34 <LL_ADC_SetOffsetSaturation>
 80036fe:	e17b      	b.n	80039f8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2100      	movs	r1, #0
 8003706:	4618      	mov	r0, r3
 8003708:	f7ff fac8 	bl	8002c9c <LL_ADC_GetOffsetChannel>
 800370c:	4603      	mov	r3, r0
 800370e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10a      	bne.n	800372c <HAL_ADC_ConfigChannel+0x15c>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2100      	movs	r1, #0
 800371c:	4618      	mov	r0, r3
 800371e:	f7ff fabd 	bl	8002c9c <LL_ADC_GetOffsetChannel>
 8003722:	4603      	mov	r3, r0
 8003724:	0e9b      	lsrs	r3, r3, #26
 8003726:	f003 021f 	and.w	r2, r3, #31
 800372a:	e01e      	b.n	800376a <HAL_ADC_ConfigChannel+0x19a>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2100      	movs	r1, #0
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff fab2 	bl	8002c9c <LL_ADC_GetOffsetChannel>
 8003738:	4603      	mov	r3, r0
 800373a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003742:	fa93 f3a3 	rbit	r3, r3
 8003746:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800374a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800374e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003752:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800375a:	2320      	movs	r3, #32
 800375c:	e004      	b.n	8003768 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800375e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003762:	fab3 f383 	clz	r3, r3
 8003766:	b2db      	uxtb	r3, r3
 8003768:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003772:	2b00      	cmp	r3, #0
 8003774:	d105      	bne.n	8003782 <HAL_ADC_ConfigChannel+0x1b2>
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	0e9b      	lsrs	r3, r3, #26
 800377c:	f003 031f 	and.w	r3, r3, #31
 8003780:	e018      	b.n	80037b4 <HAL_ADC_ConfigChannel+0x1e4>
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800378e:	fa93 f3a3 	rbit	r3, r3
 8003792:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003796:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800379a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800379e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80037a6:	2320      	movs	r3, #32
 80037a8:	e004      	b.n	80037b4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80037aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80037ae:	fab3 f383 	clz	r3, r3
 80037b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d106      	bne.n	80037c6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2200      	movs	r2, #0
 80037be:	2100      	movs	r1, #0
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7ff fa81 	bl	8002cc8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2101      	movs	r1, #1
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7ff fa65 	bl	8002c9c <LL_ADC_GetOffsetChannel>
 80037d2:	4603      	mov	r3, r0
 80037d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10a      	bne.n	80037f2 <HAL_ADC_ConfigChannel+0x222>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2101      	movs	r1, #1
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7ff fa5a 	bl	8002c9c <LL_ADC_GetOffsetChannel>
 80037e8:	4603      	mov	r3, r0
 80037ea:	0e9b      	lsrs	r3, r3, #26
 80037ec:	f003 021f 	and.w	r2, r3, #31
 80037f0:	e01e      	b.n	8003830 <HAL_ADC_ConfigChannel+0x260>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2101      	movs	r1, #1
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7ff fa4f 	bl	8002c9c <LL_ADC_GetOffsetChannel>
 80037fe:	4603      	mov	r3, r0
 8003800:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003804:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003808:	fa93 f3a3 	rbit	r3, r3
 800380c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003810:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003814:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003818:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800381c:	2b00      	cmp	r3, #0
 800381e:	d101      	bne.n	8003824 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003820:	2320      	movs	r3, #32
 8003822:	e004      	b.n	800382e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003824:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003828:	fab3 f383 	clz	r3, r3
 800382c:	b2db      	uxtb	r3, r3
 800382e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003838:	2b00      	cmp	r3, #0
 800383a:	d105      	bne.n	8003848 <HAL_ADC_ConfigChannel+0x278>
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	0e9b      	lsrs	r3, r3, #26
 8003842:	f003 031f 	and.w	r3, r3, #31
 8003846:	e018      	b.n	800387a <HAL_ADC_ConfigChannel+0x2aa>
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003850:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003854:	fa93 f3a3 	rbit	r3, r3
 8003858:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800385c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003860:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003864:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003868:	2b00      	cmp	r3, #0
 800386a:	d101      	bne.n	8003870 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800386c:	2320      	movs	r3, #32
 800386e:	e004      	b.n	800387a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003870:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003874:	fab3 f383 	clz	r3, r3
 8003878:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800387a:	429a      	cmp	r2, r3
 800387c:	d106      	bne.n	800388c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2200      	movs	r2, #0
 8003884:	2101      	movs	r1, #1
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff fa1e 	bl	8002cc8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2102      	movs	r1, #2
 8003892:	4618      	mov	r0, r3
 8003894:	f7ff fa02 	bl	8002c9c <LL_ADC_GetOffsetChannel>
 8003898:	4603      	mov	r3, r0
 800389a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10a      	bne.n	80038b8 <HAL_ADC_ConfigChannel+0x2e8>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2102      	movs	r1, #2
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff f9f7 	bl	8002c9c <LL_ADC_GetOffsetChannel>
 80038ae:	4603      	mov	r3, r0
 80038b0:	0e9b      	lsrs	r3, r3, #26
 80038b2:	f003 021f 	and.w	r2, r3, #31
 80038b6:	e01e      	b.n	80038f6 <HAL_ADC_ConfigChannel+0x326>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2102      	movs	r1, #2
 80038be:	4618      	mov	r0, r3
 80038c0:	f7ff f9ec 	bl	8002c9c <LL_ADC_GetOffsetChannel>
 80038c4:	4603      	mov	r3, r0
 80038c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038ce:	fa93 f3a3 	rbit	r3, r3
 80038d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80038d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80038de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80038e6:	2320      	movs	r3, #32
 80038e8:	e004      	b.n	80038f4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80038ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80038ee:	fab3 f383 	clz	r3, r3
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d105      	bne.n	800390e <HAL_ADC_ConfigChannel+0x33e>
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	0e9b      	lsrs	r3, r3, #26
 8003908:	f003 031f 	and.w	r3, r3, #31
 800390c:	e016      	b.n	800393c <HAL_ADC_ConfigChannel+0x36c>
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003916:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800391a:	fa93 f3a3 	rbit	r3, r3
 800391e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003920:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003922:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003926:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800392e:	2320      	movs	r3, #32
 8003930:	e004      	b.n	800393c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003932:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003936:	fab3 f383 	clz	r3, r3
 800393a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800393c:	429a      	cmp	r2, r3
 800393e:	d106      	bne.n	800394e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2200      	movs	r2, #0
 8003946:	2102      	movs	r1, #2
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff f9bd 	bl	8002cc8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2103      	movs	r1, #3
 8003954:	4618      	mov	r0, r3
 8003956:	f7ff f9a1 	bl	8002c9c <LL_ADC_GetOffsetChannel>
 800395a:	4603      	mov	r3, r0
 800395c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10a      	bne.n	800397a <HAL_ADC_ConfigChannel+0x3aa>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2103      	movs	r1, #3
 800396a:	4618      	mov	r0, r3
 800396c:	f7ff f996 	bl	8002c9c <LL_ADC_GetOffsetChannel>
 8003970:	4603      	mov	r3, r0
 8003972:	0e9b      	lsrs	r3, r3, #26
 8003974:	f003 021f 	and.w	r2, r3, #31
 8003978:	e017      	b.n	80039aa <HAL_ADC_ConfigChannel+0x3da>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2103      	movs	r1, #3
 8003980:	4618      	mov	r0, r3
 8003982:	f7ff f98b 	bl	8002c9c <LL_ADC_GetOffsetChannel>
 8003986:	4603      	mov	r3, r0
 8003988:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800398c:	fa93 f3a3 	rbit	r3, r3
 8003990:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003992:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003994:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003996:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003998:	2b00      	cmp	r3, #0
 800399a:	d101      	bne.n	80039a0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800399c:	2320      	movs	r3, #32
 800399e:	e003      	b.n	80039a8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80039a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039a2:	fab3 f383 	clz	r3, r3
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d105      	bne.n	80039c2 <HAL_ADC_ConfigChannel+0x3f2>
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	0e9b      	lsrs	r3, r3, #26
 80039bc:	f003 031f 	and.w	r3, r3, #31
 80039c0:	e011      	b.n	80039e6 <HAL_ADC_ConfigChannel+0x416>
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039ca:	fa93 f3a3 	rbit	r3, r3
 80039ce:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80039d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039d2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80039d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80039da:	2320      	movs	r3, #32
 80039dc:	e003      	b.n	80039e6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80039de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039e0:	fab3 f383 	clz	r3, r3
 80039e4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d106      	bne.n	80039f8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2200      	movs	r2, #0
 80039f0:	2103      	movs	r1, #3
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7ff f968 	bl	8002cc8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff fadd 	bl	8002fbc <LL_ADC_IsEnabled>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f040 813d 	bne.w	8003c84 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6818      	ldr	r0, [r3, #0]
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	6819      	ldr	r1, [r3, #0]
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	461a      	mov	r2, r3
 8003a18:	f7ff fa24 	bl	8002e64 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	4aa2      	ldr	r2, [pc, #648]	; (8003cac <HAL_ADC_ConfigChannel+0x6dc>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	f040 812e 	bne.w	8003c84 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d10b      	bne.n	8003a50 <HAL_ADC_ConfigChannel+0x480>
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	0e9b      	lsrs	r3, r3, #26
 8003a3e:	3301      	adds	r3, #1
 8003a40:	f003 031f 	and.w	r3, r3, #31
 8003a44:	2b09      	cmp	r3, #9
 8003a46:	bf94      	ite	ls
 8003a48:	2301      	movls	r3, #1
 8003a4a:	2300      	movhi	r3, #0
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	e019      	b.n	8003a84 <HAL_ADC_ConfigChannel+0x4b4>
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a58:	fa93 f3a3 	rbit	r3, r3
 8003a5c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003a5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a60:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003a62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d101      	bne.n	8003a6c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003a68:	2320      	movs	r3, #32
 8003a6a:	e003      	b.n	8003a74 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003a6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a6e:	fab3 f383 	clz	r3, r3
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	3301      	adds	r3, #1
 8003a76:	f003 031f 	and.w	r3, r3, #31
 8003a7a:	2b09      	cmp	r3, #9
 8003a7c:	bf94      	ite	ls
 8003a7e:	2301      	movls	r3, #1
 8003a80:	2300      	movhi	r3, #0
 8003a82:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d079      	beq.n	8003b7c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d107      	bne.n	8003aa4 <HAL_ADC_ConfigChannel+0x4d4>
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	0e9b      	lsrs	r3, r3, #26
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	069b      	lsls	r3, r3, #26
 8003a9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003aa2:	e015      	b.n	8003ad0 <HAL_ADC_ConfigChannel+0x500>
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aac:	fa93 f3a3 	rbit	r3, r3
 8003ab0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003ab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ab4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003ab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003abc:	2320      	movs	r3, #32
 8003abe:	e003      	b.n	8003ac8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003ac0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ac2:	fab3 f383 	clz	r3, r3
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	3301      	adds	r3, #1
 8003aca:	069b      	lsls	r3, r3, #26
 8003acc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d109      	bne.n	8003af0 <HAL_ADC_ConfigChannel+0x520>
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	0e9b      	lsrs	r3, r3, #26
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	f003 031f 	and.w	r3, r3, #31
 8003ae8:	2101      	movs	r1, #1
 8003aea:	fa01 f303 	lsl.w	r3, r1, r3
 8003aee:	e017      	b.n	8003b20 <HAL_ADC_ConfigChannel+0x550>
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003af8:	fa93 f3a3 	rbit	r3, r3
 8003afc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003afe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b00:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003b02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003b08:	2320      	movs	r3, #32
 8003b0a:	e003      	b.n	8003b14 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003b0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b0e:	fab3 f383 	clz	r3, r3
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	3301      	adds	r3, #1
 8003b16:	f003 031f 	and.w	r3, r3, #31
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b20:	ea42 0103 	orr.w	r1, r2, r3
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10a      	bne.n	8003b46 <HAL_ADC_ConfigChannel+0x576>
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	0e9b      	lsrs	r3, r3, #26
 8003b36:	3301      	adds	r3, #1
 8003b38:	f003 021f 	and.w	r2, r3, #31
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	4413      	add	r3, r2
 8003b42:	051b      	lsls	r3, r3, #20
 8003b44:	e018      	b.n	8003b78 <HAL_ADC_ConfigChannel+0x5a8>
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b4e:	fa93 f3a3 	rbit	r3, r3
 8003b52:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b56:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003b5e:	2320      	movs	r3, #32
 8003b60:	e003      	b.n	8003b6a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b64:	fab3 f383 	clz	r3, r3
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	f003 021f 	and.w	r2, r3, #31
 8003b70:	4613      	mov	r3, r2
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	4413      	add	r3, r2
 8003b76:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b78:	430b      	orrs	r3, r1
 8003b7a:	e07e      	b.n	8003c7a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d107      	bne.n	8003b98 <HAL_ADC_ConfigChannel+0x5c8>
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	0e9b      	lsrs	r3, r3, #26
 8003b8e:	3301      	adds	r3, #1
 8003b90:	069b      	lsls	r3, r3, #26
 8003b92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b96:	e015      	b.n	8003bc4 <HAL_ADC_ConfigChannel+0x5f4>
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba0:	fa93 f3a3 	rbit	r3, r3
 8003ba4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d101      	bne.n	8003bb4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003bb0:	2320      	movs	r3, #32
 8003bb2:	e003      	b.n	8003bbc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb6:	fab3 f383 	clz	r3, r3
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	069b      	lsls	r3, r3, #26
 8003bc0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d109      	bne.n	8003be4 <HAL_ADC_ConfigChannel+0x614>
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	0e9b      	lsrs	r3, r3, #26
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	f003 031f 	and.w	r3, r3, #31
 8003bdc:	2101      	movs	r1, #1
 8003bde:	fa01 f303 	lsl.w	r3, r1, r3
 8003be2:	e017      	b.n	8003c14 <HAL_ADC_ConfigChannel+0x644>
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	fa93 f3a3 	rbit	r3, r3
 8003bf0:	61fb      	str	r3, [r7, #28]
  return result;
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d101      	bne.n	8003c00 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003bfc:	2320      	movs	r3, #32
 8003bfe:	e003      	b.n	8003c08 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	fab3 f383 	clz	r3, r3
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	3301      	adds	r3, #1
 8003c0a:	f003 031f 	and.w	r3, r3, #31
 8003c0e:	2101      	movs	r1, #1
 8003c10:	fa01 f303 	lsl.w	r3, r1, r3
 8003c14:	ea42 0103 	orr.w	r1, r2, r3
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10d      	bne.n	8003c40 <HAL_ADC_ConfigChannel+0x670>
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	0e9b      	lsrs	r3, r3, #26
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	f003 021f 	and.w	r2, r3, #31
 8003c30:	4613      	mov	r3, r2
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	4413      	add	r3, r2
 8003c36:	3b1e      	subs	r3, #30
 8003c38:	051b      	lsls	r3, r3, #20
 8003c3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c3e:	e01b      	b.n	8003c78 <HAL_ADC_ConfigChannel+0x6a8>
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	fa93 f3a3 	rbit	r3, r3
 8003c4c:	613b      	str	r3, [r7, #16]
  return result;
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d101      	bne.n	8003c5c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003c58:	2320      	movs	r3, #32
 8003c5a:	e003      	b.n	8003c64 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	fab3 f383 	clz	r3, r3
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	3301      	adds	r3, #1
 8003c66:	f003 021f 	and.w	r2, r3, #31
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	4413      	add	r3, r2
 8003c70:	3b1e      	subs	r3, #30
 8003c72:	051b      	lsls	r3, r3, #20
 8003c74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c78:	430b      	orrs	r3, r1
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	6892      	ldr	r2, [r2, #8]
 8003c7e:	4619      	mov	r1, r3
 8003c80:	f7ff f8c5 	bl	8002e0e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	4b09      	ldr	r3, [pc, #36]	; (8003cb0 <HAL_ADC_ConfigChannel+0x6e0>)
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 80be 	beq.w	8003e0e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c9a:	d004      	beq.n	8003ca6 <HAL_ADC_ConfigChannel+0x6d6>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a04      	ldr	r2, [pc, #16]	; (8003cb4 <HAL_ADC_ConfigChannel+0x6e4>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d10a      	bne.n	8003cbc <HAL_ADC_ConfigChannel+0x6ec>
 8003ca6:	4b04      	ldr	r3, [pc, #16]	; (8003cb8 <HAL_ADC_ConfigChannel+0x6e8>)
 8003ca8:	e009      	b.n	8003cbe <HAL_ADC_ConfigChannel+0x6ee>
 8003caa:	bf00      	nop
 8003cac:	407f0000 	.word	0x407f0000
 8003cb0:	80080000 	.word	0x80080000
 8003cb4:	50000100 	.word	0x50000100
 8003cb8:	50000300 	.word	0x50000300
 8003cbc:	4b59      	ldr	r3, [pc, #356]	; (8003e24 <HAL_ADC_ConfigChannel+0x854>)
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7fe ffba 	bl	8002c38 <LL_ADC_GetCommonPathInternalCh>
 8003cc4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a56      	ldr	r2, [pc, #344]	; (8003e28 <HAL_ADC_ConfigChannel+0x858>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d004      	beq.n	8003cdc <HAL_ADC_ConfigChannel+0x70c>
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a55      	ldr	r2, [pc, #340]	; (8003e2c <HAL_ADC_ConfigChannel+0x85c>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d13a      	bne.n	8003d52 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003cdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ce0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d134      	bne.n	8003d52 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cf0:	d005      	beq.n	8003cfe <HAL_ADC_ConfigChannel+0x72e>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a4e      	ldr	r2, [pc, #312]	; (8003e30 <HAL_ADC_ConfigChannel+0x860>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	f040 8085 	bne.w	8003e08 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d06:	d004      	beq.n	8003d12 <HAL_ADC_ConfigChannel+0x742>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a49      	ldr	r2, [pc, #292]	; (8003e34 <HAL_ADC_ConfigChannel+0x864>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d101      	bne.n	8003d16 <HAL_ADC_ConfigChannel+0x746>
 8003d12:	4a49      	ldr	r2, [pc, #292]	; (8003e38 <HAL_ADC_ConfigChannel+0x868>)
 8003d14:	e000      	b.n	8003d18 <HAL_ADC_ConfigChannel+0x748>
 8003d16:	4a43      	ldr	r2, [pc, #268]	; (8003e24 <HAL_ADC_ConfigChannel+0x854>)
 8003d18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d1c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d20:	4619      	mov	r1, r3
 8003d22:	4610      	mov	r0, r2
 8003d24:	f7fe ff75 	bl	8002c12 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d28:	4b44      	ldr	r3, [pc, #272]	; (8003e3c <HAL_ADC_ConfigChannel+0x86c>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	099b      	lsrs	r3, r3, #6
 8003d2e:	4a44      	ldr	r2, [pc, #272]	; (8003e40 <HAL_ADC_ConfigChannel+0x870>)
 8003d30:	fba2 2303 	umull	r2, r3, r2, r3
 8003d34:	099b      	lsrs	r3, r3, #6
 8003d36:	1c5a      	adds	r2, r3, #1
 8003d38:	4613      	mov	r3, r2
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	4413      	add	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003d42:	e002      	b.n	8003d4a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	3b01      	subs	r3, #1
 8003d48:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1f9      	bne.n	8003d44 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d50:	e05a      	b.n	8003e08 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a3b      	ldr	r2, [pc, #236]	; (8003e44 <HAL_ADC_ConfigChannel+0x874>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d125      	bne.n	8003da8 <HAL_ADC_ConfigChannel+0x7d8>
 8003d5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d11f      	bne.n	8003da8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a31      	ldr	r2, [pc, #196]	; (8003e34 <HAL_ADC_ConfigChannel+0x864>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d104      	bne.n	8003d7c <HAL_ADC_ConfigChannel+0x7ac>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a34      	ldr	r2, [pc, #208]	; (8003e48 <HAL_ADC_ConfigChannel+0x878>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d047      	beq.n	8003e0c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d84:	d004      	beq.n	8003d90 <HAL_ADC_ConfigChannel+0x7c0>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a2a      	ldr	r2, [pc, #168]	; (8003e34 <HAL_ADC_ConfigChannel+0x864>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d101      	bne.n	8003d94 <HAL_ADC_ConfigChannel+0x7c4>
 8003d90:	4a29      	ldr	r2, [pc, #164]	; (8003e38 <HAL_ADC_ConfigChannel+0x868>)
 8003d92:	e000      	b.n	8003d96 <HAL_ADC_ConfigChannel+0x7c6>
 8003d94:	4a23      	ldr	r2, [pc, #140]	; (8003e24 <HAL_ADC_ConfigChannel+0x854>)
 8003d96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d9e:	4619      	mov	r1, r3
 8003da0:	4610      	mov	r0, r2
 8003da2:	f7fe ff36 	bl	8002c12 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003da6:	e031      	b.n	8003e0c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a27      	ldr	r2, [pc, #156]	; (8003e4c <HAL_ADC_ConfigChannel+0x87c>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d12d      	bne.n	8003e0e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003db2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003db6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d127      	bne.n	8003e0e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a1c      	ldr	r2, [pc, #112]	; (8003e34 <HAL_ADC_ConfigChannel+0x864>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d022      	beq.n	8003e0e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003dd0:	d004      	beq.n	8003ddc <HAL_ADC_ConfigChannel+0x80c>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a17      	ldr	r2, [pc, #92]	; (8003e34 <HAL_ADC_ConfigChannel+0x864>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d101      	bne.n	8003de0 <HAL_ADC_ConfigChannel+0x810>
 8003ddc:	4a16      	ldr	r2, [pc, #88]	; (8003e38 <HAL_ADC_ConfigChannel+0x868>)
 8003dde:	e000      	b.n	8003de2 <HAL_ADC_ConfigChannel+0x812>
 8003de0:	4a10      	ldr	r2, [pc, #64]	; (8003e24 <HAL_ADC_ConfigChannel+0x854>)
 8003de2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003de6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003dea:	4619      	mov	r1, r3
 8003dec:	4610      	mov	r0, r2
 8003dee:	f7fe ff10 	bl	8002c12 <LL_ADC_SetCommonPathInternalCh>
 8003df2:	e00c      	b.n	8003e0e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df8:	f043 0220 	orr.w	r2, r3, #32
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003e06:	e002      	b.n	8003e0e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e08:	bf00      	nop
 8003e0a:	e000      	b.n	8003e0e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e0c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003e16:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	37d8      	adds	r7, #216	; 0xd8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	50000700 	.word	0x50000700
 8003e28:	c3210000 	.word	0xc3210000
 8003e2c:	90c00010 	.word	0x90c00010
 8003e30:	50000600 	.word	0x50000600
 8003e34:	50000100 	.word	0x50000100
 8003e38:	50000300 	.word	0x50000300
 8003e3c:	20000000 	.word	0x20000000
 8003e40:	053e2d63 	.word	0x053e2d63
 8003e44:	c7520000 	.word	0xc7520000
 8003e48:	50000500 	.word	0x50000500
 8003e4c:	cb840000 	.word	0xcb840000

08003e50 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7ff f8ad 	bl	8002fbc <LL_ADC_IsEnabled>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d14d      	bne.n	8003f04 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689a      	ldr	r2, [r3, #8]
 8003e6e:	4b28      	ldr	r3, [pc, #160]	; (8003f10 <ADC_Enable+0xc0>)
 8003e70:	4013      	ands	r3, r2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00d      	beq.n	8003e92 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e7a:	f043 0210 	orr.w	r2, r3, #16
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e86:	f043 0201 	orr.w	r2, r3, #1
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e039      	b.n	8003f06 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7ff f868 	bl	8002f6c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003e9c:	f7fe fe78 	bl	8002b90 <HAL_GetTick>
 8003ea0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ea2:	e028      	b.n	8003ef6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7ff f887 	bl	8002fbc <LL_ADC_IsEnabled>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d104      	bne.n	8003ebe <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7ff f857 	bl	8002f6c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003ebe:	f7fe fe67 	bl	8002b90 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d914      	bls.n	8003ef6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d00d      	beq.n	8003ef6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ede:	f043 0210 	orr.w	r2, r3, #16
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eea:	f043 0201 	orr.w	r2, r3, #1
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e007      	b.n	8003f06 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d1cf      	bne.n	8003ea4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	8000003f 	.word	0x8000003f

08003f14 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7ff f85e 	bl	8002fe2 <LL_ADC_IsDisableOngoing>
 8003f26:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7ff f845 	bl	8002fbc <LL_ADC_IsEnabled>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d047      	beq.n	8003fc8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d144      	bne.n	8003fc8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f003 030d 	and.w	r3, r3, #13
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d10c      	bne.n	8003f66 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7ff f81f 	bl	8002f94 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2203      	movs	r2, #3
 8003f5c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003f5e:	f7fe fe17 	bl	8002b90 <HAL_GetTick>
 8003f62:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f64:	e029      	b.n	8003fba <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f6a:	f043 0210 	orr.w	r2, r3, #16
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f76:	f043 0201 	orr.w	r2, r3, #1
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e023      	b.n	8003fca <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003f82:	f7fe fe05 	bl	8002b90 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d914      	bls.n	8003fba <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00d      	beq.n	8003fba <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa2:	f043 0210 	orr.w	r2, r3, #16
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fae:	f043 0201 	orr.w	r2, r3, #1
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e007      	b.n	8003fca <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1dc      	bne.n	8003f82 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b084      	sub	sp, #16
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d14b      	bne.n	8004084 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0308 	and.w	r3, r3, #8
 8004002:	2b00      	cmp	r3, #0
 8004004:	d021      	beq.n	800404a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4618      	mov	r0, r3
 800400c:	f7fe fec0 	bl	8002d90 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d032      	beq.n	800407c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d12b      	bne.n	800407c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004028:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004034:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d11f      	bne.n	800407c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004040:	f043 0201 	orr.w	r2, r3, #1
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	65da      	str	r2, [r3, #92]	; 0x5c
 8004048:	e018      	b.n	800407c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d111      	bne.n	800407c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800405c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004068:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d105      	bne.n	800407c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004074:	f043 0201 	orr.w	r2, r3, #1
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f7fd fc7b 	bl	8001978 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004082:	e00e      	b.n	80040a2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004088:	f003 0310 	and.w	r3, r3, #16
 800408c:	2b00      	cmp	r3, #0
 800408e:	d003      	beq.n	8004098 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f7ff fa93 	bl	80035bc <HAL_ADC_ErrorCallback>
}
 8004096:	e004      	b.n	80040a2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	4798      	blx	r3
}
 80040a2:	bf00      	nop
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b084      	sub	sp, #16
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f7ff fa75 	bl	80035a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80040be:	bf00      	nop
 80040c0:	3710      	adds	r7, #16
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b084      	sub	sp, #16
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040e4:	f043 0204 	orr.w	r2, r3, #4
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f7ff fa65 	bl	80035bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80040f2:	bf00      	nop
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <LL_ADC_IsEnabled>:
{
 80040fa:	b480      	push	{r7}
 80040fc:	b083      	sub	sp, #12
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b01      	cmp	r3, #1
 800410c:	d101      	bne.n	8004112 <LL_ADC_IsEnabled+0x18>
 800410e:	2301      	movs	r3, #1
 8004110:	e000      	b.n	8004114 <LL_ADC_IsEnabled+0x1a>
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <LL_ADC_StartCalibration>:
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004132:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004136:	683a      	ldr	r2, [r7, #0]
 8004138:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800413c:	4313      	orrs	r3, r2
 800413e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	609a      	str	r2, [r3, #8]
}
 8004146:	bf00      	nop
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr

08004152 <LL_ADC_IsCalibrationOnGoing>:
{
 8004152:	b480      	push	{r7}
 8004154:	b083      	sub	sp, #12
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004162:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004166:	d101      	bne.n	800416c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004168:	2301      	movs	r3, #1
 800416a:	e000      	b.n	800416e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <LL_ADC_REG_IsConversionOngoing>:
{
 800417a:	b480      	push	{r7}
 800417c:	b083      	sub	sp, #12
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 0304 	and.w	r3, r3, #4
 800418a:	2b04      	cmp	r3, #4
 800418c:	d101      	bne.n	8004192 <LL_ADC_REG_IsConversionOngoing+0x18>
 800418e:	2301      	movs	r3, #1
 8004190:	e000      	b.n	8004194 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80041aa:	2300      	movs	r3, #0
 80041ac:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d101      	bne.n	80041bc <HAL_ADCEx_Calibration_Start+0x1c>
 80041b8:	2302      	movs	r3, #2
 80041ba:	e04d      	b.n	8004258 <HAL_ADCEx_Calibration_Start+0xb8>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f7ff fea5 	bl	8003f14 <ADC_Disable>
 80041ca:	4603      	mov	r3, r0
 80041cc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80041ce:	7bfb      	ldrb	r3, [r7, #15]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d136      	bne.n	8004242 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80041dc:	f023 0302 	bic.w	r3, r3, #2
 80041e0:	f043 0202 	orr.w	r2, r3, #2
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6839      	ldr	r1, [r7, #0]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7ff ff96 	bl	8004120 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80041f4:	e014      	b.n	8004220 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	3301      	adds	r3, #1
 80041fa:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	4a18      	ldr	r2, [pc, #96]	; (8004260 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d90d      	bls.n	8004220 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004208:	f023 0312 	bic.w	r3, r3, #18
 800420c:	f043 0210 	orr.w	r2, r3, #16
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e01b      	b.n	8004258 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4618      	mov	r0, r3
 8004226:	f7ff ff94 	bl	8004152 <LL_ADC_IsCalibrationOnGoing>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1e2      	bne.n	80041f6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004234:	f023 0303 	bic.w	r3, r3, #3
 8004238:	f043 0201 	orr.w	r2, r3, #1
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004240:	e005      	b.n	800424e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004246:	f043 0210 	orr.w	r2, r3, #16
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004256:	7bfb      	ldrb	r3, [r7, #15]
}
 8004258:	4618      	mov	r0, r3
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	0004de01 	.word	0x0004de01

08004264 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004264:	b590      	push	{r4, r7, lr}
 8004266:	b0a1      	sub	sp, #132	; 0x84
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800426e:	2300      	movs	r3, #0
 8004270:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800427a:	2b01      	cmp	r3, #1
 800427c:	d101      	bne.n	8004282 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800427e:	2302      	movs	r3, #2
 8004280:	e0e7      	b.n	8004452 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800428a:	2300      	movs	r3, #0
 800428c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800428e:	2300      	movs	r3, #0
 8004290:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800429a:	d102      	bne.n	80042a2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800429c:	4b6f      	ldr	r3, [pc, #444]	; (800445c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800429e:	60bb      	str	r3, [r7, #8]
 80042a0:	e009      	b.n	80042b6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a6e      	ldr	r2, [pc, #440]	; (8004460 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d102      	bne.n	80042b2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80042ac:	4b6d      	ldr	r3, [pc, #436]	; (8004464 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80042ae:	60bb      	str	r3, [r7, #8]
 80042b0:	e001      	b.n	80042b6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80042b2:	2300      	movs	r3, #0
 80042b4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d10b      	bne.n	80042d4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c0:	f043 0220 	orr.w	r2, r3, #32
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e0be      	b.n	8004452 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7ff ff4f 	bl	800417a <LL_ADC_REG_IsConversionOngoing>
 80042dc:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7ff ff49 	bl	800417a <LL_ADC_REG_IsConversionOngoing>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f040 80a0 	bne.w	8004430 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80042f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f040 809c 	bne.w	8004430 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004300:	d004      	beq.n	800430c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a55      	ldr	r2, [pc, #340]	; (800445c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d101      	bne.n	8004310 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800430c:	4b56      	ldr	r3, [pc, #344]	; (8004468 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800430e:	e000      	b.n	8004312 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004310:	4b56      	ldr	r3, [pc, #344]	; (800446c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004312:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d04b      	beq.n	80043b4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800431c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	6859      	ldr	r1, [r3, #4]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800432e:	035b      	lsls	r3, r3, #13
 8004330:	430b      	orrs	r3, r1
 8004332:	431a      	orrs	r2, r3
 8004334:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004336:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004340:	d004      	beq.n	800434c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a45      	ldr	r2, [pc, #276]	; (800445c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d10f      	bne.n	800436c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800434c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004350:	f7ff fed3 	bl	80040fa <LL_ADC_IsEnabled>
 8004354:	4604      	mov	r4, r0
 8004356:	4841      	ldr	r0, [pc, #260]	; (800445c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004358:	f7ff fecf 	bl	80040fa <LL_ADC_IsEnabled>
 800435c:	4603      	mov	r3, r0
 800435e:	4323      	orrs	r3, r4
 8004360:	2b00      	cmp	r3, #0
 8004362:	bf0c      	ite	eq
 8004364:	2301      	moveq	r3, #1
 8004366:	2300      	movne	r3, #0
 8004368:	b2db      	uxtb	r3, r3
 800436a:	e012      	b.n	8004392 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800436c:	483c      	ldr	r0, [pc, #240]	; (8004460 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800436e:	f7ff fec4 	bl	80040fa <LL_ADC_IsEnabled>
 8004372:	4604      	mov	r4, r0
 8004374:	483b      	ldr	r0, [pc, #236]	; (8004464 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004376:	f7ff fec0 	bl	80040fa <LL_ADC_IsEnabled>
 800437a:	4603      	mov	r3, r0
 800437c:	431c      	orrs	r4, r3
 800437e:	483c      	ldr	r0, [pc, #240]	; (8004470 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004380:	f7ff febb 	bl	80040fa <LL_ADC_IsEnabled>
 8004384:	4603      	mov	r3, r0
 8004386:	4323      	orrs	r3, r4
 8004388:	2b00      	cmp	r3, #0
 800438a:	bf0c      	ite	eq
 800438c:	2301      	moveq	r3, #1
 800438e:	2300      	movne	r3, #0
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d056      	beq.n	8004444 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004396:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800439e:	f023 030f 	bic.w	r3, r3, #15
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	6811      	ldr	r1, [r2, #0]
 80043a6:	683a      	ldr	r2, [r7, #0]
 80043a8:	6892      	ldr	r2, [r2, #8]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	431a      	orrs	r2, r3
 80043ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043b0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80043b2:	e047      	b.n	8004444 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80043b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043be:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043c8:	d004      	beq.n	80043d4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a23      	ldr	r2, [pc, #140]	; (800445c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d10f      	bne.n	80043f4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80043d4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80043d8:	f7ff fe8f 	bl	80040fa <LL_ADC_IsEnabled>
 80043dc:	4604      	mov	r4, r0
 80043de:	481f      	ldr	r0, [pc, #124]	; (800445c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80043e0:	f7ff fe8b 	bl	80040fa <LL_ADC_IsEnabled>
 80043e4:	4603      	mov	r3, r0
 80043e6:	4323      	orrs	r3, r4
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	bf0c      	ite	eq
 80043ec:	2301      	moveq	r3, #1
 80043ee:	2300      	movne	r3, #0
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	e012      	b.n	800441a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80043f4:	481a      	ldr	r0, [pc, #104]	; (8004460 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80043f6:	f7ff fe80 	bl	80040fa <LL_ADC_IsEnabled>
 80043fa:	4604      	mov	r4, r0
 80043fc:	4819      	ldr	r0, [pc, #100]	; (8004464 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80043fe:	f7ff fe7c 	bl	80040fa <LL_ADC_IsEnabled>
 8004402:	4603      	mov	r3, r0
 8004404:	431c      	orrs	r4, r3
 8004406:	481a      	ldr	r0, [pc, #104]	; (8004470 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004408:	f7ff fe77 	bl	80040fa <LL_ADC_IsEnabled>
 800440c:	4603      	mov	r3, r0
 800440e:	4323      	orrs	r3, r4
 8004410:	2b00      	cmp	r3, #0
 8004412:	bf0c      	ite	eq
 8004414:	2301      	moveq	r3, #1
 8004416:	2300      	movne	r3, #0
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d012      	beq.n	8004444 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800441e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004426:	f023 030f 	bic.w	r3, r3, #15
 800442a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800442c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800442e:	e009      	b.n	8004444 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004434:	f043 0220 	orr.w	r2, r3, #32
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004442:	e000      	b.n	8004446 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004444:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800444e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004452:	4618      	mov	r0, r3
 8004454:	3784      	adds	r7, #132	; 0x84
 8004456:	46bd      	mov	sp, r7
 8004458:	bd90      	pop	{r4, r7, pc}
 800445a:	bf00      	nop
 800445c:	50000100 	.word	0x50000100
 8004460:	50000400 	.word	0x50000400
 8004464:	50000500 	.word	0x50000500
 8004468:	50000300 	.word	0x50000300
 800446c:	50000700 	.word	0x50000700
 8004470:	50000600 	.word	0x50000600

08004474 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f003 0307 	and.w	r3, r3, #7
 8004482:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004484:	4b0c      	ldr	r3, [pc, #48]	; (80044b8 <__NVIC_SetPriorityGrouping+0x44>)
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004490:	4013      	ands	r3, r2
 8004492:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800449c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044a6:	4a04      	ldr	r2, [pc, #16]	; (80044b8 <__NVIC_SetPriorityGrouping+0x44>)
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	60d3      	str	r3, [r2, #12]
}
 80044ac:	bf00      	nop
 80044ae:	3714      	adds	r7, #20
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	e000ed00 	.word	0xe000ed00

080044bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044bc:	b480      	push	{r7}
 80044be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044c0:	4b04      	ldr	r3, [pc, #16]	; (80044d4 <__NVIC_GetPriorityGrouping+0x18>)
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	0a1b      	lsrs	r3, r3, #8
 80044c6:	f003 0307 	and.w	r3, r3, #7
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr
 80044d4:	e000ed00 	.word	0xe000ed00

080044d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	4603      	mov	r3, r0
 80044e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	db0b      	blt.n	8004502 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044ea:	79fb      	ldrb	r3, [r7, #7]
 80044ec:	f003 021f 	and.w	r2, r3, #31
 80044f0:	4907      	ldr	r1, [pc, #28]	; (8004510 <__NVIC_EnableIRQ+0x38>)
 80044f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f6:	095b      	lsrs	r3, r3, #5
 80044f8:	2001      	movs	r0, #1
 80044fa:	fa00 f202 	lsl.w	r2, r0, r2
 80044fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004502:	bf00      	nop
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	e000e100 	.word	0xe000e100

08004514 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	4603      	mov	r3, r0
 800451c:	6039      	str	r1, [r7, #0]
 800451e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004524:	2b00      	cmp	r3, #0
 8004526:	db0a      	blt.n	800453e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	b2da      	uxtb	r2, r3
 800452c:	490c      	ldr	r1, [pc, #48]	; (8004560 <__NVIC_SetPriority+0x4c>)
 800452e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004532:	0112      	lsls	r2, r2, #4
 8004534:	b2d2      	uxtb	r2, r2
 8004536:	440b      	add	r3, r1
 8004538:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800453c:	e00a      	b.n	8004554 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	b2da      	uxtb	r2, r3
 8004542:	4908      	ldr	r1, [pc, #32]	; (8004564 <__NVIC_SetPriority+0x50>)
 8004544:	79fb      	ldrb	r3, [r7, #7]
 8004546:	f003 030f 	and.w	r3, r3, #15
 800454a:	3b04      	subs	r3, #4
 800454c:	0112      	lsls	r2, r2, #4
 800454e:	b2d2      	uxtb	r2, r2
 8004550:	440b      	add	r3, r1
 8004552:	761a      	strb	r2, [r3, #24]
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr
 8004560:	e000e100 	.word	0xe000e100
 8004564:	e000ed00 	.word	0xe000ed00

08004568 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004568:	b480      	push	{r7}
 800456a:	b089      	sub	sp, #36	; 0x24
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f003 0307 	and.w	r3, r3, #7
 800457a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	f1c3 0307 	rsb	r3, r3, #7
 8004582:	2b04      	cmp	r3, #4
 8004584:	bf28      	it	cs
 8004586:	2304      	movcs	r3, #4
 8004588:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	3304      	adds	r3, #4
 800458e:	2b06      	cmp	r3, #6
 8004590:	d902      	bls.n	8004598 <NVIC_EncodePriority+0x30>
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	3b03      	subs	r3, #3
 8004596:	e000      	b.n	800459a <NVIC_EncodePriority+0x32>
 8004598:	2300      	movs	r3, #0
 800459a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800459c:	f04f 32ff 	mov.w	r2, #4294967295
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	fa02 f303 	lsl.w	r3, r2, r3
 80045a6:	43da      	mvns	r2, r3
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	401a      	ands	r2, r3
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045b0:	f04f 31ff 	mov.w	r1, #4294967295
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	fa01 f303 	lsl.w	r3, r1, r3
 80045ba:	43d9      	mvns	r1, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045c0:	4313      	orrs	r3, r2
         );
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3724      	adds	r7, #36	; 0x24
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr

080045ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b082      	sub	sp, #8
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7ff ff4c 	bl	8004474 <__NVIC_SetPriorityGrouping>
}
 80045dc:	bf00      	nop
 80045de:	3708      	adds	r7, #8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b086      	sub	sp, #24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	4603      	mov	r3, r0
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
 80045f0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80045f2:	f7ff ff63 	bl	80044bc <__NVIC_GetPriorityGrouping>
 80045f6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	68b9      	ldr	r1, [r7, #8]
 80045fc:	6978      	ldr	r0, [r7, #20]
 80045fe:	f7ff ffb3 	bl	8004568 <NVIC_EncodePriority>
 8004602:	4602      	mov	r2, r0
 8004604:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004608:	4611      	mov	r1, r2
 800460a:	4618      	mov	r0, r3
 800460c:	f7ff ff82 	bl	8004514 <__NVIC_SetPriority>
}
 8004610:	bf00      	nop
 8004612:	3718      	adds	r7, #24
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	4603      	mov	r3, r0
 8004620:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004626:	4618      	mov	r0, r3
 8004628:	f7ff ff56 	bl	80044d8 <__NVIC_EnableIRQ>
}
 800462c:	bf00      	nop
 800462e:	3708      	adds	r7, #8
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e08d      	b.n	8004762 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	461a      	mov	r2, r3
 800464c:	4b47      	ldr	r3, [pc, #284]	; (800476c <HAL_DMA_Init+0x138>)
 800464e:	429a      	cmp	r2, r3
 8004650:	d80f      	bhi.n	8004672 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	461a      	mov	r2, r3
 8004658:	4b45      	ldr	r3, [pc, #276]	; (8004770 <HAL_DMA_Init+0x13c>)
 800465a:	4413      	add	r3, r2
 800465c:	4a45      	ldr	r2, [pc, #276]	; (8004774 <HAL_DMA_Init+0x140>)
 800465e:	fba2 2303 	umull	r2, r3, r2, r3
 8004662:	091b      	lsrs	r3, r3, #4
 8004664:	009a      	lsls	r2, r3, #2
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a42      	ldr	r2, [pc, #264]	; (8004778 <HAL_DMA_Init+0x144>)
 800466e:	641a      	str	r2, [r3, #64]	; 0x40
 8004670:	e00e      	b.n	8004690 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	461a      	mov	r2, r3
 8004678:	4b40      	ldr	r3, [pc, #256]	; (800477c <HAL_DMA_Init+0x148>)
 800467a:	4413      	add	r3, r2
 800467c:	4a3d      	ldr	r2, [pc, #244]	; (8004774 <HAL_DMA_Init+0x140>)
 800467e:	fba2 2303 	umull	r2, r3, r2, r3
 8004682:	091b      	lsrs	r3, r3, #4
 8004684:	009a      	lsls	r2, r3, #2
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a3c      	ldr	r2, [pc, #240]	; (8004780 <HAL_DMA_Init+0x14c>)
 800468e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2202      	movs	r2, #2
 8004694:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80046a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80046b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 fa76 	bl	8004bd4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046f0:	d102      	bne.n	80046f8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004700:	b2d2      	uxtb	r2, r2
 8004702:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800470c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d010      	beq.n	8004738 <HAL_DMA_Init+0x104>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	2b04      	cmp	r3, #4
 800471c:	d80c      	bhi.n	8004738 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 fa96 	bl	8004c50 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004728:	2200      	movs	r2, #0
 800472a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004734:	605a      	str	r2, [r3, #4]
 8004736:	e008      	b.n	800474a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	40020407 	.word	0x40020407
 8004770:	bffdfff8 	.word	0xbffdfff8
 8004774:	cccccccd 	.word	0xcccccccd
 8004778:	40020000 	.word	0x40020000
 800477c:	bffdfbf8 	.word	0xbffdfbf8
 8004780:	40020400 	.word	0x40020400

08004784 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b086      	sub	sp, #24
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
 8004790:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004792:	2300      	movs	r3, #0
 8004794:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800479c:	2b01      	cmp	r3, #1
 800479e:	d101      	bne.n	80047a4 <HAL_DMA_Start_IT+0x20>
 80047a0:	2302      	movs	r3, #2
 80047a2:	e066      	b.n	8004872 <HAL_DMA_Start_IT+0xee>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d155      	bne.n	8004864 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2202      	movs	r2, #2
 80047bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f022 0201 	bic.w	r2, r2, #1
 80047d4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	68b9      	ldr	r1, [r7, #8]
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f000 f9bb 	bl	8004b58 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d008      	beq.n	80047fc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f042 020e 	orr.w	r2, r2, #14
 80047f8:	601a      	str	r2, [r3, #0]
 80047fa:	e00f      	b.n	800481c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 0204 	bic.w	r2, r2, #4
 800480a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f042 020a 	orr.w	r2, r2, #10
 800481a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d007      	beq.n	800483a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004834:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004838:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800483e:	2b00      	cmp	r3, #0
 8004840:	d007      	beq.n	8004852 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800484c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004850:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f042 0201 	orr.w	r2, r2, #1
 8004860:	601a      	str	r2, [r3, #0]
 8004862:	e005      	b.n	8004870 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800486c:	2302      	movs	r3, #2
 800486e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004870:	7dfb      	ldrb	r3, [r7, #23]
}
 8004872:	4618      	mov	r0, r3
 8004874:	3718      	adds	r7, #24
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}

0800487a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800487a:	b480      	push	{r7}
 800487c:	b085      	sub	sp, #20
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004882:	2300      	movs	r3, #0
 8004884:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b02      	cmp	r3, #2
 8004890:	d005      	beq.n	800489e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2204      	movs	r2, #4
 8004896:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	73fb      	strb	r3, [r7, #15]
 800489c:	e037      	b.n	800490e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f022 020e 	bic.w	r2, r2, #14
 80048ac:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048bc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f022 0201 	bic.w	r2, r2, #1
 80048cc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d2:	f003 021f 	and.w	r2, r3, #31
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048da:	2101      	movs	r1, #1
 80048dc:	fa01 f202 	lsl.w	r2, r1, r2
 80048e0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80048ea:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00c      	beq.n	800490e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004902:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800490c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800491e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004920:	4618      	mov	r0, r3
 8004922:	3714      	adds	r7, #20
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004934:	2300      	movs	r3, #0
 8004936:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d00d      	beq.n	8004960 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2204      	movs	r2, #4
 8004948:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	73fb      	strb	r3, [r7, #15]
 800495e:	e047      	b.n	80049f0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 020e 	bic.w	r2, r2, #14
 800496e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f022 0201 	bic.w	r2, r2, #1
 800497e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800498a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800498e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004994:	f003 021f 	and.w	r2, r3, #31
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499c:	2101      	movs	r1, #1
 800499e:	fa01 f202 	lsl.w	r2, r1, r2
 80049a2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80049ac:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00c      	beq.n	80049d0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049c4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80049ce:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d003      	beq.n	80049f0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	4798      	blx	r3
    }
  }
  return status;
 80049f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b084      	sub	sp, #16
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a16:	f003 031f 	and.w	r3, r3, #31
 8004a1a:	2204      	movs	r2, #4
 8004a1c:	409a      	lsls	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	4013      	ands	r3, r2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d026      	beq.n	8004a74 <HAL_DMA_IRQHandler+0x7a>
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	f003 0304 	and.w	r3, r3, #4
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d021      	beq.n	8004a74 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0320 	and.w	r3, r3, #32
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d107      	bne.n	8004a4e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f022 0204 	bic.w	r2, r2, #4
 8004a4c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a52:	f003 021f 	and.w	r2, r3, #31
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5a:	2104      	movs	r1, #4
 8004a5c:	fa01 f202 	lsl.w	r2, r1, r2
 8004a60:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d071      	beq.n	8004b4e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004a72:	e06c      	b.n	8004b4e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a78:	f003 031f 	and.w	r3, r3, #31
 8004a7c:	2202      	movs	r2, #2
 8004a7e:	409a      	lsls	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	4013      	ands	r3, r2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d02e      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d029      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0320 	and.w	r3, r3, #32
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10b      	bne.n	8004ab8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f022 020a 	bic.w	r2, r2, #10
 8004aae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004abc:	f003 021f 	and.w	r2, r3, #31
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac4:	2102      	movs	r1, #2
 8004ac6:	fa01 f202 	lsl.w	r2, r1, r2
 8004aca:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d038      	beq.n	8004b4e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004ae4:	e033      	b.n	8004b4e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aea:	f003 031f 	and.w	r3, r3, #31
 8004aee:	2208      	movs	r2, #8
 8004af0:	409a      	lsls	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	4013      	ands	r3, r2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d02a      	beq.n	8004b50 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	f003 0308 	and.w	r3, r3, #8
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d025      	beq.n	8004b50 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 020e 	bic.w	r2, r2, #14
 8004b12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b18:	f003 021f 	and.w	r2, r3, #31
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b20:	2101      	movs	r1, #1
 8004b22:	fa01 f202 	lsl.w	r2, r1, r2
 8004b26:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2201      	movs	r2, #1
 8004b32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d004      	beq.n	8004b50 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004b4e:	bf00      	nop
 8004b50:	bf00      	nop
}
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
 8004b64:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004b6e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d004      	beq.n	8004b82 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004b80:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b86:	f003 021f 	and.w	r2, r3, #31
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8e:	2101      	movs	r1, #1
 8004b90:	fa01 f202 	lsl.w	r2, r1, r2
 8004b94:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	2b10      	cmp	r3, #16
 8004ba4:	d108      	bne.n	8004bb8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004bb6:	e007      	b.n	8004bc8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68ba      	ldr	r2, [r7, #8]
 8004bbe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	60da      	str	r2, [r3, #12]
}
 8004bc8:	bf00      	nop
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b087      	sub	sp, #28
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	461a      	mov	r2, r3
 8004be2:	4b16      	ldr	r3, [pc, #88]	; (8004c3c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d802      	bhi.n	8004bee <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004be8:	4b15      	ldr	r3, [pc, #84]	; (8004c40 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004bea:	617b      	str	r3, [r7, #20]
 8004bec:	e001      	b.n	8004bf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004bee:	4b15      	ldr	r3, [pc, #84]	; (8004c44 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004bf0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	3b08      	subs	r3, #8
 8004bfe:	4a12      	ldr	r2, [pc, #72]	; (8004c48 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004c00:	fba2 2303 	umull	r2, r3, r2, r3
 8004c04:	091b      	lsrs	r3, r3, #4
 8004c06:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c0c:	089b      	lsrs	r3, r3, #2
 8004c0e:	009a      	lsls	r2, r3, #2
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	4413      	add	r3, r2
 8004c14:	461a      	mov	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a0b      	ldr	r2, [pc, #44]	; (8004c4c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004c1e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f003 031f 	and.w	r3, r3, #31
 8004c26:	2201      	movs	r2, #1
 8004c28:	409a      	lsls	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004c2e:	bf00      	nop
 8004c30:	371c      	adds	r7, #28
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	40020407 	.word	0x40020407
 8004c40:	40020800 	.word	0x40020800
 8004c44:	40020820 	.word	0x40020820
 8004c48:	cccccccd 	.word	0xcccccccd
 8004c4c:	40020880 	.word	0x40020880

08004c50 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	4b0b      	ldr	r3, [pc, #44]	; (8004c90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004c64:	4413      	add	r3, r2
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	461a      	mov	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a08      	ldr	r2, [pc, #32]	; (8004c94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004c72:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	3b01      	subs	r3, #1
 8004c78:	f003 031f 	and.w	r3, r3, #31
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	409a      	lsls	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004c84:	bf00      	nop
 8004c86:	3714      	adds	r7, #20
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr
 8004c90:	1000823f 	.word	0x1000823f
 8004c94:	40020940 	.word	0x40020940

08004c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b087      	sub	sp, #28
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004ca6:	e15a      	b.n	8004f5e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	2101      	movs	r1, #1
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	f000 814c 	beq.w	8004f58 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f003 0303 	and.w	r3, r3, #3
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d005      	beq.n	8004cd8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d130      	bne.n	8004d3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	005b      	lsls	r3, r3, #1
 8004ce2:	2203      	movs	r2, #3
 8004ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce8:	43db      	mvns	r3, r3
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	4013      	ands	r3, r2
 8004cee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	68da      	ldr	r2, [r3, #12]
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	005b      	lsls	r3, r3, #1
 8004cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d0e:	2201      	movs	r2, #1
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	fa02 f303 	lsl.w	r3, r2, r3
 8004d16:	43db      	mvns	r3, r3
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	091b      	lsrs	r3, r3, #4
 8004d24:	f003 0201 	and.w	r2, r3, #1
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	693a      	ldr	r2, [r7, #16]
 8004d38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f003 0303 	and.w	r3, r3, #3
 8004d42:	2b03      	cmp	r3, #3
 8004d44:	d017      	beq.n	8004d76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	005b      	lsls	r3, r3, #1
 8004d50:	2203      	movs	r2, #3
 8004d52:	fa02 f303 	lsl.w	r3, r2, r3
 8004d56:	43db      	mvns	r3, r3
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	689a      	ldr	r2, [r3, #8]
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	005b      	lsls	r3, r3, #1
 8004d66:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f003 0303 	and.w	r3, r3, #3
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d123      	bne.n	8004dca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	08da      	lsrs	r2, r3, #3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	3208      	adds	r2, #8
 8004d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	f003 0307 	and.w	r3, r3, #7
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	220f      	movs	r2, #15
 8004d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9e:	43db      	mvns	r3, r3
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	4013      	ands	r3, r2
 8004da4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	691a      	ldr	r2, [r3, #16]
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	f003 0307 	and.w	r3, r3, #7
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	fa02 f303 	lsl.w	r3, r2, r3
 8004db6:	693a      	ldr	r2, [r7, #16]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	08da      	lsrs	r2, r3, #3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	3208      	adds	r2, #8
 8004dc4:	6939      	ldr	r1, [r7, #16]
 8004dc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	005b      	lsls	r3, r3, #1
 8004dd4:	2203      	movs	r2, #3
 8004dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dda:	43db      	mvns	r3, r3
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	4013      	ands	r3, r2
 8004de0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f003 0203 	and.w	r2, r3, #3
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	fa02 f303 	lsl.w	r3, r2, r3
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f000 80a6 	beq.w	8004f58 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e0c:	4b5b      	ldr	r3, [pc, #364]	; (8004f7c <HAL_GPIO_Init+0x2e4>)
 8004e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e10:	4a5a      	ldr	r2, [pc, #360]	; (8004f7c <HAL_GPIO_Init+0x2e4>)
 8004e12:	f043 0301 	orr.w	r3, r3, #1
 8004e16:	6613      	str	r3, [r2, #96]	; 0x60
 8004e18:	4b58      	ldr	r3, [pc, #352]	; (8004f7c <HAL_GPIO_Init+0x2e4>)
 8004e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	60bb      	str	r3, [r7, #8]
 8004e22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e24:	4a56      	ldr	r2, [pc, #344]	; (8004f80 <HAL_GPIO_Init+0x2e8>)
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	089b      	lsrs	r3, r3, #2
 8004e2a:	3302      	adds	r3, #2
 8004e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	f003 0303 	and.w	r3, r3, #3
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	220f      	movs	r2, #15
 8004e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e40:	43db      	mvns	r3, r3
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	4013      	ands	r3, r2
 8004e46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004e4e:	d01f      	beq.n	8004e90 <HAL_GPIO_Init+0x1f8>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a4c      	ldr	r2, [pc, #304]	; (8004f84 <HAL_GPIO_Init+0x2ec>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d019      	beq.n	8004e8c <HAL_GPIO_Init+0x1f4>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a4b      	ldr	r2, [pc, #300]	; (8004f88 <HAL_GPIO_Init+0x2f0>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d013      	beq.n	8004e88 <HAL_GPIO_Init+0x1f0>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a4a      	ldr	r2, [pc, #296]	; (8004f8c <HAL_GPIO_Init+0x2f4>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d00d      	beq.n	8004e84 <HAL_GPIO_Init+0x1ec>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a49      	ldr	r2, [pc, #292]	; (8004f90 <HAL_GPIO_Init+0x2f8>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d007      	beq.n	8004e80 <HAL_GPIO_Init+0x1e8>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a48      	ldr	r2, [pc, #288]	; (8004f94 <HAL_GPIO_Init+0x2fc>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d101      	bne.n	8004e7c <HAL_GPIO_Init+0x1e4>
 8004e78:	2305      	movs	r3, #5
 8004e7a:	e00a      	b.n	8004e92 <HAL_GPIO_Init+0x1fa>
 8004e7c:	2306      	movs	r3, #6
 8004e7e:	e008      	b.n	8004e92 <HAL_GPIO_Init+0x1fa>
 8004e80:	2304      	movs	r3, #4
 8004e82:	e006      	b.n	8004e92 <HAL_GPIO_Init+0x1fa>
 8004e84:	2303      	movs	r3, #3
 8004e86:	e004      	b.n	8004e92 <HAL_GPIO_Init+0x1fa>
 8004e88:	2302      	movs	r3, #2
 8004e8a:	e002      	b.n	8004e92 <HAL_GPIO_Init+0x1fa>
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e000      	b.n	8004e92 <HAL_GPIO_Init+0x1fa>
 8004e90:	2300      	movs	r3, #0
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	f002 0203 	and.w	r2, r2, #3
 8004e98:	0092      	lsls	r2, r2, #2
 8004e9a:	4093      	lsls	r3, r2
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ea2:	4937      	ldr	r1, [pc, #220]	; (8004f80 <HAL_GPIO_Init+0x2e8>)
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	089b      	lsrs	r3, r3, #2
 8004ea8:	3302      	adds	r3, #2
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004eb0:	4b39      	ldr	r3, [pc, #228]	; (8004f98 <HAL_GPIO_Init+0x300>)
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	43db      	mvns	r3, r3
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d003      	beq.n	8004ed4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004ed4:	4a30      	ldr	r2, [pc, #192]	; (8004f98 <HAL_GPIO_Init+0x300>)
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004eda:	4b2f      	ldr	r3, [pc, #188]	; (8004f98 <HAL_GPIO_Init+0x300>)
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	43db      	mvns	r3, r3
 8004ee4:	693a      	ldr	r2, [r7, #16]
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004efe:	4a26      	ldr	r2, [pc, #152]	; (8004f98 <HAL_GPIO_Init+0x300>)
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004f04:	4b24      	ldr	r3, [pc, #144]	; (8004f98 <HAL_GPIO_Init+0x300>)
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	43db      	mvns	r3, r3
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	4013      	ands	r3, r2
 8004f12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d003      	beq.n	8004f28 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004f28:	4a1b      	ldr	r2, [pc, #108]	; (8004f98 <HAL_GPIO_Init+0x300>)
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004f2e:	4b1a      	ldr	r3, [pc, #104]	; (8004f98 <HAL_GPIO_Init+0x300>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	43db      	mvns	r3, r3
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d003      	beq.n	8004f52 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004f52:	4a11      	ldr	r2, [pc, #68]	; (8004f98 <HAL_GPIO_Init+0x300>)
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	fa22 f303 	lsr.w	r3, r2, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f47f ae9d 	bne.w	8004ca8 <HAL_GPIO_Init+0x10>
  }
}
 8004f6e:	bf00      	nop
 8004f70:	bf00      	nop
 8004f72:	371c      	adds	r7, #28
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	40021000 	.word	0x40021000
 8004f80:	40010000 	.word	0x40010000
 8004f84:	48000400 	.word	0x48000400
 8004f88:	48000800 	.word	0x48000800
 8004f8c:	48000c00 	.word	0x48000c00
 8004f90:	48001000 	.word	0x48001000
 8004f94:	48001400 	.word	0x48001400
 8004f98:	40010400 	.word	0x40010400

08004f9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	807b      	strh	r3, [r7, #2]
 8004fa8:	4613      	mov	r3, r2
 8004faa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004fac:	787b      	ldrb	r3, [r7, #1]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d003      	beq.n	8004fba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004fb2:	887a      	ldrh	r2, [r7, #2]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004fb8:	e002      	b.n	8004fc0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004fba:	887a      	ldrh	r2, [r7, #2]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004fde:	887a      	ldrh	r2, [r7, #2]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	041a      	lsls	r2, r3, #16
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	43d9      	mvns	r1, r3
 8004fea:	887b      	ldrh	r3, [r7, #2]
 8004fec:	400b      	ands	r3, r1
 8004fee:	431a      	orrs	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	619a      	str	r2, [r3, #24]
}
 8004ff4:	bf00      	nop
 8004ff6:	3714      	adds	r7, #20
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	4603      	mov	r3, r0
 8005008:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800500a:	4b08      	ldr	r3, [pc, #32]	; (800502c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800500c:	695a      	ldr	r2, [r3, #20]
 800500e:	88fb      	ldrh	r3, [r7, #6]
 8005010:	4013      	ands	r3, r2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d006      	beq.n	8005024 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005016:	4a05      	ldr	r2, [pc, #20]	; (800502c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005018:	88fb      	ldrh	r3, [r7, #6]
 800501a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800501c:	88fb      	ldrh	r3, [r7, #6]
 800501e:	4618      	mov	r0, r3
 8005020:	f7fc fc9a 	bl	8001958 <HAL_GPIO_EXTI_Callback>
  }
}
 8005024:	bf00      	nop
 8005026:	3708      	adds	r7, #8
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	40010400 	.word	0x40010400

08005030 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d141      	bne.n	80050c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800503e:	4b4b      	ldr	r3, [pc, #300]	; (800516c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005046:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800504a:	d131      	bne.n	80050b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800504c:	4b47      	ldr	r3, [pc, #284]	; (800516c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800504e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005052:	4a46      	ldr	r2, [pc, #280]	; (800516c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005054:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005058:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800505c:	4b43      	ldr	r3, [pc, #268]	; (800516c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005064:	4a41      	ldr	r2, [pc, #260]	; (800516c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005066:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800506a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800506c:	4b40      	ldr	r3, [pc, #256]	; (8005170 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2232      	movs	r2, #50	; 0x32
 8005072:	fb02 f303 	mul.w	r3, r2, r3
 8005076:	4a3f      	ldr	r2, [pc, #252]	; (8005174 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005078:	fba2 2303 	umull	r2, r3, r2, r3
 800507c:	0c9b      	lsrs	r3, r3, #18
 800507e:	3301      	adds	r3, #1
 8005080:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005082:	e002      	b.n	800508a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	3b01      	subs	r3, #1
 8005088:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800508a:	4b38      	ldr	r3, [pc, #224]	; (800516c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005096:	d102      	bne.n	800509e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1f2      	bne.n	8005084 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800509e:	4b33      	ldr	r3, [pc, #204]	; (800516c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050aa:	d158      	bne.n	800515e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e057      	b.n	8005160 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050b0:	4b2e      	ldr	r3, [pc, #184]	; (800516c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050b6:	4a2d      	ldr	r2, [pc, #180]	; (800516c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80050c0:	e04d      	b.n	800515e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050c8:	d141      	bne.n	800514e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80050ca:	4b28      	ldr	r3, [pc, #160]	; (800516c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80050d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050d6:	d131      	bne.n	800513c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050d8:	4b24      	ldr	r3, [pc, #144]	; (800516c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050de:	4a23      	ldr	r2, [pc, #140]	; (800516c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80050e8:	4b20      	ldr	r3, [pc, #128]	; (800516c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80050f0:	4a1e      	ldr	r2, [pc, #120]	; (800516c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80050f8:	4b1d      	ldr	r3, [pc, #116]	; (8005170 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2232      	movs	r2, #50	; 0x32
 80050fe:	fb02 f303 	mul.w	r3, r2, r3
 8005102:	4a1c      	ldr	r2, [pc, #112]	; (8005174 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005104:	fba2 2303 	umull	r2, r3, r2, r3
 8005108:	0c9b      	lsrs	r3, r3, #18
 800510a:	3301      	adds	r3, #1
 800510c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800510e:	e002      	b.n	8005116 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	3b01      	subs	r3, #1
 8005114:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005116:	4b15      	ldr	r3, [pc, #84]	; (800516c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800511e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005122:	d102      	bne.n	800512a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1f2      	bne.n	8005110 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800512a:	4b10      	ldr	r3, [pc, #64]	; (800516c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005136:	d112      	bne.n	800515e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e011      	b.n	8005160 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800513c:	4b0b      	ldr	r3, [pc, #44]	; (800516c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800513e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005142:	4a0a      	ldr	r2, [pc, #40]	; (800516c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005148:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800514c:	e007      	b.n	800515e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800514e:	4b07      	ldr	r3, [pc, #28]	; (800516c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005156:	4a05      	ldr	r2, [pc, #20]	; (800516c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005158:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800515c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	3714      	adds	r7, #20
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr
 800516c:	40007000 	.word	0x40007000
 8005170:	20000000 	.word	0x20000000
 8005174:	431bde83 	.word	0x431bde83

08005178 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005178:	b480      	push	{r7}
 800517a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800517c:	4b05      	ldr	r3, [pc, #20]	; (8005194 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	4a04      	ldr	r2, [pc, #16]	; (8005194 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005182:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005186:	6093      	str	r3, [r2, #8]
}
 8005188:	bf00      	nop
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	40007000 	.word	0x40007000

08005198 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b088      	sub	sp, #32
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e306      	b.n	80057b8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0301 	and.w	r3, r3, #1
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d075      	beq.n	80052a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051b6:	4b97      	ldr	r3, [pc, #604]	; (8005414 <HAL_RCC_OscConfig+0x27c>)
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f003 030c 	and.w	r3, r3, #12
 80051be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051c0:	4b94      	ldr	r3, [pc, #592]	; (8005414 <HAL_RCC_OscConfig+0x27c>)
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	f003 0303 	and.w	r3, r3, #3
 80051c8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	2b0c      	cmp	r3, #12
 80051ce:	d102      	bne.n	80051d6 <HAL_RCC_OscConfig+0x3e>
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	2b03      	cmp	r3, #3
 80051d4:	d002      	beq.n	80051dc <HAL_RCC_OscConfig+0x44>
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	2b08      	cmp	r3, #8
 80051da:	d10b      	bne.n	80051f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051dc:	4b8d      	ldr	r3, [pc, #564]	; (8005414 <HAL_RCC_OscConfig+0x27c>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d05b      	beq.n	80052a0 <HAL_RCC_OscConfig+0x108>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d157      	bne.n	80052a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e2e1      	b.n	80057b8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051fc:	d106      	bne.n	800520c <HAL_RCC_OscConfig+0x74>
 80051fe:	4b85      	ldr	r3, [pc, #532]	; (8005414 <HAL_RCC_OscConfig+0x27c>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a84      	ldr	r2, [pc, #528]	; (8005414 <HAL_RCC_OscConfig+0x27c>)
 8005204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005208:	6013      	str	r3, [r2, #0]
 800520a:	e01d      	b.n	8005248 <HAL_RCC_OscConfig+0xb0>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005214:	d10c      	bne.n	8005230 <HAL_RCC_OscConfig+0x98>
 8005216:	4b7f      	ldr	r3, [pc, #508]	; (8005414 <HAL_RCC_OscConfig+0x27c>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a7e      	ldr	r2, [pc, #504]	; (8005414 <HAL_RCC_OscConfig+0x27c>)
 800521c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005220:	6013      	str	r3, [r2, #0]
 8005222:	4b7c      	ldr	r3, [pc, #496]	; (8005414 <HAL_RCC_OscConfig+0x27c>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a7b      	ldr	r2, [pc, #492]	; (8005414 <HAL_RCC_OscConfig+0x27c>)
 8005228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800522c:	6013      	str	r3, [r2, #0]
 800522e:	e00b      	b.n	8005248 <HAL_RCC_OscConfig+0xb0>
 8005230:	4b78      	ldr	r3, [pc, #480]	; (8005414 <HAL_RCC_OscConfig+0x27c>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a77      	ldr	r2, [pc, #476]	; (8005414 <HAL_RCC_OscConfig+0x27c>)
 8005236:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800523a:	6013      	str	r3, [r2, #0]
 800523c:	4b75      	ldr	r3, [pc, #468]	; (8005414 <HAL_RCC_OscConfig+0x27c>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a74      	ldr	r2, [pc, #464]	; (8005414 <HAL_RCC_OscConfig+0x27c>)
 8005242:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005246:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d013      	beq.n	8005278 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005250:	f7fd fc9e 	bl	8002b90 <HAL_GetTick>
 8005254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005256:	e008      	b.n	800526a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005258:	f7fd fc9a 	bl	8002b90 <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	2b64      	cmp	r3, #100	; 0x64
 8005264:	d901      	bls.n	800526a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e2a6      	b.n	80057b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800526a:	4b6a      	ldr	r3, [pc, #424]	; (8005414 <HAL_RCC_OscConfig+0x27c>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d0f0      	beq.n	8005258 <HAL_RCC_OscConfig+0xc0>
 8005276:	e014      	b.n	80052a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005278:	f7fd fc8a 	bl	8002b90 <HAL_GetTick>
 800527c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800527e:	e008      	b.n	8005292 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005280:	f7fd fc86 	bl	8002b90 <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	2b64      	cmp	r3, #100	; 0x64
 800528c:	d901      	bls.n	8005292 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e292      	b.n	80057b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005292:	4b60      	ldr	r3, [pc, #384]	; (8005414 <HAL_RCC_OscConfig+0x27c>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d1f0      	bne.n	8005280 <HAL_RCC_OscConfig+0xe8>
 800529e:	e000      	b.n	80052a2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d075      	beq.n	800539a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052ae:	4b59      	ldr	r3, [pc, #356]	; (8005414 <HAL_RCC_OscConfig+0x27c>)
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	f003 030c 	and.w	r3, r3, #12
 80052b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052b8:	4b56      	ldr	r3, [pc, #344]	; (8005414 <HAL_RCC_OscConfig+0x27c>)
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	f003 0303 	and.w	r3, r3, #3
 80052c0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	2b0c      	cmp	r3, #12
 80052c6:	d102      	bne.n	80052ce <HAL_RCC_OscConfig+0x136>
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d002      	beq.n	80052d4 <HAL_RCC_OscConfig+0x13c>
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	2b04      	cmp	r3, #4
 80052d2:	d11f      	bne.n	8005314 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052d4:	4b4f      	ldr	r3, [pc, #316]	; (8005414 <HAL_RCC_OscConfig+0x27c>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d005      	beq.n	80052ec <HAL_RCC_OscConfig+0x154>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d101      	bne.n	80052ec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e265      	b.n	80057b8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052ec:	4b49      	ldr	r3, [pc, #292]	; (8005414 <HAL_RCC_OscConfig+0x27c>)
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	061b      	lsls	r3, r3, #24
 80052fa:	4946      	ldr	r1, [pc, #280]	; (8005414 <HAL_RCC_OscConfig+0x27c>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005300:	4b45      	ldr	r3, [pc, #276]	; (8005418 <HAL_RCC_OscConfig+0x280>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4618      	mov	r0, r3
 8005306:	f7fc ff11 	bl	800212c <HAL_InitTick>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d043      	beq.n	8005398 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e251      	b.n	80057b8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d023      	beq.n	8005364 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800531c:	4b3d      	ldr	r3, [pc, #244]	; (8005414 <HAL_RCC_OscConfig+0x27c>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a3c      	ldr	r2, [pc, #240]	; (8005414 <HAL_RCC_OscConfig+0x27c>)
 8005322:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005326:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005328:	f7fd fc32 	bl	8002b90 <HAL_GetTick>
 800532c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800532e:	e008      	b.n	8005342 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005330:	f7fd fc2e 	bl	8002b90 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	2b02      	cmp	r3, #2
 800533c:	d901      	bls.n	8005342 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e23a      	b.n	80057b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005342:	4b34      	ldr	r3, [pc, #208]	; (8005414 <HAL_RCC_OscConfig+0x27c>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800534a:	2b00      	cmp	r3, #0
 800534c:	d0f0      	beq.n	8005330 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800534e:	4b31      	ldr	r3, [pc, #196]	; (8005414 <HAL_RCC_OscConfig+0x27c>)
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	061b      	lsls	r3, r3, #24
 800535c:	492d      	ldr	r1, [pc, #180]	; (8005414 <HAL_RCC_OscConfig+0x27c>)
 800535e:	4313      	orrs	r3, r2
 8005360:	604b      	str	r3, [r1, #4]
 8005362:	e01a      	b.n	800539a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005364:	4b2b      	ldr	r3, [pc, #172]	; (8005414 <HAL_RCC_OscConfig+0x27c>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a2a      	ldr	r2, [pc, #168]	; (8005414 <HAL_RCC_OscConfig+0x27c>)
 800536a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800536e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005370:	f7fd fc0e 	bl	8002b90 <HAL_GetTick>
 8005374:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005376:	e008      	b.n	800538a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005378:	f7fd fc0a 	bl	8002b90 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	2b02      	cmp	r3, #2
 8005384:	d901      	bls.n	800538a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e216      	b.n	80057b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800538a:	4b22      	ldr	r3, [pc, #136]	; (8005414 <HAL_RCC_OscConfig+0x27c>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1f0      	bne.n	8005378 <HAL_RCC_OscConfig+0x1e0>
 8005396:	e000      	b.n	800539a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005398:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0308 	and.w	r3, r3, #8
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d041      	beq.n	800542a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d01c      	beq.n	80053e8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053ae:	4b19      	ldr	r3, [pc, #100]	; (8005414 <HAL_RCC_OscConfig+0x27c>)
 80053b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053b4:	4a17      	ldr	r2, [pc, #92]	; (8005414 <HAL_RCC_OscConfig+0x27c>)
 80053b6:	f043 0301 	orr.w	r3, r3, #1
 80053ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053be:	f7fd fbe7 	bl	8002b90 <HAL_GetTick>
 80053c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053c4:	e008      	b.n	80053d8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053c6:	f7fd fbe3 	bl	8002b90 <HAL_GetTick>
 80053ca:	4602      	mov	r2, r0
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d901      	bls.n	80053d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e1ef      	b.n	80057b8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053d8:	4b0e      	ldr	r3, [pc, #56]	; (8005414 <HAL_RCC_OscConfig+0x27c>)
 80053da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053de:	f003 0302 	and.w	r3, r3, #2
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d0ef      	beq.n	80053c6 <HAL_RCC_OscConfig+0x22e>
 80053e6:	e020      	b.n	800542a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053e8:	4b0a      	ldr	r3, [pc, #40]	; (8005414 <HAL_RCC_OscConfig+0x27c>)
 80053ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053ee:	4a09      	ldr	r2, [pc, #36]	; (8005414 <HAL_RCC_OscConfig+0x27c>)
 80053f0:	f023 0301 	bic.w	r3, r3, #1
 80053f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053f8:	f7fd fbca 	bl	8002b90 <HAL_GetTick>
 80053fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053fe:	e00d      	b.n	800541c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005400:	f7fd fbc6 	bl	8002b90 <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	2b02      	cmp	r3, #2
 800540c:	d906      	bls.n	800541c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e1d2      	b.n	80057b8 <HAL_RCC_OscConfig+0x620>
 8005412:	bf00      	nop
 8005414:	40021000 	.word	0x40021000
 8005418:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800541c:	4b8c      	ldr	r3, [pc, #560]	; (8005650 <HAL_RCC_OscConfig+0x4b8>)
 800541e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005422:	f003 0302 	and.w	r3, r3, #2
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1ea      	bne.n	8005400 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0304 	and.w	r3, r3, #4
 8005432:	2b00      	cmp	r3, #0
 8005434:	f000 80a6 	beq.w	8005584 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005438:	2300      	movs	r3, #0
 800543a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800543c:	4b84      	ldr	r3, [pc, #528]	; (8005650 <HAL_RCC_OscConfig+0x4b8>)
 800543e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d101      	bne.n	800544c <HAL_RCC_OscConfig+0x2b4>
 8005448:	2301      	movs	r3, #1
 800544a:	e000      	b.n	800544e <HAL_RCC_OscConfig+0x2b6>
 800544c:	2300      	movs	r3, #0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00d      	beq.n	800546e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005452:	4b7f      	ldr	r3, [pc, #508]	; (8005650 <HAL_RCC_OscConfig+0x4b8>)
 8005454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005456:	4a7e      	ldr	r2, [pc, #504]	; (8005650 <HAL_RCC_OscConfig+0x4b8>)
 8005458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800545c:	6593      	str	r3, [r2, #88]	; 0x58
 800545e:	4b7c      	ldr	r3, [pc, #496]	; (8005650 <HAL_RCC_OscConfig+0x4b8>)
 8005460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005466:	60fb      	str	r3, [r7, #12]
 8005468:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800546a:	2301      	movs	r3, #1
 800546c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800546e:	4b79      	ldr	r3, [pc, #484]	; (8005654 <HAL_RCC_OscConfig+0x4bc>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005476:	2b00      	cmp	r3, #0
 8005478:	d118      	bne.n	80054ac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800547a:	4b76      	ldr	r3, [pc, #472]	; (8005654 <HAL_RCC_OscConfig+0x4bc>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a75      	ldr	r2, [pc, #468]	; (8005654 <HAL_RCC_OscConfig+0x4bc>)
 8005480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005484:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005486:	f7fd fb83 	bl	8002b90 <HAL_GetTick>
 800548a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800548c:	e008      	b.n	80054a0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800548e:	f7fd fb7f 	bl	8002b90 <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	2b02      	cmp	r3, #2
 800549a:	d901      	bls.n	80054a0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e18b      	b.n	80057b8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054a0:	4b6c      	ldr	r3, [pc, #432]	; (8005654 <HAL_RCC_OscConfig+0x4bc>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d0f0      	beq.n	800548e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d108      	bne.n	80054c6 <HAL_RCC_OscConfig+0x32e>
 80054b4:	4b66      	ldr	r3, [pc, #408]	; (8005650 <HAL_RCC_OscConfig+0x4b8>)
 80054b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ba:	4a65      	ldr	r2, [pc, #404]	; (8005650 <HAL_RCC_OscConfig+0x4b8>)
 80054bc:	f043 0301 	orr.w	r3, r3, #1
 80054c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80054c4:	e024      	b.n	8005510 <HAL_RCC_OscConfig+0x378>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	2b05      	cmp	r3, #5
 80054cc:	d110      	bne.n	80054f0 <HAL_RCC_OscConfig+0x358>
 80054ce:	4b60      	ldr	r3, [pc, #384]	; (8005650 <HAL_RCC_OscConfig+0x4b8>)
 80054d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d4:	4a5e      	ldr	r2, [pc, #376]	; (8005650 <HAL_RCC_OscConfig+0x4b8>)
 80054d6:	f043 0304 	orr.w	r3, r3, #4
 80054da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80054de:	4b5c      	ldr	r3, [pc, #368]	; (8005650 <HAL_RCC_OscConfig+0x4b8>)
 80054e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054e4:	4a5a      	ldr	r2, [pc, #360]	; (8005650 <HAL_RCC_OscConfig+0x4b8>)
 80054e6:	f043 0301 	orr.w	r3, r3, #1
 80054ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80054ee:	e00f      	b.n	8005510 <HAL_RCC_OscConfig+0x378>
 80054f0:	4b57      	ldr	r3, [pc, #348]	; (8005650 <HAL_RCC_OscConfig+0x4b8>)
 80054f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f6:	4a56      	ldr	r2, [pc, #344]	; (8005650 <HAL_RCC_OscConfig+0x4b8>)
 80054f8:	f023 0301 	bic.w	r3, r3, #1
 80054fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005500:	4b53      	ldr	r3, [pc, #332]	; (8005650 <HAL_RCC_OscConfig+0x4b8>)
 8005502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005506:	4a52      	ldr	r2, [pc, #328]	; (8005650 <HAL_RCC_OscConfig+0x4b8>)
 8005508:	f023 0304 	bic.w	r3, r3, #4
 800550c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d016      	beq.n	8005546 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005518:	f7fd fb3a 	bl	8002b90 <HAL_GetTick>
 800551c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800551e:	e00a      	b.n	8005536 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005520:	f7fd fb36 	bl	8002b90 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	f241 3288 	movw	r2, #5000	; 0x1388
 800552e:	4293      	cmp	r3, r2
 8005530:	d901      	bls.n	8005536 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e140      	b.n	80057b8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005536:	4b46      	ldr	r3, [pc, #280]	; (8005650 <HAL_RCC_OscConfig+0x4b8>)
 8005538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800553c:	f003 0302 	and.w	r3, r3, #2
 8005540:	2b00      	cmp	r3, #0
 8005542:	d0ed      	beq.n	8005520 <HAL_RCC_OscConfig+0x388>
 8005544:	e015      	b.n	8005572 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005546:	f7fd fb23 	bl	8002b90 <HAL_GetTick>
 800554a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800554c:	e00a      	b.n	8005564 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800554e:	f7fd fb1f 	bl	8002b90 <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	f241 3288 	movw	r2, #5000	; 0x1388
 800555c:	4293      	cmp	r3, r2
 800555e:	d901      	bls.n	8005564 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	e129      	b.n	80057b8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005564:	4b3a      	ldr	r3, [pc, #232]	; (8005650 <HAL_RCC_OscConfig+0x4b8>)
 8005566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1ed      	bne.n	800554e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005572:	7ffb      	ldrb	r3, [r7, #31]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d105      	bne.n	8005584 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005578:	4b35      	ldr	r3, [pc, #212]	; (8005650 <HAL_RCC_OscConfig+0x4b8>)
 800557a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800557c:	4a34      	ldr	r2, [pc, #208]	; (8005650 <HAL_RCC_OscConfig+0x4b8>)
 800557e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005582:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0320 	and.w	r3, r3, #32
 800558c:	2b00      	cmp	r3, #0
 800558e:	d03c      	beq.n	800560a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d01c      	beq.n	80055d2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005598:	4b2d      	ldr	r3, [pc, #180]	; (8005650 <HAL_RCC_OscConfig+0x4b8>)
 800559a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800559e:	4a2c      	ldr	r2, [pc, #176]	; (8005650 <HAL_RCC_OscConfig+0x4b8>)
 80055a0:	f043 0301 	orr.w	r3, r3, #1
 80055a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055a8:	f7fd faf2 	bl	8002b90 <HAL_GetTick>
 80055ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80055ae:	e008      	b.n	80055c2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055b0:	f7fd faee 	bl	8002b90 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d901      	bls.n	80055c2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e0fa      	b.n	80057b8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80055c2:	4b23      	ldr	r3, [pc, #140]	; (8005650 <HAL_RCC_OscConfig+0x4b8>)
 80055c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055c8:	f003 0302 	and.w	r3, r3, #2
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d0ef      	beq.n	80055b0 <HAL_RCC_OscConfig+0x418>
 80055d0:	e01b      	b.n	800560a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80055d2:	4b1f      	ldr	r3, [pc, #124]	; (8005650 <HAL_RCC_OscConfig+0x4b8>)
 80055d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055d8:	4a1d      	ldr	r2, [pc, #116]	; (8005650 <HAL_RCC_OscConfig+0x4b8>)
 80055da:	f023 0301 	bic.w	r3, r3, #1
 80055de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055e2:	f7fd fad5 	bl	8002b90 <HAL_GetTick>
 80055e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80055e8:	e008      	b.n	80055fc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055ea:	f7fd fad1 	bl	8002b90 <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d901      	bls.n	80055fc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e0dd      	b.n	80057b8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80055fc:	4b14      	ldr	r3, [pc, #80]	; (8005650 <HAL_RCC_OscConfig+0x4b8>)
 80055fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1ef      	bne.n	80055ea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	69db      	ldr	r3, [r3, #28]
 800560e:	2b00      	cmp	r3, #0
 8005610:	f000 80d1 	beq.w	80057b6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005614:	4b0e      	ldr	r3, [pc, #56]	; (8005650 <HAL_RCC_OscConfig+0x4b8>)
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f003 030c 	and.w	r3, r3, #12
 800561c:	2b0c      	cmp	r3, #12
 800561e:	f000 808b 	beq.w	8005738 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	69db      	ldr	r3, [r3, #28]
 8005626:	2b02      	cmp	r3, #2
 8005628:	d15e      	bne.n	80056e8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800562a:	4b09      	ldr	r3, [pc, #36]	; (8005650 <HAL_RCC_OscConfig+0x4b8>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a08      	ldr	r2, [pc, #32]	; (8005650 <HAL_RCC_OscConfig+0x4b8>)
 8005630:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005634:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005636:	f7fd faab 	bl	8002b90 <HAL_GetTick>
 800563a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800563c:	e00c      	b.n	8005658 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800563e:	f7fd faa7 	bl	8002b90 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	2b02      	cmp	r3, #2
 800564a:	d905      	bls.n	8005658 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e0b3      	b.n	80057b8 <HAL_RCC_OscConfig+0x620>
 8005650:	40021000 	.word	0x40021000
 8005654:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005658:	4b59      	ldr	r3, [pc, #356]	; (80057c0 <HAL_RCC_OscConfig+0x628>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d1ec      	bne.n	800563e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005664:	4b56      	ldr	r3, [pc, #344]	; (80057c0 <HAL_RCC_OscConfig+0x628>)
 8005666:	68da      	ldr	r2, [r3, #12]
 8005668:	4b56      	ldr	r3, [pc, #344]	; (80057c4 <HAL_RCC_OscConfig+0x62c>)
 800566a:	4013      	ands	r3, r2
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	6a11      	ldr	r1, [r2, #32]
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005674:	3a01      	subs	r2, #1
 8005676:	0112      	lsls	r2, r2, #4
 8005678:	4311      	orrs	r1, r2
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800567e:	0212      	lsls	r2, r2, #8
 8005680:	4311      	orrs	r1, r2
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005686:	0852      	lsrs	r2, r2, #1
 8005688:	3a01      	subs	r2, #1
 800568a:	0552      	lsls	r2, r2, #21
 800568c:	4311      	orrs	r1, r2
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005692:	0852      	lsrs	r2, r2, #1
 8005694:	3a01      	subs	r2, #1
 8005696:	0652      	lsls	r2, r2, #25
 8005698:	4311      	orrs	r1, r2
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800569e:	06d2      	lsls	r2, r2, #27
 80056a0:	430a      	orrs	r2, r1
 80056a2:	4947      	ldr	r1, [pc, #284]	; (80057c0 <HAL_RCC_OscConfig+0x628>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056a8:	4b45      	ldr	r3, [pc, #276]	; (80057c0 <HAL_RCC_OscConfig+0x628>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a44      	ldr	r2, [pc, #272]	; (80057c0 <HAL_RCC_OscConfig+0x628>)
 80056ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056b2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80056b4:	4b42      	ldr	r3, [pc, #264]	; (80057c0 <HAL_RCC_OscConfig+0x628>)
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	4a41      	ldr	r2, [pc, #260]	; (80057c0 <HAL_RCC_OscConfig+0x628>)
 80056ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c0:	f7fd fa66 	bl	8002b90 <HAL_GetTick>
 80056c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056c6:	e008      	b.n	80056da <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056c8:	f7fd fa62 	bl	8002b90 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d901      	bls.n	80056da <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e06e      	b.n	80057b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056da:	4b39      	ldr	r3, [pc, #228]	; (80057c0 <HAL_RCC_OscConfig+0x628>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d0f0      	beq.n	80056c8 <HAL_RCC_OscConfig+0x530>
 80056e6:	e066      	b.n	80057b6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056e8:	4b35      	ldr	r3, [pc, #212]	; (80057c0 <HAL_RCC_OscConfig+0x628>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a34      	ldr	r2, [pc, #208]	; (80057c0 <HAL_RCC_OscConfig+0x628>)
 80056ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056f2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80056f4:	4b32      	ldr	r3, [pc, #200]	; (80057c0 <HAL_RCC_OscConfig+0x628>)
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	4a31      	ldr	r2, [pc, #196]	; (80057c0 <HAL_RCC_OscConfig+0x628>)
 80056fa:	f023 0303 	bic.w	r3, r3, #3
 80056fe:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005700:	4b2f      	ldr	r3, [pc, #188]	; (80057c0 <HAL_RCC_OscConfig+0x628>)
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	4a2e      	ldr	r2, [pc, #184]	; (80057c0 <HAL_RCC_OscConfig+0x628>)
 8005706:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800570a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800570e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005710:	f7fd fa3e 	bl	8002b90 <HAL_GetTick>
 8005714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005716:	e008      	b.n	800572a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005718:	f7fd fa3a 	bl	8002b90 <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	2b02      	cmp	r3, #2
 8005724:	d901      	bls.n	800572a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e046      	b.n	80057b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800572a:	4b25      	ldr	r3, [pc, #148]	; (80057c0 <HAL_RCC_OscConfig+0x628>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1f0      	bne.n	8005718 <HAL_RCC_OscConfig+0x580>
 8005736:	e03e      	b.n	80057b6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	69db      	ldr	r3, [r3, #28]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d101      	bne.n	8005744 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e039      	b.n	80057b8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005744:	4b1e      	ldr	r3, [pc, #120]	; (80057c0 <HAL_RCC_OscConfig+0x628>)
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	f003 0203 	and.w	r2, r3, #3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a1b      	ldr	r3, [r3, #32]
 8005754:	429a      	cmp	r2, r3
 8005756:	d12c      	bne.n	80057b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005762:	3b01      	subs	r3, #1
 8005764:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005766:	429a      	cmp	r2, r3
 8005768:	d123      	bne.n	80057b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005774:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005776:	429a      	cmp	r2, r3
 8005778:	d11b      	bne.n	80057b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005784:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005786:	429a      	cmp	r2, r3
 8005788:	d113      	bne.n	80057b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005794:	085b      	lsrs	r3, r3, #1
 8005796:	3b01      	subs	r3, #1
 8005798:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800579a:	429a      	cmp	r2, r3
 800579c:	d109      	bne.n	80057b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057a8:	085b      	lsrs	r3, r3, #1
 80057aa:	3b01      	subs	r3, #1
 80057ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d001      	beq.n	80057b6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e000      	b.n	80057b8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3720      	adds	r7, #32
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	40021000 	.word	0x40021000
 80057c4:	019f800c 	.word	0x019f800c

080057c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80057d2:	2300      	movs	r3, #0
 80057d4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d101      	bne.n	80057e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e11e      	b.n	8005a1e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80057e0:	4b91      	ldr	r3, [pc, #580]	; (8005a28 <HAL_RCC_ClockConfig+0x260>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 030f 	and.w	r3, r3, #15
 80057e8:	683a      	ldr	r2, [r7, #0]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d910      	bls.n	8005810 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ee:	4b8e      	ldr	r3, [pc, #568]	; (8005a28 <HAL_RCC_ClockConfig+0x260>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f023 020f 	bic.w	r2, r3, #15
 80057f6:	498c      	ldr	r1, [pc, #560]	; (8005a28 <HAL_RCC_ClockConfig+0x260>)
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057fe:	4b8a      	ldr	r3, [pc, #552]	; (8005a28 <HAL_RCC_ClockConfig+0x260>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 030f 	and.w	r3, r3, #15
 8005806:	683a      	ldr	r2, [r7, #0]
 8005808:	429a      	cmp	r2, r3
 800580a:	d001      	beq.n	8005810 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e106      	b.n	8005a1e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0301 	and.w	r3, r3, #1
 8005818:	2b00      	cmp	r3, #0
 800581a:	d073      	beq.n	8005904 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	2b03      	cmp	r3, #3
 8005822:	d129      	bne.n	8005878 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005824:	4b81      	ldr	r3, [pc, #516]	; (8005a2c <HAL_RCC_ClockConfig+0x264>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d101      	bne.n	8005834 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e0f4      	b.n	8005a1e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005834:	f000 f9d0 	bl	8005bd8 <RCC_GetSysClockFreqFromPLLSource>
 8005838:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	4a7c      	ldr	r2, [pc, #496]	; (8005a30 <HAL_RCC_ClockConfig+0x268>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d93f      	bls.n	80058c2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005842:	4b7a      	ldr	r3, [pc, #488]	; (8005a2c <HAL_RCC_ClockConfig+0x264>)
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d009      	beq.n	8005862 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005856:	2b00      	cmp	r3, #0
 8005858:	d033      	beq.n	80058c2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800585e:	2b00      	cmp	r3, #0
 8005860:	d12f      	bne.n	80058c2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005862:	4b72      	ldr	r3, [pc, #456]	; (8005a2c <HAL_RCC_ClockConfig+0x264>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800586a:	4a70      	ldr	r2, [pc, #448]	; (8005a2c <HAL_RCC_ClockConfig+0x264>)
 800586c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005870:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005872:	2380      	movs	r3, #128	; 0x80
 8005874:	617b      	str	r3, [r7, #20]
 8005876:	e024      	b.n	80058c2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	2b02      	cmp	r3, #2
 800587e:	d107      	bne.n	8005890 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005880:	4b6a      	ldr	r3, [pc, #424]	; (8005a2c <HAL_RCC_ClockConfig+0x264>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d109      	bne.n	80058a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e0c6      	b.n	8005a1e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005890:	4b66      	ldr	r3, [pc, #408]	; (8005a2c <HAL_RCC_ClockConfig+0x264>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005898:	2b00      	cmp	r3, #0
 800589a:	d101      	bne.n	80058a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e0be      	b.n	8005a1e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80058a0:	f000 f8ce 	bl	8005a40 <HAL_RCC_GetSysClockFreq>
 80058a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	4a61      	ldr	r2, [pc, #388]	; (8005a30 <HAL_RCC_ClockConfig+0x268>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d909      	bls.n	80058c2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80058ae:	4b5f      	ldr	r3, [pc, #380]	; (8005a2c <HAL_RCC_ClockConfig+0x264>)
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058b6:	4a5d      	ldr	r2, [pc, #372]	; (8005a2c <HAL_RCC_ClockConfig+0x264>)
 80058b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058bc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80058be:	2380      	movs	r3, #128	; 0x80
 80058c0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80058c2:	4b5a      	ldr	r3, [pc, #360]	; (8005a2c <HAL_RCC_ClockConfig+0x264>)
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f023 0203 	bic.w	r2, r3, #3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	4957      	ldr	r1, [pc, #348]	; (8005a2c <HAL_RCC_ClockConfig+0x264>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058d4:	f7fd f95c 	bl	8002b90 <HAL_GetTick>
 80058d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058da:	e00a      	b.n	80058f2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058dc:	f7fd f958 	bl	8002b90 <HAL_GetTick>
 80058e0:	4602      	mov	r2, r0
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d901      	bls.n	80058f2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	e095      	b.n	8005a1e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058f2:	4b4e      	ldr	r3, [pc, #312]	; (8005a2c <HAL_RCC_ClockConfig+0x264>)
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f003 020c 	and.w	r2, r3, #12
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	429a      	cmp	r2, r3
 8005902:	d1eb      	bne.n	80058dc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0302 	and.w	r3, r3, #2
 800590c:	2b00      	cmp	r3, #0
 800590e:	d023      	beq.n	8005958 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0304 	and.w	r3, r3, #4
 8005918:	2b00      	cmp	r3, #0
 800591a:	d005      	beq.n	8005928 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800591c:	4b43      	ldr	r3, [pc, #268]	; (8005a2c <HAL_RCC_ClockConfig+0x264>)
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	4a42      	ldr	r2, [pc, #264]	; (8005a2c <HAL_RCC_ClockConfig+0x264>)
 8005922:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005926:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0308 	and.w	r3, r3, #8
 8005930:	2b00      	cmp	r3, #0
 8005932:	d007      	beq.n	8005944 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005934:	4b3d      	ldr	r3, [pc, #244]	; (8005a2c <HAL_RCC_ClockConfig+0x264>)
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800593c:	4a3b      	ldr	r2, [pc, #236]	; (8005a2c <HAL_RCC_ClockConfig+0x264>)
 800593e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005942:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005944:	4b39      	ldr	r3, [pc, #228]	; (8005a2c <HAL_RCC_ClockConfig+0x264>)
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	4936      	ldr	r1, [pc, #216]	; (8005a2c <HAL_RCC_ClockConfig+0x264>)
 8005952:	4313      	orrs	r3, r2
 8005954:	608b      	str	r3, [r1, #8]
 8005956:	e008      	b.n	800596a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	2b80      	cmp	r3, #128	; 0x80
 800595c:	d105      	bne.n	800596a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800595e:	4b33      	ldr	r3, [pc, #204]	; (8005a2c <HAL_RCC_ClockConfig+0x264>)
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	4a32      	ldr	r2, [pc, #200]	; (8005a2c <HAL_RCC_ClockConfig+0x264>)
 8005964:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005968:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800596a:	4b2f      	ldr	r3, [pc, #188]	; (8005a28 <HAL_RCC_ClockConfig+0x260>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 030f 	and.w	r3, r3, #15
 8005972:	683a      	ldr	r2, [r7, #0]
 8005974:	429a      	cmp	r2, r3
 8005976:	d21d      	bcs.n	80059b4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005978:	4b2b      	ldr	r3, [pc, #172]	; (8005a28 <HAL_RCC_ClockConfig+0x260>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f023 020f 	bic.w	r2, r3, #15
 8005980:	4929      	ldr	r1, [pc, #164]	; (8005a28 <HAL_RCC_ClockConfig+0x260>)
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	4313      	orrs	r3, r2
 8005986:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005988:	f7fd f902 	bl	8002b90 <HAL_GetTick>
 800598c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800598e:	e00a      	b.n	80059a6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005990:	f7fd f8fe 	bl	8002b90 <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	f241 3288 	movw	r2, #5000	; 0x1388
 800599e:	4293      	cmp	r3, r2
 80059a0:	d901      	bls.n	80059a6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e03b      	b.n	8005a1e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059a6:	4b20      	ldr	r3, [pc, #128]	; (8005a28 <HAL_RCC_ClockConfig+0x260>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 030f 	and.w	r3, r3, #15
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d1ed      	bne.n	8005990 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0304 	and.w	r3, r3, #4
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d008      	beq.n	80059d2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059c0:	4b1a      	ldr	r3, [pc, #104]	; (8005a2c <HAL_RCC_ClockConfig+0x264>)
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	4917      	ldr	r1, [pc, #92]	; (8005a2c <HAL_RCC_ClockConfig+0x264>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0308 	and.w	r3, r3, #8
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d009      	beq.n	80059f2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059de:	4b13      	ldr	r3, [pc, #76]	; (8005a2c <HAL_RCC_ClockConfig+0x264>)
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	00db      	lsls	r3, r3, #3
 80059ec:	490f      	ldr	r1, [pc, #60]	; (8005a2c <HAL_RCC_ClockConfig+0x264>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80059f2:	f000 f825 	bl	8005a40 <HAL_RCC_GetSysClockFreq>
 80059f6:	4602      	mov	r2, r0
 80059f8:	4b0c      	ldr	r3, [pc, #48]	; (8005a2c <HAL_RCC_ClockConfig+0x264>)
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	091b      	lsrs	r3, r3, #4
 80059fe:	f003 030f 	and.w	r3, r3, #15
 8005a02:	490c      	ldr	r1, [pc, #48]	; (8005a34 <HAL_RCC_ClockConfig+0x26c>)
 8005a04:	5ccb      	ldrb	r3, [r1, r3]
 8005a06:	f003 031f 	and.w	r3, r3, #31
 8005a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a0e:	4a0a      	ldr	r2, [pc, #40]	; (8005a38 <HAL_RCC_ClockConfig+0x270>)
 8005a10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005a12:	4b0a      	ldr	r3, [pc, #40]	; (8005a3c <HAL_RCC_ClockConfig+0x274>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7fc fb88 	bl	800212c <HAL_InitTick>
 8005a1c:	4603      	mov	r3, r0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3718      	adds	r7, #24
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	40022000 	.word	0x40022000
 8005a2c:	40021000 	.word	0x40021000
 8005a30:	04c4b400 	.word	0x04c4b400
 8005a34:	0800d418 	.word	0x0800d418
 8005a38:	20000000 	.word	0x20000000
 8005a3c:	20000004 	.word	0x20000004

08005a40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b087      	sub	sp, #28
 8005a44:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005a46:	4b2c      	ldr	r3, [pc, #176]	; (8005af8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f003 030c 	and.w	r3, r3, #12
 8005a4e:	2b04      	cmp	r3, #4
 8005a50:	d102      	bne.n	8005a58 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005a52:	4b2a      	ldr	r3, [pc, #168]	; (8005afc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a54:	613b      	str	r3, [r7, #16]
 8005a56:	e047      	b.n	8005ae8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005a58:	4b27      	ldr	r3, [pc, #156]	; (8005af8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f003 030c 	and.w	r3, r3, #12
 8005a60:	2b08      	cmp	r3, #8
 8005a62:	d102      	bne.n	8005a6a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005a64:	4b26      	ldr	r3, [pc, #152]	; (8005b00 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a66:	613b      	str	r3, [r7, #16]
 8005a68:	e03e      	b.n	8005ae8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005a6a:	4b23      	ldr	r3, [pc, #140]	; (8005af8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f003 030c 	and.w	r3, r3, #12
 8005a72:	2b0c      	cmp	r3, #12
 8005a74:	d136      	bne.n	8005ae4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a76:	4b20      	ldr	r3, [pc, #128]	; (8005af8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	f003 0303 	and.w	r3, r3, #3
 8005a7e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a80:	4b1d      	ldr	r3, [pc, #116]	; (8005af8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	091b      	lsrs	r3, r3, #4
 8005a86:	f003 030f 	and.w	r3, r3, #15
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2b03      	cmp	r3, #3
 8005a92:	d10c      	bne.n	8005aae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a94:	4a1a      	ldr	r2, [pc, #104]	; (8005b00 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a9c:	4a16      	ldr	r2, [pc, #88]	; (8005af8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a9e:	68d2      	ldr	r2, [r2, #12]
 8005aa0:	0a12      	lsrs	r2, r2, #8
 8005aa2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005aa6:	fb02 f303 	mul.w	r3, r2, r3
 8005aaa:	617b      	str	r3, [r7, #20]
      break;
 8005aac:	e00c      	b.n	8005ac8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005aae:	4a13      	ldr	r2, [pc, #76]	; (8005afc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ab6:	4a10      	ldr	r2, [pc, #64]	; (8005af8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ab8:	68d2      	ldr	r2, [r2, #12]
 8005aba:	0a12      	lsrs	r2, r2, #8
 8005abc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ac0:	fb02 f303 	mul.w	r3, r2, r3
 8005ac4:	617b      	str	r3, [r7, #20]
      break;
 8005ac6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ac8:	4b0b      	ldr	r3, [pc, #44]	; (8005af8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	0e5b      	lsrs	r3, r3, #25
 8005ace:	f003 0303 	and.w	r3, r3, #3
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	005b      	lsls	r3, r3, #1
 8005ad6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005ad8:	697a      	ldr	r2, [r7, #20]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ae0:	613b      	str	r3, [r7, #16]
 8005ae2:	e001      	b.n	8005ae8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005ae8:	693b      	ldr	r3, [r7, #16]
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	371c      	adds	r7, #28
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	40021000 	.word	0x40021000
 8005afc:	00f42400 	.word	0x00f42400
 8005b00:	016e3600 	.word	0x016e3600

08005b04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b04:	b480      	push	{r7}
 8005b06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b08:	4b03      	ldr	r3, [pc, #12]	; (8005b18 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	20000000 	.word	0x20000000

08005b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005b20:	f7ff fff0 	bl	8005b04 <HAL_RCC_GetHCLKFreq>
 8005b24:	4602      	mov	r2, r0
 8005b26:	4b06      	ldr	r3, [pc, #24]	; (8005b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	0a1b      	lsrs	r3, r3, #8
 8005b2c:	f003 0307 	and.w	r3, r3, #7
 8005b30:	4904      	ldr	r1, [pc, #16]	; (8005b44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b32:	5ccb      	ldrb	r3, [r1, r3]
 8005b34:	f003 031f 	and.w	r3, r3, #31
 8005b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	40021000 	.word	0x40021000
 8005b44:	0800d428 	.word	0x0800d428

08005b48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005b4c:	f7ff ffda 	bl	8005b04 <HAL_RCC_GetHCLKFreq>
 8005b50:	4602      	mov	r2, r0
 8005b52:	4b06      	ldr	r3, [pc, #24]	; (8005b6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	0adb      	lsrs	r3, r3, #11
 8005b58:	f003 0307 	and.w	r3, r3, #7
 8005b5c:	4904      	ldr	r1, [pc, #16]	; (8005b70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b5e:	5ccb      	ldrb	r3, [r1, r3]
 8005b60:	f003 031f 	and.w	r3, r3, #31
 8005b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	40021000 	.word	0x40021000
 8005b70:	0800d428 	.word	0x0800d428

08005b74 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	220f      	movs	r2, #15
 8005b82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005b84:	4b12      	ldr	r3, [pc, #72]	; (8005bd0 <HAL_RCC_GetClockConfig+0x5c>)
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f003 0203 	and.w	r2, r3, #3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005b90:	4b0f      	ldr	r3, [pc, #60]	; (8005bd0 <HAL_RCC_GetClockConfig+0x5c>)
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005b9c:	4b0c      	ldr	r3, [pc, #48]	; (8005bd0 <HAL_RCC_GetClockConfig+0x5c>)
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005ba8:	4b09      	ldr	r3, [pc, #36]	; (8005bd0 <HAL_RCC_GetClockConfig+0x5c>)
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	08db      	lsrs	r3, r3, #3
 8005bae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005bb6:	4b07      	ldr	r3, [pc, #28]	; (8005bd4 <HAL_RCC_GetClockConfig+0x60>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 020f 	and.w	r2, r3, #15
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	601a      	str	r2, [r3, #0]
}
 8005bc2:	bf00      	nop
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	40021000 	.word	0x40021000
 8005bd4:	40022000 	.word	0x40022000

08005bd8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b087      	sub	sp, #28
 8005bdc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005bde:	4b1e      	ldr	r3, [pc, #120]	; (8005c58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	f003 0303 	and.w	r3, r3, #3
 8005be6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005be8:	4b1b      	ldr	r3, [pc, #108]	; (8005c58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	091b      	lsrs	r3, r3, #4
 8005bee:	f003 030f 	and.w	r3, r3, #15
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	2b03      	cmp	r3, #3
 8005bfa:	d10c      	bne.n	8005c16 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005bfc:	4a17      	ldr	r2, [pc, #92]	; (8005c5c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c04:	4a14      	ldr	r2, [pc, #80]	; (8005c58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c06:	68d2      	ldr	r2, [r2, #12]
 8005c08:	0a12      	lsrs	r2, r2, #8
 8005c0a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005c0e:	fb02 f303 	mul.w	r3, r2, r3
 8005c12:	617b      	str	r3, [r7, #20]
    break;
 8005c14:	e00c      	b.n	8005c30 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c16:	4a12      	ldr	r2, [pc, #72]	; (8005c60 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c1e:	4a0e      	ldr	r2, [pc, #56]	; (8005c58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c20:	68d2      	ldr	r2, [r2, #12]
 8005c22:	0a12      	lsrs	r2, r2, #8
 8005c24:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005c28:	fb02 f303 	mul.w	r3, r2, r3
 8005c2c:	617b      	str	r3, [r7, #20]
    break;
 8005c2e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c30:	4b09      	ldr	r3, [pc, #36]	; (8005c58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	0e5b      	lsrs	r3, r3, #25
 8005c36:	f003 0303 	and.w	r3, r3, #3
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	005b      	lsls	r3, r3, #1
 8005c3e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c48:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005c4a:	687b      	ldr	r3, [r7, #4]
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	371c      	adds	r7, #28
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr
 8005c58:	40021000 	.word	0x40021000
 8005c5c:	016e3600 	.word	0x016e3600
 8005c60:	00f42400 	.word	0x00f42400

08005c64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b086      	sub	sp, #24
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c70:	2300      	movs	r3, #0
 8005c72:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	f000 8098 	beq.w	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c82:	2300      	movs	r3, #0
 8005c84:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c86:	4b43      	ldr	r3, [pc, #268]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d10d      	bne.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c92:	4b40      	ldr	r3, [pc, #256]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c96:	4a3f      	ldr	r2, [pc, #252]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c9c:	6593      	str	r3, [r2, #88]	; 0x58
 8005c9e:	4b3d      	ldr	r3, [pc, #244]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ca6:	60bb      	str	r3, [r7, #8]
 8005ca8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005caa:	2301      	movs	r3, #1
 8005cac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005cae:	4b3a      	ldr	r3, [pc, #232]	; (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a39      	ldr	r2, [pc, #228]	; (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cb8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005cba:	f7fc ff69 	bl	8002b90 <HAL_GetTick>
 8005cbe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cc0:	e009      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cc2:	f7fc ff65 	bl	8002b90 <HAL_GetTick>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d902      	bls.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	74fb      	strb	r3, [r7, #19]
        break;
 8005cd4:	e005      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cd6:	4b30      	ldr	r3, [pc, #192]	; (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d0ef      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005ce2:	7cfb      	ldrb	r3, [r7, #19]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d159      	bne.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005ce8:	4b2a      	ldr	r3, [pc, #168]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cf2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d01e      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d019      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005d04:	4b23      	ldr	r3, [pc, #140]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d10:	4b20      	ldr	r3, [pc, #128]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d16:	4a1f      	ldr	r2, [pc, #124]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d20:	4b1c      	ldr	r3, [pc, #112]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d26:	4a1b      	ldr	r2, [pc, #108]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005d30:	4a18      	ldr	r2, [pc, #96]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d016      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d42:	f7fc ff25 	bl	8002b90 <HAL_GetTick>
 8005d46:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d48:	e00b      	b.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d4a:	f7fc ff21 	bl	8002b90 <HAL_GetTick>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d902      	bls.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	74fb      	strb	r3, [r7, #19]
            break;
 8005d60:	e006      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d62:	4b0c      	ldr	r3, [pc, #48]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d68:	f003 0302 	and.w	r3, r3, #2
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d0ec      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005d70:	7cfb      	ldrb	r3, [r7, #19]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d10b      	bne.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d76:	4b07      	ldr	r3, [pc, #28]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d84:	4903      	ldr	r1, [pc, #12]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d86:	4313      	orrs	r3, r2
 8005d88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005d8c:	e008      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d8e:	7cfb      	ldrb	r3, [r7, #19]
 8005d90:	74bb      	strb	r3, [r7, #18]
 8005d92:	e005      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005d94:	40021000 	.word	0x40021000
 8005d98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d9c:	7cfb      	ldrb	r3, [r7, #19]
 8005d9e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005da0:	7c7b      	ldrb	r3, [r7, #17]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d105      	bne.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005da6:	4ba7      	ldr	r3, [pc, #668]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005daa:	4aa6      	ldr	r2, [pc, #664]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005db0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00a      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005dbe:	4ba1      	ldr	r3, [pc, #644]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dc4:	f023 0203 	bic.w	r2, r3, #3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	499d      	ldr	r1, [pc, #628]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 0302 	and.w	r3, r3, #2
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d00a      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005de0:	4b98      	ldr	r3, [pc, #608]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de6:	f023 020c 	bic.w	r2, r3, #12
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	4995      	ldr	r1, [pc, #596]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005df0:	4313      	orrs	r3, r2
 8005df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0304 	and.w	r3, r3, #4
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00a      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005e02:	4b90      	ldr	r3, [pc, #576]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e08:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	498c      	ldr	r1, [pc, #560]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e12:	4313      	orrs	r3, r2
 8005e14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0308 	and.w	r3, r3, #8
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00a      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005e24:	4b87      	ldr	r3, [pc, #540]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e2a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	4984      	ldr	r1, [pc, #528]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e34:	4313      	orrs	r3, r2
 8005e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0310 	and.w	r3, r3, #16
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00a      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005e46:	4b7f      	ldr	r3, [pc, #508]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	695b      	ldr	r3, [r3, #20]
 8005e54:	497b      	ldr	r1, [pc, #492]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e56:	4313      	orrs	r3, r2
 8005e58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 0320 	and.w	r3, r3, #32
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00a      	beq.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e68:	4b76      	ldr	r3, [pc, #472]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e6e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	699b      	ldr	r3, [r3, #24]
 8005e76:	4973      	ldr	r1, [pc, #460]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00a      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e8a:	4b6e      	ldr	r3, [pc, #440]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e90:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	69db      	ldr	r3, [r3, #28]
 8005e98:	496a      	ldr	r1, [pc, #424]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d00a      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005eac:	4b65      	ldr	r3, [pc, #404]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eb2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a1b      	ldr	r3, [r3, #32]
 8005eba:	4962      	ldr	r1, [pc, #392]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00a      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005ece:	4b5d      	ldr	r3, [pc, #372]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ed4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005edc:	4959      	ldr	r1, [pc, #356]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00a      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005ef0:	4b54      	ldr	r3, [pc, #336]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ef2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ef6:	f023 0203 	bic.w	r2, r3, #3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efe:	4951      	ldr	r1, [pc, #324]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00a      	beq.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f12:	4b4c      	ldr	r3, [pc, #304]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f18:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f20:	4948      	ldr	r1, [pc, #288]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f22:	4313      	orrs	r3, r2
 8005f24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d015      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f34:	4b43      	ldr	r3, [pc, #268]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f42:	4940      	ldr	r1, [pc, #256]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f52:	d105      	bne.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f54:	4b3b      	ldr	r3, [pc, #236]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	4a3a      	ldr	r2, [pc, #232]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f5e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d015      	beq.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005f6c:	4b35      	ldr	r3, [pc, #212]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f72:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f7a:	4932      	ldr	r1, [pc, #200]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f8a:	d105      	bne.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f8c:	4b2d      	ldr	r3, [pc, #180]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	4a2c      	ldr	r2, [pc, #176]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f96:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d015      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005fa4:	4b27      	ldr	r3, [pc, #156]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005faa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb2:	4924      	ldr	r1, [pc, #144]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005fc2:	d105      	bne.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fc4:	4b1f      	ldr	r3, [pc, #124]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	4a1e      	ldr	r2, [pc, #120]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fce:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d015      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005fdc:	4b19      	ldr	r3, [pc, #100]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fe2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fea:	4916      	ldr	r1, [pc, #88]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fec:	4313      	orrs	r3, r2
 8005fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ffa:	d105      	bne.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ffc:	4b11      	ldr	r3, [pc, #68]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	4a10      	ldr	r2, [pc, #64]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006002:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006006:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d019      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006014:	4b0b      	ldr	r3, [pc, #44]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800601a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006022:	4908      	ldr	r1, [pc, #32]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006024:	4313      	orrs	r3, r2
 8006026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006032:	d109      	bne.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006034:	4b03      	ldr	r3, [pc, #12]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	4a02      	ldr	r2, [pc, #8]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800603a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800603e:	60d3      	str	r3, [r2, #12]
 8006040:	e002      	b.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006042:	bf00      	nop
 8006044:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006050:	2b00      	cmp	r3, #0
 8006052:	d015      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006054:	4b29      	ldr	r3, [pc, #164]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800605a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006062:	4926      	ldr	r1, [pc, #152]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006064:	4313      	orrs	r3, r2
 8006066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800606e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006072:	d105      	bne.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006074:	4b21      	ldr	r3, [pc, #132]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	4a20      	ldr	r2, [pc, #128]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800607a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800607e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006088:	2b00      	cmp	r3, #0
 800608a:	d015      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800608c:	4b1b      	ldr	r3, [pc, #108]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800608e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006092:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800609a:	4918      	ldr	r1, [pc, #96]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800609c:	4313      	orrs	r3, r2
 800609e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060aa:	d105      	bne.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80060ac:	4b13      	ldr	r3, [pc, #76]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	4a12      	ldr	r2, [pc, #72]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060b6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d015      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80060c4:	4b0d      	ldr	r3, [pc, #52]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060d2:	490a      	ldr	r1, [pc, #40]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060d4:	4313      	orrs	r3, r2
 80060d6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060e2:	d105      	bne.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060e4:	4b05      	ldr	r3, [pc, #20]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	4a04      	ldr	r2, [pc, #16]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060ee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80060f0:	7cbb      	ldrb	r3, [r7, #18]
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3718      	adds	r7, #24
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	40021000 	.word	0x40021000

08006100 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d101      	bne.n	8006112 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e049      	b.n	80061a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006118:	b2db      	uxtb	r3, r3
 800611a:	2b00      	cmp	r3, #0
 800611c:	d106      	bne.n	800612c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f7fc fb56 	bl	80027d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2202      	movs	r2, #2
 8006130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	3304      	adds	r3, #4
 800613c:	4619      	mov	r1, r3
 800613e:	4610      	mov	r0, r2
 8006140:	f000 ff98 	bl	8007074 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3708      	adds	r7, #8
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
	...

080061b0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d001      	beq.n	80061c8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	e04c      	b.n	8006262 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2202      	movs	r2, #2
 80061cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a26      	ldr	r2, [pc, #152]	; (8006270 <HAL_TIM_Base_Start+0xc0>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d022      	beq.n	8006220 <HAL_TIM_Base_Start+0x70>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061e2:	d01d      	beq.n	8006220 <HAL_TIM_Base_Start+0x70>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a22      	ldr	r2, [pc, #136]	; (8006274 <HAL_TIM_Base_Start+0xc4>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d018      	beq.n	8006220 <HAL_TIM_Base_Start+0x70>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a21      	ldr	r2, [pc, #132]	; (8006278 <HAL_TIM_Base_Start+0xc8>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d013      	beq.n	8006220 <HAL_TIM_Base_Start+0x70>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a1f      	ldr	r2, [pc, #124]	; (800627c <HAL_TIM_Base_Start+0xcc>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d00e      	beq.n	8006220 <HAL_TIM_Base_Start+0x70>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a1e      	ldr	r2, [pc, #120]	; (8006280 <HAL_TIM_Base_Start+0xd0>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d009      	beq.n	8006220 <HAL_TIM_Base_Start+0x70>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a1c      	ldr	r2, [pc, #112]	; (8006284 <HAL_TIM_Base_Start+0xd4>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d004      	beq.n	8006220 <HAL_TIM_Base_Start+0x70>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a1b      	ldr	r2, [pc, #108]	; (8006288 <HAL_TIM_Base_Start+0xd8>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d115      	bne.n	800624c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	689a      	ldr	r2, [r3, #8]
 8006226:	4b19      	ldr	r3, [pc, #100]	; (800628c <HAL_TIM_Base_Start+0xdc>)
 8006228:	4013      	ands	r3, r2
 800622a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2b06      	cmp	r3, #6
 8006230:	d015      	beq.n	800625e <HAL_TIM_Base_Start+0xae>
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006238:	d011      	beq.n	800625e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f042 0201 	orr.w	r2, r2, #1
 8006248:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800624a:	e008      	b.n	800625e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f042 0201 	orr.w	r2, r2, #1
 800625a:	601a      	str	r2, [r3, #0]
 800625c:	e000      	b.n	8006260 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800625e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3714      	adds	r7, #20
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop
 8006270:	40012c00 	.word	0x40012c00
 8006274:	40000400 	.word	0x40000400
 8006278:	40000800 	.word	0x40000800
 800627c:	40000c00 	.word	0x40000c00
 8006280:	40013400 	.word	0x40013400
 8006284:	40014000 	.word	0x40014000
 8006288:	40015000 	.word	0x40015000
 800628c:	00010007 	.word	0x00010007

08006290 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d001      	beq.n	80062a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e054      	b.n	8006352 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2202      	movs	r2, #2
 80062ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	68da      	ldr	r2, [r3, #12]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f042 0201 	orr.w	r2, r2, #1
 80062be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a26      	ldr	r2, [pc, #152]	; (8006360 <HAL_TIM_Base_Start_IT+0xd0>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d022      	beq.n	8006310 <HAL_TIM_Base_Start_IT+0x80>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062d2:	d01d      	beq.n	8006310 <HAL_TIM_Base_Start_IT+0x80>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a22      	ldr	r2, [pc, #136]	; (8006364 <HAL_TIM_Base_Start_IT+0xd4>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d018      	beq.n	8006310 <HAL_TIM_Base_Start_IT+0x80>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a21      	ldr	r2, [pc, #132]	; (8006368 <HAL_TIM_Base_Start_IT+0xd8>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d013      	beq.n	8006310 <HAL_TIM_Base_Start_IT+0x80>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a1f      	ldr	r2, [pc, #124]	; (800636c <HAL_TIM_Base_Start_IT+0xdc>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d00e      	beq.n	8006310 <HAL_TIM_Base_Start_IT+0x80>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a1e      	ldr	r2, [pc, #120]	; (8006370 <HAL_TIM_Base_Start_IT+0xe0>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d009      	beq.n	8006310 <HAL_TIM_Base_Start_IT+0x80>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a1c      	ldr	r2, [pc, #112]	; (8006374 <HAL_TIM_Base_Start_IT+0xe4>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d004      	beq.n	8006310 <HAL_TIM_Base_Start_IT+0x80>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a1b      	ldr	r2, [pc, #108]	; (8006378 <HAL_TIM_Base_Start_IT+0xe8>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d115      	bne.n	800633c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	689a      	ldr	r2, [r3, #8]
 8006316:	4b19      	ldr	r3, [pc, #100]	; (800637c <HAL_TIM_Base_Start_IT+0xec>)
 8006318:	4013      	ands	r3, r2
 800631a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2b06      	cmp	r3, #6
 8006320:	d015      	beq.n	800634e <HAL_TIM_Base_Start_IT+0xbe>
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006328:	d011      	beq.n	800634e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f042 0201 	orr.w	r2, r2, #1
 8006338:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800633a:	e008      	b.n	800634e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f042 0201 	orr.w	r2, r2, #1
 800634a:	601a      	str	r2, [r3, #0]
 800634c:	e000      	b.n	8006350 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800634e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3714      	adds	r7, #20
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	40012c00 	.word	0x40012c00
 8006364:	40000400 	.word	0x40000400
 8006368:	40000800 	.word	0x40000800
 800636c:	40000c00 	.word	0x40000c00
 8006370:	40013400 	.word	0x40013400
 8006374:	40014000 	.word	0x40014000
 8006378:	40015000 	.word	0x40015000
 800637c:	00010007 	.word	0x00010007

08006380 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d101      	bne.n	8006392 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e049      	b.n	8006426 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006398:	b2db      	uxtb	r3, r3
 800639a:	2b00      	cmp	r3, #0
 800639c:	d106      	bne.n	80063ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f841 	bl	800642e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2202      	movs	r2, #2
 80063b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	3304      	adds	r3, #4
 80063bc:	4619      	mov	r1, r3
 80063be:	4610      	mov	r0, r2
 80063c0:	f000 fe58 	bl	8007074 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	3708      	adds	r7, #8
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800642e:	b480      	push	{r7}
 8006430:	b083      	sub	sp, #12
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006436:	bf00      	nop
 8006438:	370c      	adds	r7, #12
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
	...

08006444 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d109      	bne.n	8006468 <HAL_TIM_PWM_Start+0x24>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800645a:	b2db      	uxtb	r3, r3
 800645c:	2b01      	cmp	r3, #1
 800645e:	bf14      	ite	ne
 8006460:	2301      	movne	r3, #1
 8006462:	2300      	moveq	r3, #0
 8006464:	b2db      	uxtb	r3, r3
 8006466:	e03c      	b.n	80064e2 <HAL_TIM_PWM_Start+0x9e>
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	2b04      	cmp	r3, #4
 800646c:	d109      	bne.n	8006482 <HAL_TIM_PWM_Start+0x3e>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006474:	b2db      	uxtb	r3, r3
 8006476:	2b01      	cmp	r3, #1
 8006478:	bf14      	ite	ne
 800647a:	2301      	movne	r3, #1
 800647c:	2300      	moveq	r3, #0
 800647e:	b2db      	uxtb	r3, r3
 8006480:	e02f      	b.n	80064e2 <HAL_TIM_PWM_Start+0x9e>
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	2b08      	cmp	r3, #8
 8006486:	d109      	bne.n	800649c <HAL_TIM_PWM_Start+0x58>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800648e:	b2db      	uxtb	r3, r3
 8006490:	2b01      	cmp	r3, #1
 8006492:	bf14      	ite	ne
 8006494:	2301      	movne	r3, #1
 8006496:	2300      	moveq	r3, #0
 8006498:	b2db      	uxtb	r3, r3
 800649a:	e022      	b.n	80064e2 <HAL_TIM_PWM_Start+0x9e>
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	2b0c      	cmp	r3, #12
 80064a0:	d109      	bne.n	80064b6 <HAL_TIM_PWM_Start+0x72>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	bf14      	ite	ne
 80064ae:	2301      	movne	r3, #1
 80064b0:	2300      	moveq	r3, #0
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	e015      	b.n	80064e2 <HAL_TIM_PWM_Start+0x9e>
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	2b10      	cmp	r3, #16
 80064ba:	d109      	bne.n	80064d0 <HAL_TIM_PWM_Start+0x8c>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	bf14      	ite	ne
 80064c8:	2301      	movne	r3, #1
 80064ca:	2300      	moveq	r3, #0
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	e008      	b.n	80064e2 <HAL_TIM_PWM_Start+0x9e>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	2b01      	cmp	r3, #1
 80064da:	bf14      	ite	ne
 80064dc:	2301      	movne	r3, #1
 80064de:	2300      	moveq	r3, #0
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d001      	beq.n	80064ea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e0a6      	b.n	8006638 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d104      	bne.n	80064fa <HAL_TIM_PWM_Start+0xb6>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2202      	movs	r2, #2
 80064f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064f8:	e023      	b.n	8006542 <HAL_TIM_PWM_Start+0xfe>
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	2b04      	cmp	r3, #4
 80064fe:	d104      	bne.n	800650a <HAL_TIM_PWM_Start+0xc6>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2202      	movs	r2, #2
 8006504:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006508:	e01b      	b.n	8006542 <HAL_TIM_PWM_Start+0xfe>
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	2b08      	cmp	r3, #8
 800650e:	d104      	bne.n	800651a <HAL_TIM_PWM_Start+0xd6>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2202      	movs	r2, #2
 8006514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006518:	e013      	b.n	8006542 <HAL_TIM_PWM_Start+0xfe>
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	2b0c      	cmp	r3, #12
 800651e:	d104      	bne.n	800652a <HAL_TIM_PWM_Start+0xe6>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2202      	movs	r2, #2
 8006524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006528:	e00b      	b.n	8006542 <HAL_TIM_PWM_Start+0xfe>
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	2b10      	cmp	r3, #16
 800652e:	d104      	bne.n	800653a <HAL_TIM_PWM_Start+0xf6>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2202      	movs	r2, #2
 8006534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006538:	e003      	b.n	8006542 <HAL_TIM_PWM_Start+0xfe>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2202      	movs	r2, #2
 800653e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2201      	movs	r2, #1
 8006548:	6839      	ldr	r1, [r7, #0]
 800654a:	4618      	mov	r0, r3
 800654c:	f001 fa00 	bl	8007950 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a3a      	ldr	r2, [pc, #232]	; (8006640 <HAL_TIM_PWM_Start+0x1fc>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d018      	beq.n	800658c <HAL_TIM_PWM_Start+0x148>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a39      	ldr	r2, [pc, #228]	; (8006644 <HAL_TIM_PWM_Start+0x200>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d013      	beq.n	800658c <HAL_TIM_PWM_Start+0x148>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a37      	ldr	r2, [pc, #220]	; (8006648 <HAL_TIM_PWM_Start+0x204>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d00e      	beq.n	800658c <HAL_TIM_PWM_Start+0x148>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a36      	ldr	r2, [pc, #216]	; (800664c <HAL_TIM_PWM_Start+0x208>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d009      	beq.n	800658c <HAL_TIM_PWM_Start+0x148>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a34      	ldr	r2, [pc, #208]	; (8006650 <HAL_TIM_PWM_Start+0x20c>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d004      	beq.n	800658c <HAL_TIM_PWM_Start+0x148>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a33      	ldr	r2, [pc, #204]	; (8006654 <HAL_TIM_PWM_Start+0x210>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d101      	bne.n	8006590 <HAL_TIM_PWM_Start+0x14c>
 800658c:	2301      	movs	r3, #1
 800658e:	e000      	b.n	8006592 <HAL_TIM_PWM_Start+0x14e>
 8006590:	2300      	movs	r3, #0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d007      	beq.n	80065a6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a25      	ldr	r2, [pc, #148]	; (8006640 <HAL_TIM_PWM_Start+0x1fc>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d022      	beq.n	80065f6 <HAL_TIM_PWM_Start+0x1b2>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065b8:	d01d      	beq.n	80065f6 <HAL_TIM_PWM_Start+0x1b2>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a26      	ldr	r2, [pc, #152]	; (8006658 <HAL_TIM_PWM_Start+0x214>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d018      	beq.n	80065f6 <HAL_TIM_PWM_Start+0x1b2>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a24      	ldr	r2, [pc, #144]	; (800665c <HAL_TIM_PWM_Start+0x218>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d013      	beq.n	80065f6 <HAL_TIM_PWM_Start+0x1b2>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a23      	ldr	r2, [pc, #140]	; (8006660 <HAL_TIM_PWM_Start+0x21c>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d00e      	beq.n	80065f6 <HAL_TIM_PWM_Start+0x1b2>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a19      	ldr	r2, [pc, #100]	; (8006644 <HAL_TIM_PWM_Start+0x200>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d009      	beq.n	80065f6 <HAL_TIM_PWM_Start+0x1b2>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a18      	ldr	r2, [pc, #96]	; (8006648 <HAL_TIM_PWM_Start+0x204>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d004      	beq.n	80065f6 <HAL_TIM_PWM_Start+0x1b2>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a18      	ldr	r2, [pc, #96]	; (8006654 <HAL_TIM_PWM_Start+0x210>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d115      	bne.n	8006622 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	689a      	ldr	r2, [r3, #8]
 80065fc:	4b19      	ldr	r3, [pc, #100]	; (8006664 <HAL_TIM_PWM_Start+0x220>)
 80065fe:	4013      	ands	r3, r2
 8006600:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2b06      	cmp	r3, #6
 8006606:	d015      	beq.n	8006634 <HAL_TIM_PWM_Start+0x1f0>
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800660e:	d011      	beq.n	8006634 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f042 0201 	orr.w	r2, r2, #1
 800661e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006620:	e008      	b.n	8006634 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f042 0201 	orr.w	r2, r2, #1
 8006630:	601a      	str	r2, [r3, #0]
 8006632:	e000      	b.n	8006636 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006634:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006636:	2300      	movs	r3, #0
}
 8006638:	4618      	mov	r0, r3
 800663a:	3710      	adds	r7, #16
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}
 8006640:	40012c00 	.word	0x40012c00
 8006644:	40013400 	.word	0x40013400
 8006648:	40014000 	.word	0x40014000
 800664c:	40014400 	.word	0x40014400
 8006650:	40014800 	.word	0x40014800
 8006654:	40015000 	.word	0x40015000
 8006658:	40000400 	.word	0x40000400
 800665c:	40000800 	.word	0x40000800
 8006660:	40000c00 	.word	0x40000c00
 8006664:	00010007 	.word	0x00010007

08006668 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b086      	sub	sp, #24
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d101      	bne.n	800667c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	e097      	b.n	80067ac <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006682:	b2db      	uxtb	r3, r3
 8006684:	2b00      	cmp	r3, #0
 8006686:	d106      	bne.n	8006696 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f7fc f8ed 	bl	8002870 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2202      	movs	r2, #2
 800669a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	6812      	ldr	r2, [r2, #0]
 80066a8:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80066ac:	f023 0307 	bic.w	r3, r3, #7
 80066b0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	3304      	adds	r3, #4
 80066ba:	4619      	mov	r1, r3
 80066bc:	4610      	mov	r0, r2
 80066be:	f000 fcd9 	bl	8007074 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	699b      	ldr	r3, [r3, #24]
 80066d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	6a1b      	ldr	r3, [r3, #32]
 80066d8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	697a      	ldr	r2, [r7, #20]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066ea:	f023 0303 	bic.w	r3, r3, #3
 80066ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	689a      	ldr	r2, [r3, #8]
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	699b      	ldr	r3, [r3, #24]
 80066f8:	021b      	lsls	r3, r3, #8
 80066fa:	4313      	orrs	r3, r2
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	4313      	orrs	r3, r2
 8006700:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006708:	f023 030c 	bic.w	r3, r3, #12
 800670c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006714:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006718:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	68da      	ldr	r2, [r3, #12]
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	69db      	ldr	r3, [r3, #28]
 8006722:	021b      	lsls	r3, r3, #8
 8006724:	4313      	orrs	r3, r2
 8006726:	693a      	ldr	r2, [r7, #16]
 8006728:	4313      	orrs	r3, r2
 800672a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	011a      	lsls	r2, r3, #4
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	031b      	lsls	r3, r3, #12
 8006738:	4313      	orrs	r3, r2
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	4313      	orrs	r3, r2
 800673e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006746:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800674e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	685a      	ldr	r2, [r3, #4]
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	695b      	ldr	r3, [r3, #20]
 8006758:	011b      	lsls	r3, r3, #4
 800675a:	4313      	orrs	r3, r2
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	4313      	orrs	r3, r2
 8006760:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	697a      	ldr	r2, [r7, #20]
 8006768:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	693a      	ldr	r2, [r7, #16]
 8006770:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68fa      	ldr	r2, [r7, #12]
 8006778:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2201      	movs	r2, #1
 800677e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2201      	movs	r2, #1
 8006786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2201      	movs	r2, #1
 800678e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2201      	movs	r2, #1
 8006796:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2201      	movs	r2, #1
 800679e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2201      	movs	r2, #1
 80067a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3718      	adds	r7, #24
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067c4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80067cc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067d4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067dc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d110      	bne.n	8006806 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80067e4:	7bfb      	ldrb	r3, [r7, #15]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d102      	bne.n	80067f0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80067ea:	7b7b      	ldrb	r3, [r7, #13]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d001      	beq.n	80067f4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	e069      	b.n	80068c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2202      	movs	r2, #2
 80067f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2202      	movs	r2, #2
 8006800:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006804:	e031      	b.n	800686a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	2b04      	cmp	r3, #4
 800680a:	d110      	bne.n	800682e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800680c:	7bbb      	ldrb	r3, [r7, #14]
 800680e:	2b01      	cmp	r3, #1
 8006810:	d102      	bne.n	8006818 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006812:	7b3b      	ldrb	r3, [r7, #12]
 8006814:	2b01      	cmp	r3, #1
 8006816:	d001      	beq.n	800681c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e055      	b.n	80068c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2202      	movs	r2, #2
 8006820:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2202      	movs	r2, #2
 8006828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800682c:	e01d      	b.n	800686a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800682e:	7bfb      	ldrb	r3, [r7, #15]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d108      	bne.n	8006846 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006834:	7bbb      	ldrb	r3, [r7, #14]
 8006836:	2b01      	cmp	r3, #1
 8006838:	d105      	bne.n	8006846 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800683a:	7b7b      	ldrb	r3, [r7, #13]
 800683c:	2b01      	cmp	r3, #1
 800683e:	d102      	bne.n	8006846 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006840:	7b3b      	ldrb	r3, [r7, #12]
 8006842:	2b01      	cmp	r3, #1
 8006844:	d001      	beq.n	800684a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e03e      	b.n	80068c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2202      	movs	r2, #2
 800684e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2202      	movs	r2, #2
 8006856:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2202      	movs	r2, #2
 800685e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2202      	movs	r2, #2
 8006866:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d003      	beq.n	8006878 <HAL_TIM_Encoder_Start+0xc4>
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	2b04      	cmp	r3, #4
 8006874:	d008      	beq.n	8006888 <HAL_TIM_Encoder_Start+0xd4>
 8006876:	e00f      	b.n	8006898 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2201      	movs	r2, #1
 800687e:	2100      	movs	r1, #0
 8006880:	4618      	mov	r0, r3
 8006882:	f001 f865 	bl	8007950 <TIM_CCxChannelCmd>
      break;
 8006886:	e016      	b.n	80068b6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2201      	movs	r2, #1
 800688e:	2104      	movs	r1, #4
 8006890:	4618      	mov	r0, r3
 8006892:	f001 f85d 	bl	8007950 <TIM_CCxChannelCmd>
      break;
 8006896:	e00e      	b.n	80068b6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2201      	movs	r2, #1
 800689e:	2100      	movs	r1, #0
 80068a0:	4618      	mov	r0, r3
 80068a2:	f001 f855 	bl	8007950 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2201      	movs	r2, #1
 80068ac:	2104      	movs	r1, #4
 80068ae:	4618      	mov	r0, r3
 80068b0:	f001 f84e 	bl	8007950 <TIM_CCxChannelCmd>
      break;
 80068b4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f042 0201 	orr.w	r2, r2, #1
 80068c4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3710      	adds	r7, #16
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	f003 0302 	and.w	r3, r3, #2
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d122      	bne.n	800692c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	f003 0302 	and.w	r3, r3, #2
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d11b      	bne.n	800692c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f06f 0202 	mvn.w	r2, #2
 80068fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2201      	movs	r2, #1
 8006902:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	f003 0303 	and.w	r3, r3, #3
 800690e:	2b00      	cmp	r3, #0
 8006910:	d003      	beq.n	800691a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 fb90 	bl	8007038 <HAL_TIM_IC_CaptureCallback>
 8006918:	e005      	b.n	8006926 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 fb82 	bl	8007024 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 fb93 	bl	800704c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	f003 0304 	and.w	r3, r3, #4
 8006936:	2b04      	cmp	r3, #4
 8006938:	d122      	bne.n	8006980 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	f003 0304 	and.w	r3, r3, #4
 8006944:	2b04      	cmp	r3, #4
 8006946:	d11b      	bne.n	8006980 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f06f 0204 	mvn.w	r2, #4
 8006950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2202      	movs	r2, #2
 8006956:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006962:	2b00      	cmp	r3, #0
 8006964:	d003      	beq.n	800696e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 fb66 	bl	8007038 <HAL_TIM_IC_CaptureCallback>
 800696c:	e005      	b.n	800697a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 fb58 	bl	8007024 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 fb69 	bl	800704c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	f003 0308 	and.w	r3, r3, #8
 800698a:	2b08      	cmp	r3, #8
 800698c:	d122      	bne.n	80069d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	f003 0308 	and.w	r3, r3, #8
 8006998:	2b08      	cmp	r3, #8
 800699a:	d11b      	bne.n	80069d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f06f 0208 	mvn.w	r2, #8
 80069a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2204      	movs	r2, #4
 80069aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	69db      	ldr	r3, [r3, #28]
 80069b2:	f003 0303 	and.w	r3, r3, #3
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d003      	beq.n	80069c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 fb3c 	bl	8007038 <HAL_TIM_IC_CaptureCallback>
 80069c0:	e005      	b.n	80069ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 fb2e 	bl	8007024 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 fb3f 	bl	800704c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	f003 0310 	and.w	r3, r3, #16
 80069de:	2b10      	cmp	r3, #16
 80069e0:	d122      	bne.n	8006a28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	f003 0310 	and.w	r3, r3, #16
 80069ec:	2b10      	cmp	r3, #16
 80069ee:	d11b      	bne.n	8006a28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f06f 0210 	mvn.w	r2, #16
 80069f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2208      	movs	r2, #8
 80069fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	69db      	ldr	r3, [r3, #28]
 8006a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d003      	beq.n	8006a16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 fb12 	bl	8007038 <HAL_TIM_IC_CaptureCallback>
 8006a14:	e005      	b.n	8006a22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 fb04 	bl	8007024 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 fb15 	bl	800704c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	f003 0301 	and.w	r3, r3, #1
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d10e      	bne.n	8006a54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	f003 0301 	and.w	r3, r3, #1
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d107      	bne.n	8006a54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f06f 0201 	mvn.w	r2, #1
 8006a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f7fa ffa2 	bl	8001998 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a5e:	2b80      	cmp	r3, #128	; 0x80
 8006a60:	d10e      	bne.n	8006a80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a6c:	2b80      	cmp	r3, #128	; 0x80
 8006a6e:	d107      	bne.n	8006a80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f001 f9a2 	bl	8007dc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a8e:	d10e      	bne.n	8006aae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a9a:	2b80      	cmp	r3, #128	; 0x80
 8006a9c:	d107      	bne.n	8006aae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f001 f995 	bl	8007dd8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ab8:	2b40      	cmp	r3, #64	; 0x40
 8006aba:	d10e      	bne.n	8006ada <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac6:	2b40      	cmp	r3, #64	; 0x40
 8006ac8:	d107      	bne.n	8006ada <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 fac3 	bl	8007060 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	f003 0320 	and.w	r3, r3, #32
 8006ae4:	2b20      	cmp	r3, #32
 8006ae6:	d10e      	bne.n	8006b06 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	f003 0320 	and.w	r3, r3, #32
 8006af2:	2b20      	cmp	r3, #32
 8006af4:	d107      	bne.n	8006b06 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f06f 0220 	mvn.w	r2, #32
 8006afe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f001 f955 	bl	8007db0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	691b      	ldr	r3, [r3, #16]
 8006b0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b14:	d10f      	bne.n	8006b36 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b24:	d107      	bne.n	8006b36 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006b2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f001 f95b 	bl	8007dec <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b44:	d10f      	bne.n	8006b66 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b54:	d107      	bne.n	8006b66 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006b5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f001 f94d 	bl	8007e00 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b74:	d10f      	bne.n	8006b96 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b84:	d107      	bne.n	8006b96 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006b8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f001 f93f 	bl	8007e14 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ba0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ba4:	d10f      	bne.n	8006bc6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006bb0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006bb4:	d107      	bne.n	8006bc6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006bbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f001 f931 	bl	8007e28 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006bc6:	bf00      	nop
 8006bc8:	3708      	adds	r7, #8
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
	...

08006bd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b086      	sub	sp, #24
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d101      	bne.n	8006bee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006bea:	2302      	movs	r3, #2
 8006bec:	e0ff      	b.n	8006dee <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2b14      	cmp	r3, #20
 8006bfa:	f200 80f0 	bhi.w	8006dde <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006bfe:	a201      	add	r2, pc, #4	; (adr r2, 8006c04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c04:	08006c59 	.word	0x08006c59
 8006c08:	08006ddf 	.word	0x08006ddf
 8006c0c:	08006ddf 	.word	0x08006ddf
 8006c10:	08006ddf 	.word	0x08006ddf
 8006c14:	08006c99 	.word	0x08006c99
 8006c18:	08006ddf 	.word	0x08006ddf
 8006c1c:	08006ddf 	.word	0x08006ddf
 8006c20:	08006ddf 	.word	0x08006ddf
 8006c24:	08006cdb 	.word	0x08006cdb
 8006c28:	08006ddf 	.word	0x08006ddf
 8006c2c:	08006ddf 	.word	0x08006ddf
 8006c30:	08006ddf 	.word	0x08006ddf
 8006c34:	08006d1b 	.word	0x08006d1b
 8006c38:	08006ddf 	.word	0x08006ddf
 8006c3c:	08006ddf 	.word	0x08006ddf
 8006c40:	08006ddf 	.word	0x08006ddf
 8006c44:	08006d5d 	.word	0x08006d5d
 8006c48:	08006ddf 	.word	0x08006ddf
 8006c4c:	08006ddf 	.word	0x08006ddf
 8006c50:	08006ddf 	.word	0x08006ddf
 8006c54:	08006d9d 	.word	0x08006d9d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	68b9      	ldr	r1, [r7, #8]
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f000 fab0 	bl	80071c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	699a      	ldr	r2, [r3, #24]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f042 0208 	orr.w	r2, r2, #8
 8006c72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	699a      	ldr	r2, [r3, #24]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f022 0204 	bic.w	r2, r2, #4
 8006c82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	6999      	ldr	r1, [r3, #24]
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	691a      	ldr	r2, [r3, #16]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	430a      	orrs	r2, r1
 8006c94:	619a      	str	r2, [r3, #24]
      break;
 8006c96:	e0a5      	b.n	8006de4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	68b9      	ldr	r1, [r7, #8]
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f000 fb2a 	bl	80072f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	699a      	ldr	r2, [r3, #24]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	699a      	ldr	r2, [r3, #24]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6999      	ldr	r1, [r3, #24]
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	021a      	lsls	r2, r3, #8
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	430a      	orrs	r2, r1
 8006cd6:	619a      	str	r2, [r3, #24]
      break;
 8006cd8:	e084      	b.n	8006de4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	68b9      	ldr	r1, [r7, #8]
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f000 fb9d 	bl	8007420 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	69da      	ldr	r2, [r3, #28]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f042 0208 	orr.w	r2, r2, #8
 8006cf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	69da      	ldr	r2, [r3, #28]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f022 0204 	bic.w	r2, r2, #4
 8006d04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	69d9      	ldr	r1, [r3, #28]
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	691a      	ldr	r2, [r3, #16]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	430a      	orrs	r2, r1
 8006d16:	61da      	str	r2, [r3, #28]
      break;
 8006d18:	e064      	b.n	8006de4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68b9      	ldr	r1, [r7, #8]
 8006d20:	4618      	mov	r0, r3
 8006d22:	f000 fc0f 	bl	8007544 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	69da      	ldr	r2, [r3, #28]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	69da      	ldr	r2, [r3, #28]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	69d9      	ldr	r1, [r3, #28]
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	021a      	lsls	r2, r3, #8
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	430a      	orrs	r2, r1
 8006d58:	61da      	str	r2, [r3, #28]
      break;
 8006d5a:	e043      	b.n	8006de4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	68b9      	ldr	r1, [r7, #8]
 8006d62:	4618      	mov	r0, r3
 8006d64:	f000 fc82 	bl	800766c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f042 0208 	orr.w	r2, r2, #8
 8006d76:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f022 0204 	bic.w	r2, r2, #4
 8006d86:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	691a      	ldr	r2, [r3, #16]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	430a      	orrs	r2, r1
 8006d98:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006d9a:	e023      	b.n	8006de4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	68b9      	ldr	r1, [r7, #8]
 8006da2:	4618      	mov	r0, r3
 8006da4:	f000 fccc 	bl	8007740 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006db6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dc6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	021a      	lsls	r2, r3, #8
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	430a      	orrs	r2, r1
 8006dda:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006ddc:	e002      	b.n	8006de4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	75fb      	strb	r3, [r7, #23]
      break;
 8006de2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006dec:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3718      	adds	r7, #24
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop

08006df8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e02:	2300      	movs	r3, #0
 8006e04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d101      	bne.n	8006e14 <HAL_TIM_ConfigClockSource+0x1c>
 8006e10:	2302      	movs	r3, #2
 8006e12:	e0f6      	b.n	8007002 <HAL_TIM_ConfigClockSource+0x20a>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2202      	movs	r2, #2
 8006e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006e32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006e36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68ba      	ldr	r2, [r7, #8]
 8006e46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a6f      	ldr	r2, [pc, #444]	; (800700c <HAL_TIM_ConfigClockSource+0x214>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	f000 80c1 	beq.w	8006fd6 <HAL_TIM_ConfigClockSource+0x1de>
 8006e54:	4a6d      	ldr	r2, [pc, #436]	; (800700c <HAL_TIM_ConfigClockSource+0x214>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	f200 80c6 	bhi.w	8006fe8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e5c:	4a6c      	ldr	r2, [pc, #432]	; (8007010 <HAL_TIM_ConfigClockSource+0x218>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	f000 80b9 	beq.w	8006fd6 <HAL_TIM_ConfigClockSource+0x1de>
 8006e64:	4a6a      	ldr	r2, [pc, #424]	; (8007010 <HAL_TIM_ConfigClockSource+0x218>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	f200 80be 	bhi.w	8006fe8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e6c:	4a69      	ldr	r2, [pc, #420]	; (8007014 <HAL_TIM_ConfigClockSource+0x21c>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	f000 80b1 	beq.w	8006fd6 <HAL_TIM_ConfigClockSource+0x1de>
 8006e74:	4a67      	ldr	r2, [pc, #412]	; (8007014 <HAL_TIM_ConfigClockSource+0x21c>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	f200 80b6 	bhi.w	8006fe8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e7c:	4a66      	ldr	r2, [pc, #408]	; (8007018 <HAL_TIM_ConfigClockSource+0x220>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	f000 80a9 	beq.w	8006fd6 <HAL_TIM_ConfigClockSource+0x1de>
 8006e84:	4a64      	ldr	r2, [pc, #400]	; (8007018 <HAL_TIM_ConfigClockSource+0x220>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	f200 80ae 	bhi.w	8006fe8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e8c:	4a63      	ldr	r2, [pc, #396]	; (800701c <HAL_TIM_ConfigClockSource+0x224>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	f000 80a1 	beq.w	8006fd6 <HAL_TIM_ConfigClockSource+0x1de>
 8006e94:	4a61      	ldr	r2, [pc, #388]	; (800701c <HAL_TIM_ConfigClockSource+0x224>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	f200 80a6 	bhi.w	8006fe8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e9c:	4a60      	ldr	r2, [pc, #384]	; (8007020 <HAL_TIM_ConfigClockSource+0x228>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	f000 8099 	beq.w	8006fd6 <HAL_TIM_ConfigClockSource+0x1de>
 8006ea4:	4a5e      	ldr	r2, [pc, #376]	; (8007020 <HAL_TIM_ConfigClockSource+0x228>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	f200 809e 	bhi.w	8006fe8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006eac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006eb0:	f000 8091 	beq.w	8006fd6 <HAL_TIM_ConfigClockSource+0x1de>
 8006eb4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006eb8:	f200 8096 	bhi.w	8006fe8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ebc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ec0:	f000 8089 	beq.w	8006fd6 <HAL_TIM_ConfigClockSource+0x1de>
 8006ec4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ec8:	f200 808e 	bhi.w	8006fe8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ecc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ed0:	d03e      	beq.n	8006f50 <HAL_TIM_ConfigClockSource+0x158>
 8006ed2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ed6:	f200 8087 	bhi.w	8006fe8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006eda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ede:	f000 8086 	beq.w	8006fee <HAL_TIM_ConfigClockSource+0x1f6>
 8006ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ee6:	d87f      	bhi.n	8006fe8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ee8:	2b70      	cmp	r3, #112	; 0x70
 8006eea:	d01a      	beq.n	8006f22 <HAL_TIM_ConfigClockSource+0x12a>
 8006eec:	2b70      	cmp	r3, #112	; 0x70
 8006eee:	d87b      	bhi.n	8006fe8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ef0:	2b60      	cmp	r3, #96	; 0x60
 8006ef2:	d050      	beq.n	8006f96 <HAL_TIM_ConfigClockSource+0x19e>
 8006ef4:	2b60      	cmp	r3, #96	; 0x60
 8006ef6:	d877      	bhi.n	8006fe8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ef8:	2b50      	cmp	r3, #80	; 0x50
 8006efa:	d03c      	beq.n	8006f76 <HAL_TIM_ConfigClockSource+0x17e>
 8006efc:	2b50      	cmp	r3, #80	; 0x50
 8006efe:	d873      	bhi.n	8006fe8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f00:	2b40      	cmp	r3, #64	; 0x40
 8006f02:	d058      	beq.n	8006fb6 <HAL_TIM_ConfigClockSource+0x1be>
 8006f04:	2b40      	cmp	r3, #64	; 0x40
 8006f06:	d86f      	bhi.n	8006fe8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f08:	2b30      	cmp	r3, #48	; 0x30
 8006f0a:	d064      	beq.n	8006fd6 <HAL_TIM_ConfigClockSource+0x1de>
 8006f0c:	2b30      	cmp	r3, #48	; 0x30
 8006f0e:	d86b      	bhi.n	8006fe8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f10:	2b20      	cmp	r3, #32
 8006f12:	d060      	beq.n	8006fd6 <HAL_TIM_ConfigClockSource+0x1de>
 8006f14:	2b20      	cmp	r3, #32
 8006f16:	d867      	bhi.n	8006fe8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d05c      	beq.n	8006fd6 <HAL_TIM_ConfigClockSource+0x1de>
 8006f1c:	2b10      	cmp	r3, #16
 8006f1e:	d05a      	beq.n	8006fd6 <HAL_TIM_ConfigClockSource+0x1de>
 8006f20:	e062      	b.n	8006fe8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6818      	ldr	r0, [r3, #0]
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	6899      	ldr	r1, [r3, #8]
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	685a      	ldr	r2, [r3, #4]
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	f000 fced 	bl	8007910 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	68ba      	ldr	r2, [r7, #8]
 8006f4c:	609a      	str	r2, [r3, #8]
      break;
 8006f4e:	e04f      	b.n	8006ff0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6818      	ldr	r0, [r3, #0]
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	6899      	ldr	r1, [r3, #8]
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	685a      	ldr	r2, [r3, #4]
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	f000 fcd6 	bl	8007910 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	689a      	ldr	r2, [r3, #8]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f72:	609a      	str	r2, [r3, #8]
      break;
 8006f74:	e03c      	b.n	8006ff0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6818      	ldr	r0, [r3, #0]
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	6859      	ldr	r1, [r3, #4]
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	461a      	mov	r2, r3
 8006f84:	f000 fc48 	bl	8007818 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2150      	movs	r1, #80	; 0x50
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f000 fca1 	bl	80078d6 <TIM_ITRx_SetConfig>
      break;
 8006f94:	e02c      	b.n	8006ff0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6818      	ldr	r0, [r3, #0]
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	6859      	ldr	r1, [r3, #4]
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	f000 fc67 	bl	8007876 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2160      	movs	r1, #96	; 0x60
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f000 fc91 	bl	80078d6 <TIM_ITRx_SetConfig>
      break;
 8006fb4:	e01c      	b.n	8006ff0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6818      	ldr	r0, [r3, #0]
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	6859      	ldr	r1, [r3, #4]
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	f000 fc28 	bl	8007818 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	2140      	movs	r1, #64	; 0x40
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f000 fc81 	bl	80078d6 <TIM_ITRx_SetConfig>
      break;
 8006fd4:	e00c      	b.n	8006ff0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4619      	mov	r1, r3
 8006fe0:	4610      	mov	r0, r2
 8006fe2:	f000 fc78 	bl	80078d6 <TIM_ITRx_SetConfig>
      break;
 8006fe6:	e003      	b.n	8006ff0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	73fb      	strb	r3, [r7, #15]
      break;
 8006fec:	e000      	b.n	8006ff0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006fee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007000:	7bfb      	ldrb	r3, [r7, #15]
}
 8007002:	4618      	mov	r0, r3
 8007004:	3710      	adds	r7, #16
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	00100070 	.word	0x00100070
 8007010:	00100060 	.word	0x00100060
 8007014:	00100050 	.word	0x00100050
 8007018:	00100040 	.word	0x00100040
 800701c:	00100030 	.word	0x00100030
 8007020:	00100020 	.word	0x00100020

08007024 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800702c:	bf00      	nop
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007040:	bf00      	nop
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007054:	bf00      	nop
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007068:	bf00      	nop
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007074:	b480      	push	{r7}
 8007076:	b085      	sub	sp, #20
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	4a46      	ldr	r2, [pc, #280]	; (80071a0 <TIM_Base_SetConfig+0x12c>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d017      	beq.n	80070bc <TIM_Base_SetConfig+0x48>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007092:	d013      	beq.n	80070bc <TIM_Base_SetConfig+0x48>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	4a43      	ldr	r2, [pc, #268]	; (80071a4 <TIM_Base_SetConfig+0x130>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d00f      	beq.n	80070bc <TIM_Base_SetConfig+0x48>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4a42      	ldr	r2, [pc, #264]	; (80071a8 <TIM_Base_SetConfig+0x134>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d00b      	beq.n	80070bc <TIM_Base_SetConfig+0x48>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4a41      	ldr	r2, [pc, #260]	; (80071ac <TIM_Base_SetConfig+0x138>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d007      	beq.n	80070bc <TIM_Base_SetConfig+0x48>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4a40      	ldr	r2, [pc, #256]	; (80071b0 <TIM_Base_SetConfig+0x13c>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d003      	beq.n	80070bc <TIM_Base_SetConfig+0x48>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	4a3f      	ldr	r2, [pc, #252]	; (80071b4 <TIM_Base_SetConfig+0x140>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d108      	bne.n	80070ce <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a33      	ldr	r2, [pc, #204]	; (80071a0 <TIM_Base_SetConfig+0x12c>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d023      	beq.n	800711e <TIM_Base_SetConfig+0xaa>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070dc:	d01f      	beq.n	800711e <TIM_Base_SetConfig+0xaa>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4a30      	ldr	r2, [pc, #192]	; (80071a4 <TIM_Base_SetConfig+0x130>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d01b      	beq.n	800711e <TIM_Base_SetConfig+0xaa>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4a2f      	ldr	r2, [pc, #188]	; (80071a8 <TIM_Base_SetConfig+0x134>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d017      	beq.n	800711e <TIM_Base_SetConfig+0xaa>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a2e      	ldr	r2, [pc, #184]	; (80071ac <TIM_Base_SetConfig+0x138>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d013      	beq.n	800711e <TIM_Base_SetConfig+0xaa>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a2d      	ldr	r2, [pc, #180]	; (80071b0 <TIM_Base_SetConfig+0x13c>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d00f      	beq.n	800711e <TIM_Base_SetConfig+0xaa>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a2d      	ldr	r2, [pc, #180]	; (80071b8 <TIM_Base_SetConfig+0x144>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d00b      	beq.n	800711e <TIM_Base_SetConfig+0xaa>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a2c      	ldr	r2, [pc, #176]	; (80071bc <TIM_Base_SetConfig+0x148>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d007      	beq.n	800711e <TIM_Base_SetConfig+0xaa>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a2b      	ldr	r2, [pc, #172]	; (80071c0 <TIM_Base_SetConfig+0x14c>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d003      	beq.n	800711e <TIM_Base_SetConfig+0xaa>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4a26      	ldr	r2, [pc, #152]	; (80071b4 <TIM_Base_SetConfig+0x140>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d108      	bne.n	8007130 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007124:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	4313      	orrs	r3, r2
 800712e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	695b      	ldr	r3, [r3, #20]
 800713a:	4313      	orrs	r3, r2
 800713c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	689a      	ldr	r2, [r3, #8]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a12      	ldr	r2, [pc, #72]	; (80071a0 <TIM_Base_SetConfig+0x12c>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d013      	beq.n	8007184 <TIM_Base_SetConfig+0x110>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	4a14      	ldr	r2, [pc, #80]	; (80071b0 <TIM_Base_SetConfig+0x13c>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d00f      	beq.n	8007184 <TIM_Base_SetConfig+0x110>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	4a14      	ldr	r2, [pc, #80]	; (80071b8 <TIM_Base_SetConfig+0x144>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d00b      	beq.n	8007184 <TIM_Base_SetConfig+0x110>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4a13      	ldr	r2, [pc, #76]	; (80071bc <TIM_Base_SetConfig+0x148>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d007      	beq.n	8007184 <TIM_Base_SetConfig+0x110>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4a12      	ldr	r2, [pc, #72]	; (80071c0 <TIM_Base_SetConfig+0x14c>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d003      	beq.n	8007184 <TIM_Base_SetConfig+0x110>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	4a0d      	ldr	r2, [pc, #52]	; (80071b4 <TIM_Base_SetConfig+0x140>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d103      	bne.n	800718c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	691a      	ldr	r2, [r3, #16]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	615a      	str	r2, [r3, #20]
}
 8007192:	bf00      	nop
 8007194:	3714      	adds	r7, #20
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop
 80071a0:	40012c00 	.word	0x40012c00
 80071a4:	40000400 	.word	0x40000400
 80071a8:	40000800 	.word	0x40000800
 80071ac:	40000c00 	.word	0x40000c00
 80071b0:	40013400 	.word	0x40013400
 80071b4:	40015000 	.word	0x40015000
 80071b8:	40014000 	.word	0x40014000
 80071bc:	40014400 	.word	0x40014400
 80071c0:	40014800 	.word	0x40014800

080071c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b087      	sub	sp, #28
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a1b      	ldr	r3, [r3, #32]
 80071d2:	f023 0201 	bic.w	r2, r3, #1
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a1b      	ldr	r3, [r3, #32]
 80071de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	699b      	ldr	r3, [r3, #24]
 80071ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f023 0303 	bic.w	r3, r3, #3
 80071fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	4313      	orrs	r3, r2
 8007208:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	f023 0302 	bic.w	r3, r3, #2
 8007210:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	697a      	ldr	r2, [r7, #20]
 8007218:	4313      	orrs	r3, r2
 800721a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	4a30      	ldr	r2, [pc, #192]	; (80072e0 <TIM_OC1_SetConfig+0x11c>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d013      	beq.n	800724c <TIM_OC1_SetConfig+0x88>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	4a2f      	ldr	r2, [pc, #188]	; (80072e4 <TIM_OC1_SetConfig+0x120>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d00f      	beq.n	800724c <TIM_OC1_SetConfig+0x88>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	4a2e      	ldr	r2, [pc, #184]	; (80072e8 <TIM_OC1_SetConfig+0x124>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d00b      	beq.n	800724c <TIM_OC1_SetConfig+0x88>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	4a2d      	ldr	r2, [pc, #180]	; (80072ec <TIM_OC1_SetConfig+0x128>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d007      	beq.n	800724c <TIM_OC1_SetConfig+0x88>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	4a2c      	ldr	r2, [pc, #176]	; (80072f0 <TIM_OC1_SetConfig+0x12c>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d003      	beq.n	800724c <TIM_OC1_SetConfig+0x88>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	4a2b      	ldr	r2, [pc, #172]	; (80072f4 <TIM_OC1_SetConfig+0x130>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d10c      	bne.n	8007266 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	f023 0308 	bic.w	r3, r3, #8
 8007252:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	697a      	ldr	r2, [r7, #20]
 800725a:	4313      	orrs	r3, r2
 800725c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	f023 0304 	bic.w	r3, r3, #4
 8007264:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	4a1d      	ldr	r2, [pc, #116]	; (80072e0 <TIM_OC1_SetConfig+0x11c>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d013      	beq.n	8007296 <TIM_OC1_SetConfig+0xd2>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	4a1c      	ldr	r2, [pc, #112]	; (80072e4 <TIM_OC1_SetConfig+0x120>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d00f      	beq.n	8007296 <TIM_OC1_SetConfig+0xd2>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	4a1b      	ldr	r2, [pc, #108]	; (80072e8 <TIM_OC1_SetConfig+0x124>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d00b      	beq.n	8007296 <TIM_OC1_SetConfig+0xd2>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4a1a      	ldr	r2, [pc, #104]	; (80072ec <TIM_OC1_SetConfig+0x128>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d007      	beq.n	8007296 <TIM_OC1_SetConfig+0xd2>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4a19      	ldr	r2, [pc, #100]	; (80072f0 <TIM_OC1_SetConfig+0x12c>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d003      	beq.n	8007296 <TIM_OC1_SetConfig+0xd2>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	4a18      	ldr	r2, [pc, #96]	; (80072f4 <TIM_OC1_SetConfig+0x130>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d111      	bne.n	80072ba <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800729c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	695b      	ldr	r3, [r3, #20]
 80072aa:	693a      	ldr	r2, [r7, #16]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	699b      	ldr	r3, [r3, #24]
 80072b4:	693a      	ldr	r2, [r7, #16]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	693a      	ldr	r2, [r7, #16]
 80072be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	68fa      	ldr	r2, [r7, #12]
 80072c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	685a      	ldr	r2, [r3, #4]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	697a      	ldr	r2, [r7, #20]
 80072d2:	621a      	str	r2, [r3, #32]
}
 80072d4:	bf00      	nop
 80072d6:	371c      	adds	r7, #28
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr
 80072e0:	40012c00 	.word	0x40012c00
 80072e4:	40013400 	.word	0x40013400
 80072e8:	40014000 	.word	0x40014000
 80072ec:	40014400 	.word	0x40014400
 80072f0:	40014800 	.word	0x40014800
 80072f4:	40015000 	.word	0x40015000

080072f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b087      	sub	sp, #28
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a1b      	ldr	r3, [r3, #32]
 8007306:	f023 0210 	bic.w	r2, r3, #16
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a1b      	ldr	r3, [r3, #32]
 8007312:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	699b      	ldr	r3, [r3, #24]
 800731e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800732a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007332:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	021b      	lsls	r3, r3, #8
 800733a:	68fa      	ldr	r2, [r7, #12]
 800733c:	4313      	orrs	r3, r2
 800733e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	f023 0320 	bic.w	r3, r3, #32
 8007346:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	011b      	lsls	r3, r3, #4
 800734e:	697a      	ldr	r2, [r7, #20]
 8007350:	4313      	orrs	r3, r2
 8007352:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	4a2c      	ldr	r2, [pc, #176]	; (8007408 <TIM_OC2_SetConfig+0x110>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d007      	beq.n	800736c <TIM_OC2_SetConfig+0x74>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	4a2b      	ldr	r2, [pc, #172]	; (800740c <TIM_OC2_SetConfig+0x114>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d003      	beq.n	800736c <TIM_OC2_SetConfig+0x74>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	4a2a      	ldr	r2, [pc, #168]	; (8007410 <TIM_OC2_SetConfig+0x118>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d10d      	bne.n	8007388 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007372:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	011b      	lsls	r3, r3, #4
 800737a:	697a      	ldr	r2, [r7, #20]
 800737c:	4313      	orrs	r3, r2
 800737e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007386:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4a1f      	ldr	r2, [pc, #124]	; (8007408 <TIM_OC2_SetConfig+0x110>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d013      	beq.n	80073b8 <TIM_OC2_SetConfig+0xc0>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	4a1e      	ldr	r2, [pc, #120]	; (800740c <TIM_OC2_SetConfig+0x114>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d00f      	beq.n	80073b8 <TIM_OC2_SetConfig+0xc0>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4a1e      	ldr	r2, [pc, #120]	; (8007414 <TIM_OC2_SetConfig+0x11c>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d00b      	beq.n	80073b8 <TIM_OC2_SetConfig+0xc0>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	4a1d      	ldr	r2, [pc, #116]	; (8007418 <TIM_OC2_SetConfig+0x120>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d007      	beq.n	80073b8 <TIM_OC2_SetConfig+0xc0>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4a1c      	ldr	r2, [pc, #112]	; (800741c <TIM_OC2_SetConfig+0x124>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d003      	beq.n	80073b8 <TIM_OC2_SetConfig+0xc0>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4a17      	ldr	r2, [pc, #92]	; (8007410 <TIM_OC2_SetConfig+0x118>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d113      	bne.n	80073e0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	695b      	ldr	r3, [r3, #20]
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	693a      	ldr	r2, [r7, #16]
 80073d0:	4313      	orrs	r3, r2
 80073d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	699b      	ldr	r3, [r3, #24]
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	693a      	ldr	r2, [r7, #16]
 80073dc:	4313      	orrs	r3, r2
 80073de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	693a      	ldr	r2, [r7, #16]
 80073e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	685a      	ldr	r2, [r3, #4]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	697a      	ldr	r2, [r7, #20]
 80073f8:	621a      	str	r2, [r3, #32]
}
 80073fa:	bf00      	nop
 80073fc:	371c      	adds	r7, #28
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr
 8007406:	bf00      	nop
 8007408:	40012c00 	.word	0x40012c00
 800740c:	40013400 	.word	0x40013400
 8007410:	40015000 	.word	0x40015000
 8007414:	40014000 	.word	0x40014000
 8007418:	40014400 	.word	0x40014400
 800741c:	40014800 	.word	0x40014800

08007420 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007420:	b480      	push	{r7}
 8007422:	b087      	sub	sp, #28
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a1b      	ldr	r3, [r3, #32]
 800742e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a1b      	ldr	r3, [r3, #32]
 800743a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	69db      	ldr	r3, [r3, #28]
 8007446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800744e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f023 0303 	bic.w	r3, r3, #3
 800745a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	4313      	orrs	r3, r2
 8007464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800746c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	021b      	lsls	r3, r3, #8
 8007474:	697a      	ldr	r2, [r7, #20]
 8007476:	4313      	orrs	r3, r2
 8007478:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4a2b      	ldr	r2, [pc, #172]	; (800752c <TIM_OC3_SetConfig+0x10c>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d007      	beq.n	8007492 <TIM_OC3_SetConfig+0x72>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	4a2a      	ldr	r2, [pc, #168]	; (8007530 <TIM_OC3_SetConfig+0x110>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d003      	beq.n	8007492 <TIM_OC3_SetConfig+0x72>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4a29      	ldr	r2, [pc, #164]	; (8007534 <TIM_OC3_SetConfig+0x114>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d10d      	bne.n	80074ae <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007498:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	021b      	lsls	r3, r3, #8
 80074a0:	697a      	ldr	r2, [r7, #20]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4a1e      	ldr	r2, [pc, #120]	; (800752c <TIM_OC3_SetConfig+0x10c>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d013      	beq.n	80074de <TIM_OC3_SetConfig+0xbe>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4a1d      	ldr	r2, [pc, #116]	; (8007530 <TIM_OC3_SetConfig+0x110>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d00f      	beq.n	80074de <TIM_OC3_SetConfig+0xbe>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a1d      	ldr	r2, [pc, #116]	; (8007538 <TIM_OC3_SetConfig+0x118>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d00b      	beq.n	80074de <TIM_OC3_SetConfig+0xbe>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a1c      	ldr	r2, [pc, #112]	; (800753c <TIM_OC3_SetConfig+0x11c>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d007      	beq.n	80074de <TIM_OC3_SetConfig+0xbe>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a1b      	ldr	r2, [pc, #108]	; (8007540 <TIM_OC3_SetConfig+0x120>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d003      	beq.n	80074de <TIM_OC3_SetConfig+0xbe>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a16      	ldr	r2, [pc, #88]	; (8007534 <TIM_OC3_SetConfig+0x114>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d113      	bne.n	8007506 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	695b      	ldr	r3, [r3, #20]
 80074f2:	011b      	lsls	r3, r3, #4
 80074f4:	693a      	ldr	r2, [r7, #16]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	699b      	ldr	r3, [r3, #24]
 80074fe:	011b      	lsls	r3, r3, #4
 8007500:	693a      	ldr	r2, [r7, #16]
 8007502:	4313      	orrs	r3, r2
 8007504:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	693a      	ldr	r2, [r7, #16]
 800750a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	68fa      	ldr	r2, [r7, #12]
 8007510:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	685a      	ldr	r2, [r3, #4]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	697a      	ldr	r2, [r7, #20]
 800751e:	621a      	str	r2, [r3, #32]
}
 8007520:	bf00      	nop
 8007522:	371c      	adds	r7, #28
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr
 800752c:	40012c00 	.word	0x40012c00
 8007530:	40013400 	.word	0x40013400
 8007534:	40015000 	.word	0x40015000
 8007538:	40014000 	.word	0x40014000
 800753c:	40014400 	.word	0x40014400
 8007540:	40014800 	.word	0x40014800

08007544 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007544:	b480      	push	{r7}
 8007546:	b087      	sub	sp, #28
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a1b      	ldr	r3, [r3, #32]
 8007552:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6a1b      	ldr	r3, [r3, #32]
 800755e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	69db      	ldr	r3, [r3, #28]
 800756a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007572:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800757e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	021b      	lsls	r3, r3, #8
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	4313      	orrs	r3, r2
 800758a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007592:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	031b      	lsls	r3, r3, #12
 800759a:	697a      	ldr	r2, [r7, #20]
 800759c:	4313      	orrs	r3, r2
 800759e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4a2c      	ldr	r2, [pc, #176]	; (8007654 <TIM_OC4_SetConfig+0x110>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d007      	beq.n	80075b8 <TIM_OC4_SetConfig+0x74>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4a2b      	ldr	r2, [pc, #172]	; (8007658 <TIM_OC4_SetConfig+0x114>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d003      	beq.n	80075b8 <TIM_OC4_SetConfig+0x74>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a2a      	ldr	r2, [pc, #168]	; (800765c <TIM_OC4_SetConfig+0x118>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d10d      	bne.n	80075d4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80075be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	031b      	lsls	r3, r3, #12
 80075c6:	697a      	ldr	r2, [r7, #20]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4a1f      	ldr	r2, [pc, #124]	; (8007654 <TIM_OC4_SetConfig+0x110>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d013      	beq.n	8007604 <TIM_OC4_SetConfig+0xc0>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	4a1e      	ldr	r2, [pc, #120]	; (8007658 <TIM_OC4_SetConfig+0x114>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d00f      	beq.n	8007604 <TIM_OC4_SetConfig+0xc0>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	4a1e      	ldr	r2, [pc, #120]	; (8007660 <TIM_OC4_SetConfig+0x11c>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d00b      	beq.n	8007604 <TIM_OC4_SetConfig+0xc0>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4a1d      	ldr	r2, [pc, #116]	; (8007664 <TIM_OC4_SetConfig+0x120>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d007      	beq.n	8007604 <TIM_OC4_SetConfig+0xc0>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	4a1c      	ldr	r2, [pc, #112]	; (8007668 <TIM_OC4_SetConfig+0x124>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d003      	beq.n	8007604 <TIM_OC4_SetConfig+0xc0>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	4a17      	ldr	r2, [pc, #92]	; (800765c <TIM_OC4_SetConfig+0x118>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d113      	bne.n	800762c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800760a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007612:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	695b      	ldr	r3, [r3, #20]
 8007618:	019b      	lsls	r3, r3, #6
 800761a:	693a      	ldr	r2, [r7, #16]
 800761c:	4313      	orrs	r3, r2
 800761e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	699b      	ldr	r3, [r3, #24]
 8007624:	019b      	lsls	r3, r3, #6
 8007626:	693a      	ldr	r2, [r7, #16]
 8007628:	4313      	orrs	r3, r2
 800762a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	693a      	ldr	r2, [r7, #16]
 8007630:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	68fa      	ldr	r2, [r7, #12]
 8007636:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	685a      	ldr	r2, [r3, #4]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	697a      	ldr	r2, [r7, #20]
 8007644:	621a      	str	r2, [r3, #32]
}
 8007646:	bf00      	nop
 8007648:	371c      	adds	r7, #28
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr
 8007652:	bf00      	nop
 8007654:	40012c00 	.word	0x40012c00
 8007658:	40013400 	.word	0x40013400
 800765c:	40015000 	.word	0x40015000
 8007660:	40014000 	.word	0x40014000
 8007664:	40014400 	.word	0x40014400
 8007668:	40014800 	.word	0x40014800

0800766c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800766c:	b480      	push	{r7}
 800766e:	b087      	sub	sp, #28
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a1b      	ldr	r3, [r3, #32]
 800767a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6a1b      	ldr	r3, [r3, #32]
 8007686:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800769a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800769e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	68fa      	ldr	r2, [r7, #12]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80076b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	041b      	lsls	r3, r3, #16
 80076b8:	693a      	ldr	r2, [r7, #16]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a19      	ldr	r2, [pc, #100]	; (8007728 <TIM_OC5_SetConfig+0xbc>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d013      	beq.n	80076ee <TIM_OC5_SetConfig+0x82>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4a18      	ldr	r2, [pc, #96]	; (800772c <TIM_OC5_SetConfig+0xc0>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d00f      	beq.n	80076ee <TIM_OC5_SetConfig+0x82>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4a17      	ldr	r2, [pc, #92]	; (8007730 <TIM_OC5_SetConfig+0xc4>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d00b      	beq.n	80076ee <TIM_OC5_SetConfig+0x82>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4a16      	ldr	r2, [pc, #88]	; (8007734 <TIM_OC5_SetConfig+0xc8>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d007      	beq.n	80076ee <TIM_OC5_SetConfig+0x82>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a15      	ldr	r2, [pc, #84]	; (8007738 <TIM_OC5_SetConfig+0xcc>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d003      	beq.n	80076ee <TIM_OC5_SetConfig+0x82>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a14      	ldr	r2, [pc, #80]	; (800773c <TIM_OC5_SetConfig+0xd0>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d109      	bne.n	8007702 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	695b      	ldr	r3, [r3, #20]
 80076fa:	021b      	lsls	r3, r3, #8
 80076fc:	697a      	ldr	r2, [r7, #20]
 80076fe:	4313      	orrs	r3, r2
 8007700:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	697a      	ldr	r2, [r7, #20]
 8007706:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	685a      	ldr	r2, [r3, #4]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	693a      	ldr	r2, [r7, #16]
 800771a:	621a      	str	r2, [r3, #32]
}
 800771c:	bf00      	nop
 800771e:	371c      	adds	r7, #28
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr
 8007728:	40012c00 	.word	0x40012c00
 800772c:	40013400 	.word	0x40013400
 8007730:	40014000 	.word	0x40014000
 8007734:	40014400 	.word	0x40014400
 8007738:	40014800 	.word	0x40014800
 800773c:	40015000 	.word	0x40015000

08007740 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007740:	b480      	push	{r7}
 8007742:	b087      	sub	sp, #28
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a1b      	ldr	r3, [r3, #32]
 800774e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a1b      	ldr	r3, [r3, #32]
 800775a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800776e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007772:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	021b      	lsls	r3, r3, #8
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	4313      	orrs	r3, r2
 800777e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007786:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	051b      	lsls	r3, r3, #20
 800778e:	693a      	ldr	r2, [r7, #16]
 8007790:	4313      	orrs	r3, r2
 8007792:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	4a1a      	ldr	r2, [pc, #104]	; (8007800 <TIM_OC6_SetConfig+0xc0>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d013      	beq.n	80077c4 <TIM_OC6_SetConfig+0x84>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	4a19      	ldr	r2, [pc, #100]	; (8007804 <TIM_OC6_SetConfig+0xc4>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d00f      	beq.n	80077c4 <TIM_OC6_SetConfig+0x84>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4a18      	ldr	r2, [pc, #96]	; (8007808 <TIM_OC6_SetConfig+0xc8>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d00b      	beq.n	80077c4 <TIM_OC6_SetConfig+0x84>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4a17      	ldr	r2, [pc, #92]	; (800780c <TIM_OC6_SetConfig+0xcc>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d007      	beq.n	80077c4 <TIM_OC6_SetConfig+0x84>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	4a16      	ldr	r2, [pc, #88]	; (8007810 <TIM_OC6_SetConfig+0xd0>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d003      	beq.n	80077c4 <TIM_OC6_SetConfig+0x84>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4a15      	ldr	r2, [pc, #84]	; (8007814 <TIM_OC6_SetConfig+0xd4>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d109      	bne.n	80077d8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	695b      	ldr	r3, [r3, #20]
 80077d0:	029b      	lsls	r3, r3, #10
 80077d2:	697a      	ldr	r2, [r7, #20]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	697a      	ldr	r2, [r7, #20]
 80077dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	68fa      	ldr	r2, [r7, #12]
 80077e2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	685a      	ldr	r2, [r3, #4]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	693a      	ldr	r2, [r7, #16]
 80077f0:	621a      	str	r2, [r3, #32]
}
 80077f2:	bf00      	nop
 80077f4:	371c      	adds	r7, #28
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr
 80077fe:	bf00      	nop
 8007800:	40012c00 	.word	0x40012c00
 8007804:	40013400 	.word	0x40013400
 8007808:	40014000 	.word	0x40014000
 800780c:	40014400 	.word	0x40014400
 8007810:	40014800 	.word	0x40014800
 8007814:	40015000 	.word	0x40015000

08007818 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007818:	b480      	push	{r7}
 800781a:	b087      	sub	sp, #28
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6a1b      	ldr	r3, [r3, #32]
 8007828:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6a1b      	ldr	r3, [r3, #32]
 800782e:	f023 0201 	bic.w	r2, r3, #1
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	699b      	ldr	r3, [r3, #24]
 800783a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007842:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	011b      	lsls	r3, r3, #4
 8007848:	693a      	ldr	r2, [r7, #16]
 800784a:	4313      	orrs	r3, r2
 800784c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	f023 030a 	bic.w	r3, r3, #10
 8007854:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007856:	697a      	ldr	r2, [r7, #20]
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	4313      	orrs	r3, r2
 800785c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	693a      	ldr	r2, [r7, #16]
 8007862:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	697a      	ldr	r2, [r7, #20]
 8007868:	621a      	str	r2, [r3, #32]
}
 800786a:	bf00      	nop
 800786c:	371c      	adds	r7, #28
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr

08007876 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007876:	b480      	push	{r7}
 8007878:	b087      	sub	sp, #28
 800787a:	af00      	add	r7, sp, #0
 800787c:	60f8      	str	r0, [r7, #12]
 800787e:	60b9      	str	r1, [r7, #8]
 8007880:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	6a1b      	ldr	r3, [r3, #32]
 8007886:	f023 0210 	bic.w	r2, r3, #16
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	699b      	ldr	r3, [r3, #24]
 8007892:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	6a1b      	ldr	r3, [r3, #32]
 8007898:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80078a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	031b      	lsls	r3, r3, #12
 80078a6:	697a      	ldr	r2, [r7, #20]
 80078a8:	4313      	orrs	r3, r2
 80078aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80078b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	011b      	lsls	r3, r3, #4
 80078b8:	693a      	ldr	r2, [r7, #16]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	697a      	ldr	r2, [r7, #20]
 80078c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	693a      	ldr	r2, [r7, #16]
 80078c8:	621a      	str	r2, [r3, #32]
}
 80078ca:	bf00      	nop
 80078cc:	371c      	adds	r7, #28
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr

080078d6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80078d6:	b480      	push	{r7}
 80078d8:	b085      	sub	sp, #20
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
 80078de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80078ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80078f2:	683a      	ldr	r2, [r7, #0]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	f043 0307 	orr.w	r3, r3, #7
 80078fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	68fa      	ldr	r2, [r7, #12]
 8007902:	609a      	str	r2, [r3, #8]
}
 8007904:	bf00      	nop
 8007906:	3714      	adds	r7, #20
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr

08007910 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007910:	b480      	push	{r7}
 8007912:	b087      	sub	sp, #28
 8007914:	af00      	add	r7, sp, #0
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	60b9      	str	r1, [r7, #8]
 800791a:	607a      	str	r2, [r7, #4]
 800791c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800792a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	021a      	lsls	r2, r3, #8
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	431a      	orrs	r2, r3
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	4313      	orrs	r3, r2
 8007938:	697a      	ldr	r2, [r7, #20]
 800793a:	4313      	orrs	r3, r2
 800793c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	697a      	ldr	r2, [r7, #20]
 8007942:	609a      	str	r2, [r3, #8]
}
 8007944:	bf00      	nop
 8007946:	371c      	adds	r7, #28
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007950:	b480      	push	{r7}
 8007952:	b087      	sub	sp, #28
 8007954:	af00      	add	r7, sp, #0
 8007956:	60f8      	str	r0, [r7, #12]
 8007958:	60b9      	str	r1, [r7, #8]
 800795a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	f003 031f 	and.w	r3, r3, #31
 8007962:	2201      	movs	r2, #1
 8007964:	fa02 f303 	lsl.w	r3, r2, r3
 8007968:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6a1a      	ldr	r2, [r3, #32]
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	43db      	mvns	r3, r3
 8007972:	401a      	ands	r2, r3
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6a1a      	ldr	r2, [r3, #32]
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	f003 031f 	and.w	r3, r3, #31
 8007982:	6879      	ldr	r1, [r7, #4]
 8007984:	fa01 f303 	lsl.w	r3, r1, r3
 8007988:	431a      	orrs	r2, r3
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	621a      	str	r2, [r3, #32]
}
 800798e:	bf00      	nop
 8007990:	371c      	adds	r7, #28
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr
	...

0800799c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d109      	bne.n	80079c0 <HAL_TIMEx_PWMN_Start+0x24>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	bf14      	ite	ne
 80079b8:	2301      	movne	r3, #1
 80079ba:	2300      	moveq	r3, #0
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	e022      	b.n	8007a06 <HAL_TIMEx_PWMN_Start+0x6a>
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	2b04      	cmp	r3, #4
 80079c4:	d109      	bne.n	80079da <HAL_TIMEx_PWMN_Start+0x3e>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	bf14      	ite	ne
 80079d2:	2301      	movne	r3, #1
 80079d4:	2300      	moveq	r3, #0
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	e015      	b.n	8007a06 <HAL_TIMEx_PWMN_Start+0x6a>
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	2b08      	cmp	r3, #8
 80079de:	d109      	bne.n	80079f4 <HAL_TIMEx_PWMN_Start+0x58>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	bf14      	ite	ne
 80079ec:	2301      	movne	r3, #1
 80079ee:	2300      	moveq	r3, #0
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	e008      	b.n	8007a06 <HAL_TIMEx_PWMN_Start+0x6a>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	bf14      	ite	ne
 8007a00:	2301      	movne	r3, #1
 8007a02:	2300      	moveq	r3, #0
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d001      	beq.n	8007a0e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e073      	b.n	8007af6 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d104      	bne.n	8007a1e <HAL_TIMEx_PWMN_Start+0x82>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2202      	movs	r2, #2
 8007a18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a1c:	e013      	b.n	8007a46 <HAL_TIMEx_PWMN_Start+0xaa>
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	2b04      	cmp	r3, #4
 8007a22:	d104      	bne.n	8007a2e <HAL_TIMEx_PWMN_Start+0x92>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2202      	movs	r2, #2
 8007a28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a2c:	e00b      	b.n	8007a46 <HAL_TIMEx_PWMN_Start+0xaa>
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	2b08      	cmp	r3, #8
 8007a32:	d104      	bne.n	8007a3e <HAL_TIMEx_PWMN_Start+0xa2>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2202      	movs	r2, #2
 8007a38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007a3c:	e003      	b.n	8007a46 <HAL_TIMEx_PWMN_Start+0xaa>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2202      	movs	r2, #2
 8007a42:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2204      	movs	r2, #4
 8007a4c:	6839      	ldr	r1, [r7, #0]
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f000 f9f4 	bl	8007e3c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007a62:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a25      	ldr	r2, [pc, #148]	; (8007b00 <HAL_TIMEx_PWMN_Start+0x164>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d022      	beq.n	8007ab4 <HAL_TIMEx_PWMN_Start+0x118>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a76:	d01d      	beq.n	8007ab4 <HAL_TIMEx_PWMN_Start+0x118>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a21      	ldr	r2, [pc, #132]	; (8007b04 <HAL_TIMEx_PWMN_Start+0x168>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d018      	beq.n	8007ab4 <HAL_TIMEx_PWMN_Start+0x118>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a20      	ldr	r2, [pc, #128]	; (8007b08 <HAL_TIMEx_PWMN_Start+0x16c>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d013      	beq.n	8007ab4 <HAL_TIMEx_PWMN_Start+0x118>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a1e      	ldr	r2, [pc, #120]	; (8007b0c <HAL_TIMEx_PWMN_Start+0x170>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d00e      	beq.n	8007ab4 <HAL_TIMEx_PWMN_Start+0x118>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a1d      	ldr	r2, [pc, #116]	; (8007b10 <HAL_TIMEx_PWMN_Start+0x174>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d009      	beq.n	8007ab4 <HAL_TIMEx_PWMN_Start+0x118>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a1b      	ldr	r2, [pc, #108]	; (8007b14 <HAL_TIMEx_PWMN_Start+0x178>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d004      	beq.n	8007ab4 <HAL_TIMEx_PWMN_Start+0x118>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a1a      	ldr	r2, [pc, #104]	; (8007b18 <HAL_TIMEx_PWMN_Start+0x17c>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d115      	bne.n	8007ae0 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	689a      	ldr	r2, [r3, #8]
 8007aba:	4b18      	ldr	r3, [pc, #96]	; (8007b1c <HAL_TIMEx_PWMN_Start+0x180>)
 8007abc:	4013      	ands	r3, r2
 8007abe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2b06      	cmp	r3, #6
 8007ac4:	d015      	beq.n	8007af2 <HAL_TIMEx_PWMN_Start+0x156>
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007acc:	d011      	beq.n	8007af2 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f042 0201 	orr.w	r2, r2, #1
 8007adc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ade:	e008      	b.n	8007af2 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f042 0201 	orr.w	r2, r2, #1
 8007aee:	601a      	str	r2, [r3, #0]
 8007af0:	e000      	b.n	8007af4 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007af2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3710      	adds	r7, #16
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop
 8007b00:	40012c00 	.word	0x40012c00
 8007b04:	40000400 	.word	0x40000400
 8007b08:	40000800 	.word	0x40000800
 8007b0c:	40000c00 	.word	0x40000c00
 8007b10:	40013400 	.word	0x40013400
 8007b14:	40014000 	.word	0x40014000
 8007b18:	40015000 	.word	0x40015000
 8007b1c:	00010007 	.word	0x00010007

08007b20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b085      	sub	sp, #20
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d101      	bne.n	8007b38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b34:	2302      	movs	r3, #2
 8007b36:	e074      	b.n	8007c22 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2202      	movs	r2, #2
 8007b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a34      	ldr	r2, [pc, #208]	; (8007c30 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d009      	beq.n	8007b76 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a33      	ldr	r2, [pc, #204]	; (8007c34 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d004      	beq.n	8007b76 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a31      	ldr	r2, [pc, #196]	; (8007c38 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d108      	bne.n	8007b88 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007b7c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	4313      	orrs	r3, r2
 8007b86:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	68fa      	ldr	r2, [r7, #12]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	68fa      	ldr	r2, [r7, #12]
 8007ba4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a21      	ldr	r2, [pc, #132]	; (8007c30 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d022      	beq.n	8007bf6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bb8:	d01d      	beq.n	8007bf6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a1f      	ldr	r2, [pc, #124]	; (8007c3c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d018      	beq.n	8007bf6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a1d      	ldr	r2, [pc, #116]	; (8007c40 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d013      	beq.n	8007bf6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a1c      	ldr	r2, [pc, #112]	; (8007c44 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d00e      	beq.n	8007bf6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a15      	ldr	r2, [pc, #84]	; (8007c34 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d009      	beq.n	8007bf6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a18      	ldr	r2, [pc, #96]	; (8007c48 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d004      	beq.n	8007bf6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a11      	ldr	r2, [pc, #68]	; (8007c38 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d10c      	bne.n	8007c10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	68ba      	ldr	r2, [r7, #8]
 8007c04:	4313      	orrs	r3, r2
 8007c06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	68ba      	ldr	r2, [r7, #8]
 8007c0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2201      	movs	r2, #1
 8007c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c20:	2300      	movs	r3, #0
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3714      	adds	r7, #20
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr
 8007c2e:	bf00      	nop
 8007c30:	40012c00 	.word	0x40012c00
 8007c34:	40013400 	.word	0x40013400
 8007c38:	40015000 	.word	0x40015000
 8007c3c:	40000400 	.word	0x40000400
 8007c40:	40000800 	.word	0x40000800
 8007c44:	40000c00 	.word	0x40000c00
 8007c48:	40014000 	.word	0x40014000

08007c4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b085      	sub	sp, #20
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007c56:	2300      	movs	r3, #0
 8007c58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d101      	bne.n	8007c68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007c64:	2302      	movs	r3, #2
 8007c66:	e096      	b.n	8007d96 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	695b      	ldr	r3, [r3, #20]
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	699b      	ldr	r3, [r3, #24]
 8007cdc:	041b      	lsls	r3, r3, #16
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a2f      	ldr	r2, [pc, #188]	; (8007da4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d009      	beq.n	8007d00 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a2d      	ldr	r2, [pc, #180]	; (8007da8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d004      	beq.n	8007d00 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a2c      	ldr	r2, [pc, #176]	; (8007dac <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d106      	bne.n	8007d0e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	69db      	ldr	r3, [r3, #28]
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a24      	ldr	r2, [pc, #144]	; (8007da4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d009      	beq.n	8007d2c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a22      	ldr	r2, [pc, #136]	; (8007da8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d004      	beq.n	8007d2c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a21      	ldr	r2, [pc, #132]	; (8007dac <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d12b      	bne.n	8007d84 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d36:	051b      	lsls	r3, r3, #20
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	6a1b      	ldr	r3, [r3, #32]
 8007d46:	4313      	orrs	r3, r2
 8007d48:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d54:	4313      	orrs	r3, r2
 8007d56:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a11      	ldr	r2, [pc, #68]	; (8007da4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d009      	beq.n	8007d76 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a10      	ldr	r2, [pc, #64]	; (8007da8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d004      	beq.n	8007d76 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a0e      	ldr	r2, [pc, #56]	; (8007dac <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d106      	bne.n	8007d84 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d80:	4313      	orrs	r3, r2
 8007d82:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	68fa      	ldr	r2, [r7, #12]
 8007d8a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3714      	adds	r7, #20
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop
 8007da4:	40012c00 	.word	0x40012c00
 8007da8:	40013400 	.word	0x40013400
 8007dac:	40015000 	.word	0x40015000

08007db0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007db8:	bf00      	nop
 8007dba:	370c      	adds	r7, #12
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007dcc:	bf00      	nop
 8007dce:	370c      	adds	r7, #12
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007de0:	bf00      	nop
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007df4:	bf00      	nop
 8007df6:	370c      	adds	r7, #12
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b083      	sub	sp, #12
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007e08:	bf00      	nop
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007e1c:	bf00      	nop
 8007e1e:	370c      	adds	r7, #12
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007e30:	bf00      	nop
 8007e32:	370c      	adds	r7, #12
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b087      	sub	sp, #28
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	60b9      	str	r1, [r7, #8]
 8007e46:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	f003 031f 	and.w	r3, r3, #31
 8007e4e:	2204      	movs	r2, #4
 8007e50:	fa02 f303 	lsl.w	r3, r2, r3
 8007e54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	6a1a      	ldr	r2, [r3, #32]
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	43db      	mvns	r3, r3
 8007e5e:	401a      	ands	r2, r3
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6a1a      	ldr	r2, [r3, #32]
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	f003 031f 	and.w	r3, r3, #31
 8007e6e:	6879      	ldr	r1, [r7, #4]
 8007e70:	fa01 f303 	lsl.w	r3, r1, r3
 8007e74:	431a      	orrs	r2, r3
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	621a      	str	r2, [r3, #32]
}
 8007e7a:	bf00      	nop
 8007e7c:	371c      	adds	r7, #28
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr

08007e86 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b082      	sub	sp, #8
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d101      	bne.n	8007e98 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	e042      	b.n	8007f1e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d106      	bne.n	8007eb0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f7fa fdbc 	bl	8002a28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2224      	movs	r2, #36	; 0x24
 8007eb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f022 0201 	bic.w	r2, r2, #1
 8007ec6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 fc51 	bl	8008770 <UART_SetConfig>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d101      	bne.n	8007ed8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	e022      	b.n	8007f1e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d002      	beq.n	8007ee6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 ff41 	bl	8008d68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	685a      	ldr	r2, [r3, #4]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ef4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	689a      	ldr	r2, [r3, #8]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f04:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f042 0201 	orr.w	r2, r2, #1
 8007f14:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 ffc8 	bl	8008eac <UART_CheckIdleState>
 8007f1c:	4603      	mov	r3, r0
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3708      	adds	r7, #8
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b08a      	sub	sp, #40	; 0x28
 8007f2a:	af02      	add	r7, sp, #8
 8007f2c:	60f8      	str	r0, [r7, #12]
 8007f2e:	60b9      	str	r1, [r7, #8]
 8007f30:	603b      	str	r3, [r7, #0]
 8007f32:	4613      	mov	r3, r2
 8007f34:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f3c:	2b20      	cmp	r3, #32
 8007f3e:	f040 8083 	bne.w	8008048 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d002      	beq.n	8007f4e <HAL_UART_Transmit+0x28>
 8007f48:	88fb      	ldrh	r3, [r7, #6]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d101      	bne.n	8007f52 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e07b      	b.n	800804a <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d101      	bne.n	8007f60 <HAL_UART_Transmit+0x3a>
 8007f5c:	2302      	movs	r3, #2
 8007f5e:	e074      	b.n	800804a <HAL_UART_Transmit+0x124>
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2221      	movs	r2, #33	; 0x21
 8007f74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f78:	f7fa fe0a 	bl	8002b90 <HAL_GetTick>
 8007f7c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	88fa      	ldrh	r2, [r7, #6]
 8007f82:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	88fa      	ldrh	r2, [r7, #6]
 8007f8a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f96:	d108      	bne.n	8007faa <HAL_UART_Transmit+0x84>
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	691b      	ldr	r3, [r3, #16]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d104      	bne.n	8007faa <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	61bb      	str	r3, [r7, #24]
 8007fa8:	e003      	b.n	8007fb2 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007fba:	e02c      	b.n	8008016 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	9300      	str	r3, [sp, #0]
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	2180      	movs	r1, #128	; 0x80
 8007fc6:	68f8      	ldr	r0, [r7, #12]
 8007fc8:	f000 ffbb 	bl	8008f42 <UART_WaitOnFlagUntilTimeout>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d001      	beq.n	8007fd6 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007fd2:	2303      	movs	r3, #3
 8007fd4:	e039      	b.n	800804a <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d10b      	bne.n	8007ff4 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007fdc:	69bb      	ldr	r3, [r7, #24]
 8007fde:	881b      	ldrh	r3, [r3, #0]
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007fea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	3302      	adds	r3, #2
 8007ff0:	61bb      	str	r3, [r7, #24]
 8007ff2:	e007      	b.n	8008004 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	781a      	ldrb	r2, [r3, #0]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	3301      	adds	r3, #1
 8008002:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800800a:	b29b      	uxth	r3, r3
 800800c:	3b01      	subs	r3, #1
 800800e:	b29a      	uxth	r2, r3
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800801c:	b29b      	uxth	r3, r3
 800801e:	2b00      	cmp	r3, #0
 8008020:	d1cc      	bne.n	8007fbc <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	9300      	str	r3, [sp, #0]
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	2200      	movs	r2, #0
 800802a:	2140      	movs	r1, #64	; 0x40
 800802c:	68f8      	ldr	r0, [r7, #12]
 800802e:	f000 ff88 	bl	8008f42 <UART_WaitOnFlagUntilTimeout>
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d001      	beq.n	800803c <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008038:	2303      	movs	r3, #3
 800803a:	e006      	b.n	800804a <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2220      	movs	r2, #32
 8008040:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008044:	2300      	movs	r3, #0
 8008046:	e000      	b.n	800804a <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008048:	2302      	movs	r3, #2
  }
}
 800804a:	4618      	mov	r0, r3
 800804c:	3720      	adds	r7, #32
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
	...

08008054 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b08a      	sub	sp, #40	; 0x28
 8008058:	af00      	add	r7, sp, #0
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	60b9      	str	r1, [r7, #8]
 800805e:	4613      	mov	r3, r2
 8008060:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008068:	2b20      	cmp	r3, #32
 800806a:	d142      	bne.n	80080f2 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d002      	beq.n	8008078 <HAL_UART_Receive_IT+0x24>
 8008072:	88fb      	ldrh	r3, [r7, #6]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d101      	bne.n	800807c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008078:	2301      	movs	r3, #1
 800807a:	e03b      	b.n	80080f4 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008082:	2b01      	cmp	r3, #1
 8008084:	d101      	bne.n	800808a <HAL_UART_Receive_IT+0x36>
 8008086:	2302      	movs	r3, #2
 8008088:	e034      	b.n	80080f4 <HAL_UART_Receive_IT+0xa0>
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2201      	movs	r2, #1
 800808e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2200      	movs	r2, #0
 8008096:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a17      	ldr	r2, [pc, #92]	; (80080fc <HAL_UART_Receive_IT+0xa8>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d01f      	beq.n	80080e2 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d018      	beq.n	80080e2 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	e853 3f00 	ldrex	r3, [r3]
 80080bc:	613b      	str	r3, [r7, #16]
   return(result);
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80080c4:	627b      	str	r3, [r7, #36]	; 0x24
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	461a      	mov	r2, r3
 80080cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ce:	623b      	str	r3, [r7, #32]
 80080d0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d2:	69f9      	ldr	r1, [r7, #28]
 80080d4:	6a3a      	ldr	r2, [r7, #32]
 80080d6:	e841 2300 	strex	r3, r2, [r1]
 80080da:	61bb      	str	r3, [r7, #24]
   return(result);
 80080dc:	69bb      	ldr	r3, [r7, #24]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d1e6      	bne.n	80080b0 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80080e2:	88fb      	ldrh	r3, [r7, #6]
 80080e4:	461a      	mov	r2, r3
 80080e6:	68b9      	ldr	r1, [r7, #8]
 80080e8:	68f8      	ldr	r0, [r7, #12]
 80080ea:	f000 fff3 	bl	80090d4 <UART_Start_Receive_IT>
 80080ee:	4603      	mov	r3, r0
 80080f0:	e000      	b.n	80080f4 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80080f2:	2302      	movs	r3, #2
  }
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3728      	adds	r7, #40	; 0x28
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	40008000 	.word	0x40008000

08008100 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b0ba      	sub	sp, #232	; 0xe8
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	69db      	ldr	r3, [r3, #28]
 800810e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008126:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800812a:	f640 030f 	movw	r3, #2063	; 0x80f
 800812e:	4013      	ands	r3, r2
 8008130:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008134:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008138:	2b00      	cmp	r3, #0
 800813a:	d11b      	bne.n	8008174 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800813c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008140:	f003 0320 	and.w	r3, r3, #32
 8008144:	2b00      	cmp	r3, #0
 8008146:	d015      	beq.n	8008174 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800814c:	f003 0320 	and.w	r3, r3, #32
 8008150:	2b00      	cmp	r3, #0
 8008152:	d105      	bne.n	8008160 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008154:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800815c:	2b00      	cmp	r3, #0
 800815e:	d009      	beq.n	8008174 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008164:	2b00      	cmp	r3, #0
 8008166:	f000 82d6 	beq.w	8008716 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	4798      	blx	r3
      }
      return;
 8008172:	e2d0      	b.n	8008716 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008174:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008178:	2b00      	cmp	r3, #0
 800817a:	f000 811f 	beq.w	80083bc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800817e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008182:	4b8b      	ldr	r3, [pc, #556]	; (80083b0 <HAL_UART_IRQHandler+0x2b0>)
 8008184:	4013      	ands	r3, r2
 8008186:	2b00      	cmp	r3, #0
 8008188:	d106      	bne.n	8008198 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800818a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800818e:	4b89      	ldr	r3, [pc, #548]	; (80083b4 <HAL_UART_IRQHandler+0x2b4>)
 8008190:	4013      	ands	r3, r2
 8008192:	2b00      	cmp	r3, #0
 8008194:	f000 8112 	beq.w	80083bc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800819c:	f003 0301 	and.w	r3, r3, #1
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d011      	beq.n	80081c8 <HAL_UART_IRQHandler+0xc8>
 80081a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d00b      	beq.n	80081c8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	2201      	movs	r2, #1
 80081b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081be:	f043 0201 	orr.w	r2, r3, #1
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081cc:	f003 0302 	and.w	r3, r3, #2
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d011      	beq.n	80081f8 <HAL_UART_IRQHandler+0xf8>
 80081d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081d8:	f003 0301 	and.w	r3, r3, #1
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d00b      	beq.n	80081f8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	2202      	movs	r2, #2
 80081e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081ee:	f043 0204 	orr.w	r2, r3, #4
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081fc:	f003 0304 	and.w	r3, r3, #4
 8008200:	2b00      	cmp	r3, #0
 8008202:	d011      	beq.n	8008228 <HAL_UART_IRQHandler+0x128>
 8008204:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008208:	f003 0301 	and.w	r3, r3, #1
 800820c:	2b00      	cmp	r3, #0
 800820e:	d00b      	beq.n	8008228 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	2204      	movs	r2, #4
 8008216:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800821e:	f043 0202 	orr.w	r2, r3, #2
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800822c:	f003 0308 	and.w	r3, r3, #8
 8008230:	2b00      	cmp	r3, #0
 8008232:	d017      	beq.n	8008264 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008238:	f003 0320 	and.w	r3, r3, #32
 800823c:	2b00      	cmp	r3, #0
 800823e:	d105      	bne.n	800824c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008240:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008244:	4b5a      	ldr	r3, [pc, #360]	; (80083b0 <HAL_UART_IRQHandler+0x2b0>)
 8008246:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008248:	2b00      	cmp	r3, #0
 800824a:	d00b      	beq.n	8008264 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2208      	movs	r2, #8
 8008252:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800825a:	f043 0208 	orr.w	r2, r3, #8
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008268:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800826c:	2b00      	cmp	r3, #0
 800826e:	d012      	beq.n	8008296 <HAL_UART_IRQHandler+0x196>
 8008270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008274:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008278:	2b00      	cmp	r3, #0
 800827a:	d00c      	beq.n	8008296 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008284:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800828c:	f043 0220 	orr.w	r2, r3, #32
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800829c:	2b00      	cmp	r3, #0
 800829e:	f000 823c 	beq.w	800871a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80082a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082a6:	f003 0320 	and.w	r3, r3, #32
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d013      	beq.n	80082d6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80082ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082b2:	f003 0320 	and.w	r3, r3, #32
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d105      	bne.n	80082c6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80082ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d007      	beq.n	80082d6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d003      	beq.n	80082d6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ea:	2b40      	cmp	r3, #64	; 0x40
 80082ec:	d005      	beq.n	80082fa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80082ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80082f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d04f      	beq.n	800839a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f001 f814 	bl	8009328 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800830a:	2b40      	cmp	r3, #64	; 0x40
 800830c:	d141      	bne.n	8008392 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	3308      	adds	r3, #8
 8008314:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008318:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800831c:	e853 3f00 	ldrex	r3, [r3]
 8008320:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008324:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008328:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800832c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	3308      	adds	r3, #8
 8008336:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800833a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800833e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008342:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008346:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800834a:	e841 2300 	strex	r3, r2, [r1]
 800834e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008352:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008356:	2b00      	cmp	r3, #0
 8008358:	d1d9      	bne.n	800830e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800835e:	2b00      	cmp	r3, #0
 8008360:	d013      	beq.n	800838a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008366:	4a14      	ldr	r2, [pc, #80]	; (80083b8 <HAL_UART_IRQHandler+0x2b8>)
 8008368:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800836e:	4618      	mov	r0, r3
 8008370:	f7fc fadc 	bl	800492c <HAL_DMA_Abort_IT>
 8008374:	4603      	mov	r3, r0
 8008376:	2b00      	cmp	r3, #0
 8008378:	d017      	beq.n	80083aa <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800837e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008384:	4610      	mov	r0, r2
 8008386:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008388:	e00f      	b.n	80083aa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 f9da 	bl	8008744 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008390:	e00b      	b.n	80083aa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 f9d6 	bl	8008744 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008398:	e007      	b.n	80083aa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 f9d2 	bl	8008744 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80083a8:	e1b7      	b.n	800871a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083aa:	bf00      	nop
    return;
 80083ac:	e1b5      	b.n	800871a <HAL_UART_IRQHandler+0x61a>
 80083ae:	bf00      	nop
 80083b0:	10000001 	.word	0x10000001
 80083b4:	04000120 	.word	0x04000120
 80083b8:	080093f5 	.word	0x080093f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	f040 814a 	bne.w	800865a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80083c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083ca:	f003 0310 	and.w	r3, r3, #16
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	f000 8143 	beq.w	800865a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80083d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083d8:	f003 0310 	and.w	r3, r3, #16
 80083dc:	2b00      	cmp	r3, #0
 80083de:	f000 813c 	beq.w	800865a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2210      	movs	r2, #16
 80083e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083f4:	2b40      	cmp	r3, #64	; 0x40
 80083f6:	f040 80b5 	bne.w	8008564 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008406:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800840a:	2b00      	cmp	r3, #0
 800840c:	f000 8187 	beq.w	800871e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008416:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800841a:	429a      	cmp	r2, r3
 800841c:	f080 817f 	bcs.w	800871e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008426:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f003 0320 	and.w	r3, r3, #32
 8008436:	2b00      	cmp	r3, #0
 8008438:	f040 8086 	bne.w	8008548 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008444:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008448:	e853 3f00 	ldrex	r3, [r3]
 800844c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008450:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008454:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008458:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	461a      	mov	r2, r3
 8008462:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008466:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800846a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008472:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008476:	e841 2300 	strex	r3, r2, [r1]
 800847a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800847e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008482:	2b00      	cmp	r3, #0
 8008484:	d1da      	bne.n	800843c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	3308      	adds	r3, #8
 800848c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800848e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008490:	e853 3f00 	ldrex	r3, [r3]
 8008494:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008496:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008498:	f023 0301 	bic.w	r3, r3, #1
 800849c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	3308      	adds	r3, #8
 80084a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80084aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80084ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80084b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80084b6:	e841 2300 	strex	r3, r2, [r1]
 80084ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80084bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d1e1      	bne.n	8008486 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	3308      	adds	r3, #8
 80084c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084cc:	e853 3f00 	ldrex	r3, [r3]
 80084d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80084d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	3308      	adds	r3, #8
 80084e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80084e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80084e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80084ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80084ee:	e841 2300 	strex	r3, r2, [r1]
 80084f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80084f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d1e3      	bne.n	80084c2 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2220      	movs	r2, #32
 80084fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800850e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008510:	e853 3f00 	ldrex	r3, [r3]
 8008514:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008516:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008518:	f023 0310 	bic.w	r3, r3, #16
 800851c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	461a      	mov	r2, r3
 8008526:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800852a:	65bb      	str	r3, [r7, #88]	; 0x58
 800852c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800852e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008530:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008532:	e841 2300 	strex	r3, r2, [r1]
 8008536:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008538:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800853a:	2b00      	cmp	r3, #0
 800853c:	d1e4      	bne.n	8008508 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008542:	4618      	mov	r0, r3
 8008544:	f7fc f999 	bl	800487a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008554:	b29b      	uxth	r3, r3
 8008556:	1ad3      	subs	r3, r2, r3
 8008558:	b29b      	uxth	r3, r3
 800855a:	4619      	mov	r1, r3
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 f8fb 	bl	8008758 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008562:	e0dc      	b.n	800871e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008570:	b29b      	uxth	r3, r3
 8008572:	1ad3      	subs	r3, r2, r3
 8008574:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800857e:	b29b      	uxth	r3, r3
 8008580:	2b00      	cmp	r3, #0
 8008582:	f000 80ce 	beq.w	8008722 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8008586:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800858a:	2b00      	cmp	r3, #0
 800858c:	f000 80c9 	beq.w	8008722 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008598:	e853 3f00 	ldrex	r3, [r3]
 800859c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800859e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	461a      	mov	r2, r3
 80085ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80085b2:	647b      	str	r3, [r7, #68]	; 0x44
 80085b4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80085b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085ba:	e841 2300 	strex	r3, r2, [r1]
 80085be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80085c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d1e4      	bne.n	8008590 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	3308      	adds	r3, #8
 80085cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d0:	e853 3f00 	ldrex	r3, [r3]
 80085d4:	623b      	str	r3, [r7, #32]
   return(result);
 80085d6:	6a3b      	ldr	r3, [r7, #32]
 80085d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085dc:	f023 0301 	bic.w	r3, r3, #1
 80085e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	3308      	adds	r3, #8
 80085ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80085ee:	633a      	str	r2, [r7, #48]	; 0x30
 80085f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085f6:	e841 2300 	strex	r3, r2, [r1]
 80085fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80085fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d1e1      	bne.n	80085c6 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2220      	movs	r2, #32
 8008606:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2200      	movs	r2, #0
 800860e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2200      	movs	r2, #0
 8008614:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	e853 3f00 	ldrex	r3, [r3]
 8008622:	60fb      	str	r3, [r7, #12]
   return(result);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f023 0310 	bic.w	r3, r3, #16
 800862a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	461a      	mov	r2, r3
 8008634:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008638:	61fb      	str	r3, [r7, #28]
 800863a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800863c:	69b9      	ldr	r1, [r7, #24]
 800863e:	69fa      	ldr	r2, [r7, #28]
 8008640:	e841 2300 	strex	r3, r2, [r1]
 8008644:	617b      	str	r3, [r7, #20]
   return(result);
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d1e4      	bne.n	8008616 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800864c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008650:	4619      	mov	r1, r3
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 f880 	bl	8008758 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008658:	e063      	b.n	8008722 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800865a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800865e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008662:	2b00      	cmp	r3, #0
 8008664:	d00e      	beq.n	8008684 <HAL_UART_IRQHandler+0x584>
 8008666:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800866a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800866e:	2b00      	cmp	r3, #0
 8008670:	d008      	beq.n	8008684 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800867a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f001 fb57 	bl	8009d30 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008682:	e051      	b.n	8008728 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800868c:	2b00      	cmp	r3, #0
 800868e:	d014      	beq.n	80086ba <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008698:	2b00      	cmp	r3, #0
 800869a:	d105      	bne.n	80086a8 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800869c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d008      	beq.n	80086ba <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d03a      	beq.n	8008726 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	4798      	blx	r3
    }
    return;
 80086b8:	e035      	b.n	8008726 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80086ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d009      	beq.n	80086da <HAL_UART_IRQHandler+0x5da>
 80086c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d003      	beq.n	80086da <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 fea4 	bl	8009420 <UART_EndTransmit_IT>
    return;
 80086d8:	e026      	b.n	8008728 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80086da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d009      	beq.n	80086fa <HAL_UART_IRQHandler+0x5fa>
 80086e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d003      	beq.n	80086fa <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f001 fb30 	bl	8009d58 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80086f8:	e016      	b.n	8008728 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80086fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008702:	2b00      	cmp	r3, #0
 8008704:	d010      	beq.n	8008728 <HAL_UART_IRQHandler+0x628>
 8008706:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800870a:	2b00      	cmp	r3, #0
 800870c:	da0c      	bge.n	8008728 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f001 fb18 	bl	8009d44 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008714:	e008      	b.n	8008728 <HAL_UART_IRQHandler+0x628>
      return;
 8008716:	bf00      	nop
 8008718:	e006      	b.n	8008728 <HAL_UART_IRQHandler+0x628>
    return;
 800871a:	bf00      	nop
 800871c:	e004      	b.n	8008728 <HAL_UART_IRQHandler+0x628>
      return;
 800871e:	bf00      	nop
 8008720:	e002      	b.n	8008728 <HAL_UART_IRQHandler+0x628>
      return;
 8008722:	bf00      	nop
 8008724:	e000      	b.n	8008728 <HAL_UART_IRQHandler+0x628>
    return;
 8008726:	bf00      	nop
  }
}
 8008728:	37e8      	adds	r7, #232	; 0xe8
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop

08008730 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008730:	b480      	push	{r7}
 8008732:	b083      	sub	sp, #12
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008738:	bf00      	nop
 800873a:	370c      	adds	r7, #12
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr

08008744 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008744:	b480      	push	{r7}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800874c:	bf00      	nop
 800874e:	370c      	adds	r7, #12
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr

08008758 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008758:	b480      	push	{r7}
 800875a:	b083      	sub	sp, #12
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	460b      	mov	r3, r1
 8008762:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008764:	bf00      	nop
 8008766:	370c      	adds	r7, #12
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008770:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008774:	b08c      	sub	sp, #48	; 0x30
 8008776:	af00      	add	r7, sp, #0
 8008778:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800877a:	2300      	movs	r3, #0
 800877c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	689a      	ldr	r2, [r3, #8]
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	691b      	ldr	r3, [r3, #16]
 8008788:	431a      	orrs	r2, r3
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	695b      	ldr	r3, [r3, #20]
 800878e:	431a      	orrs	r2, r3
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	69db      	ldr	r3, [r3, #28]
 8008794:	4313      	orrs	r3, r2
 8008796:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	4baa      	ldr	r3, [pc, #680]	; (8008a48 <UART_SetConfig+0x2d8>)
 80087a0:	4013      	ands	r3, r2
 80087a2:	697a      	ldr	r2, [r7, #20]
 80087a4:	6812      	ldr	r2, [r2, #0]
 80087a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087a8:	430b      	orrs	r3, r1
 80087aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	68da      	ldr	r2, [r3, #12]
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	430a      	orrs	r2, r1
 80087c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	699b      	ldr	r3, [r3, #24]
 80087c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a9f      	ldr	r2, [pc, #636]	; (8008a4c <UART_SetConfig+0x2dc>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d004      	beq.n	80087dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	6a1b      	ldr	r3, [r3, #32]
 80087d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087d8:	4313      	orrs	r3, r2
 80087da:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	689b      	ldr	r3, [r3, #8]
 80087e2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80087e6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80087ea:	697a      	ldr	r2, [r7, #20]
 80087ec:	6812      	ldr	r2, [r2, #0]
 80087ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087f0:	430b      	orrs	r3, r1
 80087f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087fa:	f023 010f 	bic.w	r1, r3, #15
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	430a      	orrs	r2, r1
 8008808:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a90      	ldr	r2, [pc, #576]	; (8008a50 <UART_SetConfig+0x2e0>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d125      	bne.n	8008860 <UART_SetConfig+0xf0>
 8008814:	4b8f      	ldr	r3, [pc, #572]	; (8008a54 <UART_SetConfig+0x2e4>)
 8008816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800881a:	f003 0303 	and.w	r3, r3, #3
 800881e:	2b03      	cmp	r3, #3
 8008820:	d81a      	bhi.n	8008858 <UART_SetConfig+0xe8>
 8008822:	a201      	add	r2, pc, #4	; (adr r2, 8008828 <UART_SetConfig+0xb8>)
 8008824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008828:	08008839 	.word	0x08008839
 800882c:	08008849 	.word	0x08008849
 8008830:	08008841 	.word	0x08008841
 8008834:	08008851 	.word	0x08008851
 8008838:	2301      	movs	r3, #1
 800883a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800883e:	e116      	b.n	8008a6e <UART_SetConfig+0x2fe>
 8008840:	2302      	movs	r3, #2
 8008842:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008846:	e112      	b.n	8008a6e <UART_SetConfig+0x2fe>
 8008848:	2304      	movs	r3, #4
 800884a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800884e:	e10e      	b.n	8008a6e <UART_SetConfig+0x2fe>
 8008850:	2308      	movs	r3, #8
 8008852:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008856:	e10a      	b.n	8008a6e <UART_SetConfig+0x2fe>
 8008858:	2310      	movs	r3, #16
 800885a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800885e:	e106      	b.n	8008a6e <UART_SetConfig+0x2fe>
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a7c      	ldr	r2, [pc, #496]	; (8008a58 <UART_SetConfig+0x2e8>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d138      	bne.n	80088dc <UART_SetConfig+0x16c>
 800886a:	4b7a      	ldr	r3, [pc, #488]	; (8008a54 <UART_SetConfig+0x2e4>)
 800886c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008870:	f003 030c 	and.w	r3, r3, #12
 8008874:	2b0c      	cmp	r3, #12
 8008876:	d82d      	bhi.n	80088d4 <UART_SetConfig+0x164>
 8008878:	a201      	add	r2, pc, #4	; (adr r2, 8008880 <UART_SetConfig+0x110>)
 800887a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800887e:	bf00      	nop
 8008880:	080088b5 	.word	0x080088b5
 8008884:	080088d5 	.word	0x080088d5
 8008888:	080088d5 	.word	0x080088d5
 800888c:	080088d5 	.word	0x080088d5
 8008890:	080088c5 	.word	0x080088c5
 8008894:	080088d5 	.word	0x080088d5
 8008898:	080088d5 	.word	0x080088d5
 800889c:	080088d5 	.word	0x080088d5
 80088a0:	080088bd 	.word	0x080088bd
 80088a4:	080088d5 	.word	0x080088d5
 80088a8:	080088d5 	.word	0x080088d5
 80088ac:	080088d5 	.word	0x080088d5
 80088b0:	080088cd 	.word	0x080088cd
 80088b4:	2300      	movs	r3, #0
 80088b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088ba:	e0d8      	b.n	8008a6e <UART_SetConfig+0x2fe>
 80088bc:	2302      	movs	r3, #2
 80088be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088c2:	e0d4      	b.n	8008a6e <UART_SetConfig+0x2fe>
 80088c4:	2304      	movs	r3, #4
 80088c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088ca:	e0d0      	b.n	8008a6e <UART_SetConfig+0x2fe>
 80088cc:	2308      	movs	r3, #8
 80088ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088d2:	e0cc      	b.n	8008a6e <UART_SetConfig+0x2fe>
 80088d4:	2310      	movs	r3, #16
 80088d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088da:	e0c8      	b.n	8008a6e <UART_SetConfig+0x2fe>
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a5e      	ldr	r2, [pc, #376]	; (8008a5c <UART_SetConfig+0x2ec>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d125      	bne.n	8008932 <UART_SetConfig+0x1c2>
 80088e6:	4b5b      	ldr	r3, [pc, #364]	; (8008a54 <UART_SetConfig+0x2e4>)
 80088e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088ec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80088f0:	2b30      	cmp	r3, #48	; 0x30
 80088f2:	d016      	beq.n	8008922 <UART_SetConfig+0x1b2>
 80088f4:	2b30      	cmp	r3, #48	; 0x30
 80088f6:	d818      	bhi.n	800892a <UART_SetConfig+0x1ba>
 80088f8:	2b20      	cmp	r3, #32
 80088fa:	d00a      	beq.n	8008912 <UART_SetConfig+0x1a2>
 80088fc:	2b20      	cmp	r3, #32
 80088fe:	d814      	bhi.n	800892a <UART_SetConfig+0x1ba>
 8008900:	2b00      	cmp	r3, #0
 8008902:	d002      	beq.n	800890a <UART_SetConfig+0x19a>
 8008904:	2b10      	cmp	r3, #16
 8008906:	d008      	beq.n	800891a <UART_SetConfig+0x1aa>
 8008908:	e00f      	b.n	800892a <UART_SetConfig+0x1ba>
 800890a:	2300      	movs	r3, #0
 800890c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008910:	e0ad      	b.n	8008a6e <UART_SetConfig+0x2fe>
 8008912:	2302      	movs	r3, #2
 8008914:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008918:	e0a9      	b.n	8008a6e <UART_SetConfig+0x2fe>
 800891a:	2304      	movs	r3, #4
 800891c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008920:	e0a5      	b.n	8008a6e <UART_SetConfig+0x2fe>
 8008922:	2308      	movs	r3, #8
 8008924:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008928:	e0a1      	b.n	8008a6e <UART_SetConfig+0x2fe>
 800892a:	2310      	movs	r3, #16
 800892c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008930:	e09d      	b.n	8008a6e <UART_SetConfig+0x2fe>
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a4a      	ldr	r2, [pc, #296]	; (8008a60 <UART_SetConfig+0x2f0>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d125      	bne.n	8008988 <UART_SetConfig+0x218>
 800893c:	4b45      	ldr	r3, [pc, #276]	; (8008a54 <UART_SetConfig+0x2e4>)
 800893e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008942:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008946:	2bc0      	cmp	r3, #192	; 0xc0
 8008948:	d016      	beq.n	8008978 <UART_SetConfig+0x208>
 800894a:	2bc0      	cmp	r3, #192	; 0xc0
 800894c:	d818      	bhi.n	8008980 <UART_SetConfig+0x210>
 800894e:	2b80      	cmp	r3, #128	; 0x80
 8008950:	d00a      	beq.n	8008968 <UART_SetConfig+0x1f8>
 8008952:	2b80      	cmp	r3, #128	; 0x80
 8008954:	d814      	bhi.n	8008980 <UART_SetConfig+0x210>
 8008956:	2b00      	cmp	r3, #0
 8008958:	d002      	beq.n	8008960 <UART_SetConfig+0x1f0>
 800895a:	2b40      	cmp	r3, #64	; 0x40
 800895c:	d008      	beq.n	8008970 <UART_SetConfig+0x200>
 800895e:	e00f      	b.n	8008980 <UART_SetConfig+0x210>
 8008960:	2300      	movs	r3, #0
 8008962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008966:	e082      	b.n	8008a6e <UART_SetConfig+0x2fe>
 8008968:	2302      	movs	r3, #2
 800896a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800896e:	e07e      	b.n	8008a6e <UART_SetConfig+0x2fe>
 8008970:	2304      	movs	r3, #4
 8008972:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008976:	e07a      	b.n	8008a6e <UART_SetConfig+0x2fe>
 8008978:	2308      	movs	r3, #8
 800897a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800897e:	e076      	b.n	8008a6e <UART_SetConfig+0x2fe>
 8008980:	2310      	movs	r3, #16
 8008982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008986:	e072      	b.n	8008a6e <UART_SetConfig+0x2fe>
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a35      	ldr	r2, [pc, #212]	; (8008a64 <UART_SetConfig+0x2f4>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d12a      	bne.n	80089e8 <UART_SetConfig+0x278>
 8008992:	4b30      	ldr	r3, [pc, #192]	; (8008a54 <UART_SetConfig+0x2e4>)
 8008994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008998:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800899c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089a0:	d01a      	beq.n	80089d8 <UART_SetConfig+0x268>
 80089a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089a6:	d81b      	bhi.n	80089e0 <UART_SetConfig+0x270>
 80089a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089ac:	d00c      	beq.n	80089c8 <UART_SetConfig+0x258>
 80089ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089b2:	d815      	bhi.n	80089e0 <UART_SetConfig+0x270>
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d003      	beq.n	80089c0 <UART_SetConfig+0x250>
 80089b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089bc:	d008      	beq.n	80089d0 <UART_SetConfig+0x260>
 80089be:	e00f      	b.n	80089e0 <UART_SetConfig+0x270>
 80089c0:	2300      	movs	r3, #0
 80089c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089c6:	e052      	b.n	8008a6e <UART_SetConfig+0x2fe>
 80089c8:	2302      	movs	r3, #2
 80089ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089ce:	e04e      	b.n	8008a6e <UART_SetConfig+0x2fe>
 80089d0:	2304      	movs	r3, #4
 80089d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089d6:	e04a      	b.n	8008a6e <UART_SetConfig+0x2fe>
 80089d8:	2308      	movs	r3, #8
 80089da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089de:	e046      	b.n	8008a6e <UART_SetConfig+0x2fe>
 80089e0:	2310      	movs	r3, #16
 80089e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089e6:	e042      	b.n	8008a6e <UART_SetConfig+0x2fe>
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a17      	ldr	r2, [pc, #92]	; (8008a4c <UART_SetConfig+0x2dc>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d13a      	bne.n	8008a68 <UART_SetConfig+0x2f8>
 80089f2:	4b18      	ldr	r3, [pc, #96]	; (8008a54 <UART_SetConfig+0x2e4>)
 80089f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80089fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008a00:	d01a      	beq.n	8008a38 <UART_SetConfig+0x2c8>
 8008a02:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008a06:	d81b      	bhi.n	8008a40 <UART_SetConfig+0x2d0>
 8008a08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a0c:	d00c      	beq.n	8008a28 <UART_SetConfig+0x2b8>
 8008a0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a12:	d815      	bhi.n	8008a40 <UART_SetConfig+0x2d0>
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d003      	beq.n	8008a20 <UART_SetConfig+0x2b0>
 8008a18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a1c:	d008      	beq.n	8008a30 <UART_SetConfig+0x2c0>
 8008a1e:	e00f      	b.n	8008a40 <UART_SetConfig+0x2d0>
 8008a20:	2300      	movs	r3, #0
 8008a22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a26:	e022      	b.n	8008a6e <UART_SetConfig+0x2fe>
 8008a28:	2302      	movs	r3, #2
 8008a2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a2e:	e01e      	b.n	8008a6e <UART_SetConfig+0x2fe>
 8008a30:	2304      	movs	r3, #4
 8008a32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a36:	e01a      	b.n	8008a6e <UART_SetConfig+0x2fe>
 8008a38:	2308      	movs	r3, #8
 8008a3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a3e:	e016      	b.n	8008a6e <UART_SetConfig+0x2fe>
 8008a40:	2310      	movs	r3, #16
 8008a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a46:	e012      	b.n	8008a6e <UART_SetConfig+0x2fe>
 8008a48:	cfff69f3 	.word	0xcfff69f3
 8008a4c:	40008000 	.word	0x40008000
 8008a50:	40013800 	.word	0x40013800
 8008a54:	40021000 	.word	0x40021000
 8008a58:	40004400 	.word	0x40004400
 8008a5c:	40004800 	.word	0x40004800
 8008a60:	40004c00 	.word	0x40004c00
 8008a64:	40005000 	.word	0x40005000
 8008a68:	2310      	movs	r3, #16
 8008a6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4aae      	ldr	r2, [pc, #696]	; (8008d2c <UART_SetConfig+0x5bc>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	f040 8097 	bne.w	8008ba8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008a7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008a7e:	2b08      	cmp	r3, #8
 8008a80:	d823      	bhi.n	8008aca <UART_SetConfig+0x35a>
 8008a82:	a201      	add	r2, pc, #4	; (adr r2, 8008a88 <UART_SetConfig+0x318>)
 8008a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a88:	08008aad 	.word	0x08008aad
 8008a8c:	08008acb 	.word	0x08008acb
 8008a90:	08008ab5 	.word	0x08008ab5
 8008a94:	08008acb 	.word	0x08008acb
 8008a98:	08008abb 	.word	0x08008abb
 8008a9c:	08008acb 	.word	0x08008acb
 8008aa0:	08008acb 	.word	0x08008acb
 8008aa4:	08008acb 	.word	0x08008acb
 8008aa8:	08008ac3 	.word	0x08008ac3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008aac:	f7fd f836 	bl	8005b1c <HAL_RCC_GetPCLK1Freq>
 8008ab0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008ab2:	e010      	b.n	8008ad6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ab4:	4b9e      	ldr	r3, [pc, #632]	; (8008d30 <UART_SetConfig+0x5c0>)
 8008ab6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008ab8:	e00d      	b.n	8008ad6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008aba:	f7fc ffc1 	bl	8005a40 <HAL_RCC_GetSysClockFreq>
 8008abe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008ac0:	e009      	b.n	8008ad6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ac2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ac6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008ac8:	e005      	b.n	8008ad6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008aca:	2300      	movs	r3, #0
 8008acc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008ad4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	f000 8130 	beq.w	8008d3e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae2:	4a94      	ldr	r2, [pc, #592]	; (8008d34 <UART_SetConfig+0x5c4>)
 8008ae4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ae8:	461a      	mov	r2, r3
 8008aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aec:	fbb3 f3f2 	udiv	r3, r3, r2
 8008af0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	685a      	ldr	r2, [r3, #4]
 8008af6:	4613      	mov	r3, r2
 8008af8:	005b      	lsls	r3, r3, #1
 8008afa:	4413      	add	r3, r2
 8008afc:	69ba      	ldr	r2, [r7, #24]
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d305      	bcc.n	8008b0e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b08:	69ba      	ldr	r2, [r7, #24]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d903      	bls.n	8008b16 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008b14:	e113      	b.n	8008d3e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b18:	2200      	movs	r2, #0
 8008b1a:	60bb      	str	r3, [r7, #8]
 8008b1c:	60fa      	str	r2, [r7, #12]
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b22:	4a84      	ldr	r2, [pc, #528]	; (8008d34 <UART_SetConfig+0x5c4>)
 8008b24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	603b      	str	r3, [r7, #0]
 8008b2e:	607a      	str	r2, [r7, #4]
 8008b30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b34:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008b38:	f7f8 f8be 	bl	8000cb8 <__aeabi_uldivmod>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	460b      	mov	r3, r1
 8008b40:	4610      	mov	r0, r2
 8008b42:	4619      	mov	r1, r3
 8008b44:	f04f 0200 	mov.w	r2, #0
 8008b48:	f04f 0300 	mov.w	r3, #0
 8008b4c:	020b      	lsls	r3, r1, #8
 8008b4e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008b52:	0202      	lsls	r2, r0, #8
 8008b54:	6979      	ldr	r1, [r7, #20]
 8008b56:	6849      	ldr	r1, [r1, #4]
 8008b58:	0849      	lsrs	r1, r1, #1
 8008b5a:	2000      	movs	r0, #0
 8008b5c:	460c      	mov	r4, r1
 8008b5e:	4605      	mov	r5, r0
 8008b60:	eb12 0804 	adds.w	r8, r2, r4
 8008b64:	eb43 0905 	adc.w	r9, r3, r5
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	469a      	mov	sl, r3
 8008b70:	4693      	mov	fp, r2
 8008b72:	4652      	mov	r2, sl
 8008b74:	465b      	mov	r3, fp
 8008b76:	4640      	mov	r0, r8
 8008b78:	4649      	mov	r1, r9
 8008b7a:	f7f8 f89d 	bl	8000cb8 <__aeabi_uldivmod>
 8008b7e:	4602      	mov	r2, r0
 8008b80:	460b      	mov	r3, r1
 8008b82:	4613      	mov	r3, r2
 8008b84:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b86:	6a3b      	ldr	r3, [r7, #32]
 8008b88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b8c:	d308      	bcc.n	8008ba0 <UART_SetConfig+0x430>
 8008b8e:	6a3b      	ldr	r3, [r7, #32]
 8008b90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b94:	d204      	bcs.n	8008ba0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	6a3a      	ldr	r2, [r7, #32]
 8008b9c:	60da      	str	r2, [r3, #12]
 8008b9e:	e0ce      	b.n	8008d3e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008ba6:	e0ca      	b.n	8008d3e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	69db      	ldr	r3, [r3, #28]
 8008bac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bb0:	d166      	bne.n	8008c80 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008bb2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008bb6:	2b08      	cmp	r3, #8
 8008bb8:	d827      	bhi.n	8008c0a <UART_SetConfig+0x49a>
 8008bba:	a201      	add	r2, pc, #4	; (adr r2, 8008bc0 <UART_SetConfig+0x450>)
 8008bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc0:	08008be5 	.word	0x08008be5
 8008bc4:	08008bed 	.word	0x08008bed
 8008bc8:	08008bf5 	.word	0x08008bf5
 8008bcc:	08008c0b 	.word	0x08008c0b
 8008bd0:	08008bfb 	.word	0x08008bfb
 8008bd4:	08008c0b 	.word	0x08008c0b
 8008bd8:	08008c0b 	.word	0x08008c0b
 8008bdc:	08008c0b 	.word	0x08008c0b
 8008be0:	08008c03 	.word	0x08008c03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008be4:	f7fc ff9a 	bl	8005b1c <HAL_RCC_GetPCLK1Freq>
 8008be8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008bea:	e014      	b.n	8008c16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008bec:	f7fc ffac 	bl	8005b48 <HAL_RCC_GetPCLK2Freq>
 8008bf0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008bf2:	e010      	b.n	8008c16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008bf4:	4b4e      	ldr	r3, [pc, #312]	; (8008d30 <UART_SetConfig+0x5c0>)
 8008bf6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008bf8:	e00d      	b.n	8008c16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008bfa:	f7fc ff21 	bl	8005a40 <HAL_RCC_GetSysClockFreq>
 8008bfe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c00:	e009      	b.n	8008c16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008c08:	e005      	b.n	8008c16 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008c14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	f000 8090 	beq.w	8008d3e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c22:	4a44      	ldr	r2, [pc, #272]	; (8008d34 <UART_SetConfig+0x5c4>)
 8008c24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c28:	461a      	mov	r2, r3
 8008c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c30:	005a      	lsls	r2, r3, #1
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	085b      	lsrs	r3, r3, #1
 8008c38:	441a      	add	r2, r3
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c42:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c44:	6a3b      	ldr	r3, [r7, #32]
 8008c46:	2b0f      	cmp	r3, #15
 8008c48:	d916      	bls.n	8008c78 <UART_SetConfig+0x508>
 8008c4a:	6a3b      	ldr	r3, [r7, #32]
 8008c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c50:	d212      	bcs.n	8008c78 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008c52:	6a3b      	ldr	r3, [r7, #32]
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	f023 030f 	bic.w	r3, r3, #15
 8008c5a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008c5c:	6a3b      	ldr	r3, [r7, #32]
 8008c5e:	085b      	lsrs	r3, r3, #1
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	f003 0307 	and.w	r3, r3, #7
 8008c66:	b29a      	uxth	r2, r3
 8008c68:	8bfb      	ldrh	r3, [r7, #30]
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	8bfa      	ldrh	r2, [r7, #30]
 8008c74:	60da      	str	r2, [r3, #12]
 8008c76:	e062      	b.n	8008d3e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008c7e:	e05e      	b.n	8008d3e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008c80:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008c84:	2b08      	cmp	r3, #8
 8008c86:	d828      	bhi.n	8008cda <UART_SetConfig+0x56a>
 8008c88:	a201      	add	r2, pc, #4	; (adr r2, 8008c90 <UART_SetConfig+0x520>)
 8008c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c8e:	bf00      	nop
 8008c90:	08008cb5 	.word	0x08008cb5
 8008c94:	08008cbd 	.word	0x08008cbd
 8008c98:	08008cc5 	.word	0x08008cc5
 8008c9c:	08008cdb 	.word	0x08008cdb
 8008ca0:	08008ccb 	.word	0x08008ccb
 8008ca4:	08008cdb 	.word	0x08008cdb
 8008ca8:	08008cdb 	.word	0x08008cdb
 8008cac:	08008cdb 	.word	0x08008cdb
 8008cb0:	08008cd3 	.word	0x08008cd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008cb4:	f7fc ff32 	bl	8005b1c <HAL_RCC_GetPCLK1Freq>
 8008cb8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008cba:	e014      	b.n	8008ce6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008cbc:	f7fc ff44 	bl	8005b48 <HAL_RCC_GetPCLK2Freq>
 8008cc0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008cc2:	e010      	b.n	8008ce6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008cc4:	4b1a      	ldr	r3, [pc, #104]	; (8008d30 <UART_SetConfig+0x5c0>)
 8008cc6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008cc8:	e00d      	b.n	8008ce6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008cca:	f7fc feb9 	bl	8005a40 <HAL_RCC_GetSysClockFreq>
 8008cce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008cd0:	e009      	b.n	8008ce6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cd6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008cd8:	e005      	b.n	8008ce6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008ce4:	bf00      	nop
    }

    if (pclk != 0U)
 8008ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d028      	beq.n	8008d3e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf0:	4a10      	ldr	r2, [pc, #64]	; (8008d34 <UART_SetConfig+0x5c4>)
 8008cf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfa:	fbb3 f2f2 	udiv	r2, r3, r2
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	085b      	lsrs	r3, r3, #1
 8008d04:	441a      	add	r2, r3
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d0e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d10:	6a3b      	ldr	r3, [r7, #32]
 8008d12:	2b0f      	cmp	r3, #15
 8008d14:	d910      	bls.n	8008d38 <UART_SetConfig+0x5c8>
 8008d16:	6a3b      	ldr	r3, [r7, #32]
 8008d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d1c:	d20c      	bcs.n	8008d38 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008d1e:	6a3b      	ldr	r3, [r7, #32]
 8008d20:	b29a      	uxth	r2, r3
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	60da      	str	r2, [r3, #12]
 8008d28:	e009      	b.n	8008d3e <UART_SetConfig+0x5ce>
 8008d2a:	bf00      	nop
 8008d2c:	40008000 	.word	0x40008000
 8008d30:	00f42400 	.word	0x00f42400
 8008d34:	0800d430 	.word	0x0800d430
      }
      else
      {
        ret = HAL_ERROR;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	2201      	movs	r2, #1
 8008d42:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	2201      	movs	r2, #1
 8008d4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	2200      	movs	r2, #0
 8008d52:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	2200      	movs	r2, #0
 8008d58:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008d5a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3730      	adds	r7, #48	; 0x30
 8008d62:	46bd      	mov	sp, r7
 8008d64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008d68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b083      	sub	sp, #12
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d74:	f003 0301 	and.w	r3, r3, #1
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d00a      	beq.n	8008d92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	430a      	orrs	r2, r1
 8008d90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d96:	f003 0302 	and.w	r3, r3, #2
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d00a      	beq.n	8008db4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	430a      	orrs	r2, r1
 8008db2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db8:	f003 0304 	and.w	r3, r3, #4
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d00a      	beq.n	8008dd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	430a      	orrs	r2, r1
 8008dd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dda:	f003 0308 	and.w	r3, r3, #8
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d00a      	beq.n	8008df8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	430a      	orrs	r2, r1
 8008df6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dfc:	f003 0310 	and.w	r3, r3, #16
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d00a      	beq.n	8008e1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	430a      	orrs	r2, r1
 8008e18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e1e:	f003 0320 	and.w	r3, r3, #32
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d00a      	beq.n	8008e3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	689b      	ldr	r3, [r3, #8]
 8008e2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	430a      	orrs	r2, r1
 8008e3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d01a      	beq.n	8008e7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	430a      	orrs	r2, r1
 8008e5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e66:	d10a      	bne.n	8008e7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	430a      	orrs	r2, r1
 8008e7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d00a      	beq.n	8008ea0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	430a      	orrs	r2, r1
 8008e9e:	605a      	str	r2, [r3, #4]
  }
}
 8008ea0:	bf00      	nop
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b086      	sub	sp, #24
 8008eb0:	af02      	add	r7, sp, #8
 8008eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ebc:	f7f9 fe68 	bl	8002b90 <HAL_GetTick>
 8008ec0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f003 0308 	and.w	r3, r3, #8
 8008ecc:	2b08      	cmp	r3, #8
 8008ece:	d10e      	bne.n	8008eee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ed0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ed4:	9300      	str	r3, [sp, #0]
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 f82f 	bl	8008f42 <UART_WaitOnFlagUntilTimeout>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d001      	beq.n	8008eee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008eea:	2303      	movs	r3, #3
 8008eec:	e025      	b.n	8008f3a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f003 0304 	and.w	r3, r3, #4
 8008ef8:	2b04      	cmp	r3, #4
 8008efa:	d10e      	bne.n	8008f1a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008efc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f00:	9300      	str	r3, [sp, #0]
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2200      	movs	r2, #0
 8008f06:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 f819 	bl	8008f42 <UART_WaitOnFlagUntilTimeout>
 8008f10:	4603      	mov	r3, r0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d001      	beq.n	8008f1a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f16:	2303      	movs	r3, #3
 8008f18:	e00f      	b.n	8008f3a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2220      	movs	r2, #32
 8008f1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2220      	movs	r2, #32
 8008f26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2200      	movs	r2, #0
 8008f34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008f38:	2300      	movs	r3, #0
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3710      	adds	r7, #16
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}

08008f42 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008f42:	b580      	push	{r7, lr}
 8008f44:	b09c      	sub	sp, #112	; 0x70
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	60f8      	str	r0, [r7, #12]
 8008f4a:	60b9      	str	r1, [r7, #8]
 8008f4c:	603b      	str	r3, [r7, #0]
 8008f4e:	4613      	mov	r3, r2
 8008f50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f52:	e0a9      	b.n	80090a8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f5a:	f000 80a5 	beq.w	80090a8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f5e:	f7f9 fe17 	bl	8002b90 <HAL_GetTick>
 8008f62:	4602      	mov	r2, r0
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	1ad3      	subs	r3, r2, r3
 8008f68:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d302      	bcc.n	8008f74 <UART_WaitOnFlagUntilTimeout+0x32>
 8008f6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d140      	bne.n	8008ff6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f7c:	e853 3f00 	ldrex	r3, [r3]
 8008f80:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008f82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008f88:	667b      	str	r3, [r7, #100]	; 0x64
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	461a      	mov	r2, r3
 8008f90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f94:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f96:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008f98:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008f9a:	e841 2300 	strex	r3, r2, [r1]
 8008f9e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008fa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d1e6      	bne.n	8008f74 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	3308      	adds	r3, #8
 8008fac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fb0:	e853 3f00 	ldrex	r3, [r3]
 8008fb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb8:	f023 0301 	bic.w	r3, r3, #1
 8008fbc:	663b      	str	r3, [r7, #96]	; 0x60
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	3308      	adds	r3, #8
 8008fc4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008fc6:	64ba      	str	r2, [r7, #72]	; 0x48
 8008fc8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008fcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008fce:	e841 2300 	strex	r3, r2, [r1]
 8008fd2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008fd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d1e5      	bne.n	8008fa6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2220      	movs	r2, #32
 8008fde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2220      	movs	r2, #32
 8008fe6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2200      	movs	r2, #0
 8008fee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008ff2:	2303      	movs	r3, #3
 8008ff4:	e069      	b.n	80090ca <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f003 0304 	and.w	r3, r3, #4
 8009000:	2b00      	cmp	r3, #0
 8009002:	d051      	beq.n	80090a8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	69db      	ldr	r3, [r3, #28]
 800900a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800900e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009012:	d149      	bne.n	80090a8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800901c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009026:	e853 3f00 	ldrex	r3, [r3]
 800902a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800902c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009032:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	461a      	mov	r2, r3
 800903a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800903c:	637b      	str	r3, [r7, #52]	; 0x34
 800903e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009040:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009042:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009044:	e841 2300 	strex	r3, r2, [r1]
 8009048:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800904a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800904c:	2b00      	cmp	r3, #0
 800904e:	d1e6      	bne.n	800901e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	3308      	adds	r3, #8
 8009056:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	e853 3f00 	ldrex	r3, [r3]
 800905e:	613b      	str	r3, [r7, #16]
   return(result);
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	f023 0301 	bic.w	r3, r3, #1
 8009066:	66bb      	str	r3, [r7, #104]	; 0x68
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	3308      	adds	r3, #8
 800906e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009070:	623a      	str	r2, [r7, #32]
 8009072:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009074:	69f9      	ldr	r1, [r7, #28]
 8009076:	6a3a      	ldr	r2, [r7, #32]
 8009078:	e841 2300 	strex	r3, r2, [r1]
 800907c:	61bb      	str	r3, [r7, #24]
   return(result);
 800907e:	69bb      	ldr	r3, [r7, #24]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d1e5      	bne.n	8009050 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2220      	movs	r2, #32
 8009088:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2220      	movs	r2, #32
 8009090:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2220      	movs	r2, #32
 8009098:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2200      	movs	r2, #0
 80090a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80090a4:	2303      	movs	r3, #3
 80090a6:	e010      	b.n	80090ca <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	69da      	ldr	r2, [r3, #28]
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	4013      	ands	r3, r2
 80090b2:	68ba      	ldr	r2, [r7, #8]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	bf0c      	ite	eq
 80090b8:	2301      	moveq	r3, #1
 80090ba:	2300      	movne	r3, #0
 80090bc:	b2db      	uxtb	r3, r3
 80090be:	461a      	mov	r2, r3
 80090c0:	79fb      	ldrb	r3, [r7, #7]
 80090c2:	429a      	cmp	r2, r3
 80090c4:	f43f af46 	beq.w	8008f54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80090c8:	2300      	movs	r3, #0
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3770      	adds	r7, #112	; 0x70
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}
	...

080090d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b0a3      	sub	sp, #140	; 0x8c
 80090d8:	af00      	add	r7, sp, #0
 80090da:	60f8      	str	r0, [r7, #12]
 80090dc:	60b9      	str	r1, [r7, #8]
 80090de:	4613      	mov	r3, r2
 80090e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	68ba      	ldr	r2, [r7, #8]
 80090e6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	88fa      	ldrh	r2, [r7, #6]
 80090ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	88fa      	ldrh	r2, [r7, #6]
 80090f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2200      	movs	r2, #0
 80090fc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	689b      	ldr	r3, [r3, #8]
 8009102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009106:	d10e      	bne.n	8009126 <UART_Start_Receive_IT+0x52>
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	691b      	ldr	r3, [r3, #16]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d105      	bne.n	800911c <UART_Start_Receive_IT+0x48>
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009116:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800911a:	e02d      	b.n	8009178 <UART_Start_Receive_IT+0xa4>
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	22ff      	movs	r2, #255	; 0xff
 8009120:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009124:	e028      	b.n	8009178 <UART_Start_Receive_IT+0xa4>
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	689b      	ldr	r3, [r3, #8]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d10d      	bne.n	800914a <UART_Start_Receive_IT+0x76>
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	691b      	ldr	r3, [r3, #16]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d104      	bne.n	8009140 <UART_Start_Receive_IT+0x6c>
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	22ff      	movs	r2, #255	; 0xff
 800913a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800913e:	e01b      	b.n	8009178 <UART_Start_Receive_IT+0xa4>
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	227f      	movs	r2, #127	; 0x7f
 8009144:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009148:	e016      	b.n	8009178 <UART_Start_Receive_IT+0xa4>
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	689b      	ldr	r3, [r3, #8]
 800914e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009152:	d10d      	bne.n	8009170 <UART_Start_Receive_IT+0x9c>
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	691b      	ldr	r3, [r3, #16]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d104      	bne.n	8009166 <UART_Start_Receive_IT+0x92>
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	227f      	movs	r2, #127	; 0x7f
 8009160:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009164:	e008      	b.n	8009178 <UART_Start_Receive_IT+0xa4>
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	223f      	movs	r2, #63	; 0x3f
 800916a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800916e:	e003      	b.n	8009178 <UART_Start_Receive_IT+0xa4>
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2200      	movs	r2, #0
 8009174:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2200      	movs	r2, #0
 800917c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2222      	movs	r2, #34	; 0x22
 8009184:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	3308      	adds	r3, #8
 800918e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009190:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009192:	e853 3f00 	ldrex	r3, [r3]
 8009196:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009198:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800919a:	f043 0301 	orr.w	r3, r3, #1
 800919e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	3308      	adds	r3, #8
 80091a8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80091ac:	673a      	str	r2, [r7, #112]	; 0x70
 80091ae:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80091b2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80091b4:	e841 2300 	strex	r3, r2, [r1]
 80091b8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80091ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d1e3      	bne.n	8009188 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091c8:	d153      	bne.n	8009272 <UART_Start_Receive_IT+0x19e>
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80091d0:	88fa      	ldrh	r2, [r7, #6]
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d34d      	bcc.n	8009272 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	689b      	ldr	r3, [r3, #8]
 80091da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091de:	d107      	bne.n	80091f0 <UART_Start_Receive_IT+0x11c>
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	691b      	ldr	r3, [r3, #16]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d103      	bne.n	80091f0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	4a4b      	ldr	r2, [pc, #300]	; (8009318 <UART_Start_Receive_IT+0x244>)
 80091ec:	671a      	str	r2, [r3, #112]	; 0x70
 80091ee:	e002      	b.n	80091f6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	4a4a      	ldr	r2, [pc, #296]	; (800931c <UART_Start_Receive_IT+0x248>)
 80091f4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2200      	movs	r2, #0
 80091fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	691b      	ldr	r3, [r3, #16]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d01a      	beq.n	800923c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800920c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800920e:	e853 3f00 	ldrex	r3, [r3]
 8009212:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009214:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800921a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	461a      	mov	r2, r3
 8009224:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009228:	65fb      	str	r3, [r7, #92]	; 0x5c
 800922a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800922c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800922e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009230:	e841 2300 	strex	r3, r2, [r1]
 8009234:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009236:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009238:	2b00      	cmp	r3, #0
 800923a:	d1e4      	bne.n	8009206 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	3308      	adds	r3, #8
 8009242:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009246:	e853 3f00 	ldrex	r3, [r3]
 800924a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800924c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800924e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009252:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	3308      	adds	r3, #8
 800925a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800925c:	64ba      	str	r2, [r7, #72]	; 0x48
 800925e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009260:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009262:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009264:	e841 2300 	strex	r3, r2, [r1]
 8009268:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800926a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800926c:	2b00      	cmp	r3, #0
 800926e:	d1e5      	bne.n	800923c <UART_Start_Receive_IT+0x168>
 8009270:	e04a      	b.n	8009308 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	689b      	ldr	r3, [r3, #8]
 8009276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800927a:	d107      	bne.n	800928c <UART_Start_Receive_IT+0x1b8>
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	691b      	ldr	r3, [r3, #16]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d103      	bne.n	800928c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	4a26      	ldr	r2, [pc, #152]	; (8009320 <UART_Start_Receive_IT+0x24c>)
 8009288:	671a      	str	r2, [r3, #112]	; 0x70
 800928a:	e002      	b.n	8009292 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	4a25      	ldr	r2, [pc, #148]	; (8009324 <UART_Start_Receive_IT+0x250>)
 8009290:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2200      	movs	r2, #0
 8009296:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	691b      	ldr	r3, [r3, #16]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d019      	beq.n	80092d6 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092aa:	e853 3f00 	ldrex	r3, [r3]
 80092ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80092b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80092b6:	677b      	str	r3, [r7, #116]	; 0x74
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	461a      	mov	r2, r3
 80092be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80092c0:	637b      	str	r3, [r7, #52]	; 0x34
 80092c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80092c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092c8:	e841 2300 	strex	r3, r2, [r1]
 80092cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80092ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d1e6      	bne.n	80092a2 <UART_Start_Receive_IT+0x1ce>
 80092d4:	e018      	b.n	8009308 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	e853 3f00 	ldrex	r3, [r3]
 80092e2:	613b      	str	r3, [r7, #16]
   return(result);
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	f043 0320 	orr.w	r3, r3, #32
 80092ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	461a      	mov	r2, r3
 80092f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092f4:	623b      	str	r3, [r7, #32]
 80092f6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f8:	69f9      	ldr	r1, [r7, #28]
 80092fa:	6a3a      	ldr	r2, [r7, #32]
 80092fc:	e841 2300 	strex	r3, r2, [r1]
 8009300:	61bb      	str	r3, [r7, #24]
   return(result);
 8009302:	69bb      	ldr	r3, [r7, #24]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d1e6      	bne.n	80092d6 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8009308:	2300      	movs	r3, #0
}
 800930a:	4618      	mov	r0, r3
 800930c:	378c      	adds	r7, #140	; 0x8c
 800930e:	46bd      	mov	sp, r7
 8009310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009314:	4770      	bx	lr
 8009316:	bf00      	nop
 8009318:	08009a31 	.word	0x08009a31
 800931c:	08009739 	.word	0x08009739
 8009320:	080095d7 	.word	0x080095d7
 8009324:	08009477 	.word	0x08009477

08009328 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009328:	b480      	push	{r7}
 800932a:	b095      	sub	sp, #84	; 0x54
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009338:	e853 3f00 	ldrex	r3, [r3]
 800933c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800933e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009340:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009344:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	461a      	mov	r2, r3
 800934c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800934e:	643b      	str	r3, [r7, #64]	; 0x40
 8009350:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009352:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009354:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009356:	e841 2300 	strex	r3, r2, [r1]
 800935a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800935c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800935e:	2b00      	cmp	r3, #0
 8009360:	d1e6      	bne.n	8009330 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	3308      	adds	r3, #8
 8009368:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800936a:	6a3b      	ldr	r3, [r7, #32]
 800936c:	e853 3f00 	ldrex	r3, [r3]
 8009370:	61fb      	str	r3, [r7, #28]
   return(result);
 8009372:	69fb      	ldr	r3, [r7, #28]
 8009374:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009378:	f023 0301 	bic.w	r3, r3, #1
 800937c:	64bb      	str	r3, [r7, #72]	; 0x48
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	3308      	adds	r3, #8
 8009384:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009386:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009388:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800938a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800938c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800938e:	e841 2300 	strex	r3, r2, [r1]
 8009392:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009396:	2b00      	cmp	r3, #0
 8009398:	d1e3      	bne.n	8009362 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800939e:	2b01      	cmp	r3, #1
 80093a0:	d118      	bne.n	80093d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	e853 3f00 	ldrex	r3, [r3]
 80093ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	f023 0310 	bic.w	r3, r3, #16
 80093b6:	647b      	str	r3, [r7, #68]	; 0x44
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	461a      	mov	r2, r3
 80093be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093c0:	61bb      	str	r3, [r7, #24]
 80093c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c4:	6979      	ldr	r1, [r7, #20]
 80093c6:	69ba      	ldr	r2, [r7, #24]
 80093c8:	e841 2300 	strex	r3, r2, [r1]
 80093cc:	613b      	str	r3, [r7, #16]
   return(result);
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d1e6      	bne.n	80093a2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2220      	movs	r2, #32
 80093d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2200      	movs	r2, #0
 80093e0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2200      	movs	r2, #0
 80093e6:	671a      	str	r2, [r3, #112]	; 0x70
}
 80093e8:	bf00      	nop
 80093ea:	3754      	adds	r7, #84	; 0x54
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr

080093f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b084      	sub	sp, #16
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009400:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2200      	movs	r2, #0
 8009406:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2200      	movs	r2, #0
 800940e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009412:	68f8      	ldr	r0, [r7, #12]
 8009414:	f7ff f996 	bl	8008744 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009418:	bf00      	nop
 800941a:	3710      	adds	r7, #16
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b088      	sub	sp, #32
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	e853 3f00 	ldrex	r3, [r3]
 8009434:	60bb      	str	r3, [r7, #8]
   return(result);
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800943c:	61fb      	str	r3, [r7, #28]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	461a      	mov	r2, r3
 8009444:	69fb      	ldr	r3, [r7, #28]
 8009446:	61bb      	str	r3, [r7, #24]
 8009448:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800944a:	6979      	ldr	r1, [r7, #20]
 800944c:	69ba      	ldr	r2, [r7, #24]
 800944e:	e841 2300 	strex	r3, r2, [r1]
 8009452:	613b      	str	r3, [r7, #16]
   return(result);
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d1e6      	bne.n	8009428 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2220      	movs	r2, #32
 800945e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2200      	movs	r2, #0
 8009466:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f7ff f961 	bl	8008730 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800946e:	bf00      	nop
 8009470:	3720      	adds	r7, #32
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}

08009476 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009476:	b580      	push	{r7, lr}
 8009478:	b096      	sub	sp, #88	; 0x58
 800947a:	af00      	add	r7, sp, #0
 800947c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009484:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800948e:	2b22      	cmp	r3, #34	; 0x22
 8009490:	f040 8095 	bne.w	80095be <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800949a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800949e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80094a2:	b2d9      	uxtb	r1, r3
 80094a4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80094a8:	b2da      	uxtb	r2, r3
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094ae:	400a      	ands	r2, r1
 80094b0:	b2d2      	uxtb	r2, r2
 80094b2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094b8:	1c5a      	adds	r2, r3, #1
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	3b01      	subs	r3, #1
 80094c8:	b29a      	uxth	r2, r3
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094d6:	b29b      	uxth	r3, r3
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d178      	bne.n	80095ce <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e4:	e853 3f00 	ldrex	r3, [r3]
 80094e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80094ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80094f0:	653b      	str	r3, [r7, #80]	; 0x50
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	461a      	mov	r2, r3
 80094f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094fa:	647b      	str	r3, [r7, #68]	; 0x44
 80094fc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009500:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009502:	e841 2300 	strex	r3, r2, [r1]
 8009506:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800950a:	2b00      	cmp	r3, #0
 800950c:	d1e6      	bne.n	80094dc <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	3308      	adds	r3, #8
 8009514:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009518:	e853 3f00 	ldrex	r3, [r3]
 800951c:	623b      	str	r3, [r7, #32]
   return(result);
 800951e:	6a3b      	ldr	r3, [r7, #32]
 8009520:	f023 0301 	bic.w	r3, r3, #1
 8009524:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	3308      	adds	r3, #8
 800952c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800952e:	633a      	str	r2, [r7, #48]	; 0x30
 8009530:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009532:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009536:	e841 2300 	strex	r3, r2, [r1]
 800953a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800953c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800953e:	2b00      	cmp	r3, #0
 8009540:	d1e5      	bne.n	800950e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2220      	movs	r2, #32
 8009546:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2200      	movs	r2, #0
 800954e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009554:	2b01      	cmp	r3, #1
 8009556:	d12e      	bne.n	80095b6 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	e853 3f00 	ldrex	r3, [r3]
 800956a:	60fb      	str	r3, [r7, #12]
   return(result);
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	f023 0310 	bic.w	r3, r3, #16
 8009572:	64bb      	str	r3, [r7, #72]	; 0x48
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	461a      	mov	r2, r3
 800957a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800957c:	61fb      	str	r3, [r7, #28]
 800957e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009580:	69b9      	ldr	r1, [r7, #24]
 8009582:	69fa      	ldr	r2, [r7, #28]
 8009584:	e841 2300 	strex	r3, r2, [r1]
 8009588:	617b      	str	r3, [r7, #20]
   return(result);
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d1e6      	bne.n	800955e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	69db      	ldr	r3, [r3, #28]
 8009596:	f003 0310 	and.w	r3, r3, #16
 800959a:	2b10      	cmp	r3, #16
 800959c:	d103      	bne.n	80095a6 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	2210      	movs	r2, #16
 80095a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80095ac:	4619      	mov	r1, r3
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f7ff f8d2 	bl	8008758 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80095b4:	e00b      	b.n	80095ce <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f7f9 f9d4 	bl	8002964 <HAL_UART_RxCpltCallback>
}
 80095bc:	e007      	b.n	80095ce <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	699a      	ldr	r2, [r3, #24]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f042 0208 	orr.w	r2, r2, #8
 80095cc:	619a      	str	r2, [r3, #24]
}
 80095ce:	bf00      	nop
 80095d0:	3758      	adds	r7, #88	; 0x58
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}

080095d6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80095d6:	b580      	push	{r7, lr}
 80095d8:	b096      	sub	sp, #88	; 0x58
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80095e4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095ee:	2b22      	cmp	r3, #34	; 0x22
 80095f0:	f040 8095 	bne.w	800971e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095fa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009602:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009604:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009608:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800960c:	4013      	ands	r3, r2
 800960e:	b29a      	uxth	r2, r3
 8009610:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009612:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009618:	1c9a      	adds	r2, r3, #2
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009624:	b29b      	uxth	r3, r3
 8009626:	3b01      	subs	r3, #1
 8009628:	b29a      	uxth	r2, r3
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009636:	b29b      	uxth	r3, r3
 8009638:	2b00      	cmp	r3, #0
 800963a:	d178      	bne.n	800972e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009644:	e853 3f00 	ldrex	r3, [r3]
 8009648:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800964a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800964c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009650:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	461a      	mov	r2, r3
 8009658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800965a:	643b      	str	r3, [r7, #64]	; 0x40
 800965c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800965e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009660:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009662:	e841 2300 	strex	r3, r2, [r1]
 8009666:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800966a:	2b00      	cmp	r3, #0
 800966c:	d1e6      	bne.n	800963c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	3308      	adds	r3, #8
 8009674:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009676:	6a3b      	ldr	r3, [r7, #32]
 8009678:	e853 3f00 	ldrex	r3, [r3]
 800967c:	61fb      	str	r3, [r7, #28]
   return(result);
 800967e:	69fb      	ldr	r3, [r7, #28]
 8009680:	f023 0301 	bic.w	r3, r3, #1
 8009684:	64bb      	str	r3, [r7, #72]	; 0x48
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	3308      	adds	r3, #8
 800968c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800968e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009690:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009692:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009694:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009696:	e841 2300 	strex	r3, r2, [r1]
 800969a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800969c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d1e5      	bne.n	800966e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2220      	movs	r2, #32
 80096a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2200      	movs	r2, #0
 80096ae:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	d12e      	bne.n	8009716 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2200      	movs	r2, #0
 80096bc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	e853 3f00 	ldrex	r3, [r3]
 80096ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	f023 0310 	bic.w	r3, r3, #16
 80096d2:	647b      	str	r3, [r7, #68]	; 0x44
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	461a      	mov	r2, r3
 80096da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096dc:	61bb      	str	r3, [r7, #24]
 80096de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e0:	6979      	ldr	r1, [r7, #20]
 80096e2:	69ba      	ldr	r2, [r7, #24]
 80096e4:	e841 2300 	strex	r3, r2, [r1]
 80096e8:	613b      	str	r3, [r7, #16]
   return(result);
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d1e6      	bne.n	80096be <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	69db      	ldr	r3, [r3, #28]
 80096f6:	f003 0310 	and.w	r3, r3, #16
 80096fa:	2b10      	cmp	r3, #16
 80096fc:	d103      	bne.n	8009706 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	2210      	movs	r2, #16
 8009704:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800970c:	4619      	mov	r1, r3
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f7ff f822 	bl	8008758 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009714:	e00b      	b.n	800972e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f7f9 f924 	bl	8002964 <HAL_UART_RxCpltCallback>
}
 800971c:	e007      	b.n	800972e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	699a      	ldr	r2, [r3, #24]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f042 0208 	orr.w	r2, r2, #8
 800972c:	619a      	str	r2, [r3, #24]
}
 800972e:	bf00      	nop
 8009730:	3758      	adds	r7, #88	; 0x58
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
	...

08009738 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b0a6      	sub	sp, #152	; 0x98
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009746:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	69db      	ldr	r3, [r3, #28]
 8009750:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	689b      	ldr	r3, [r3, #8]
 8009764:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800976e:	2b22      	cmp	r3, #34	; 0x22
 8009770:	f040 814f 	bne.w	8009a12 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800977a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800977e:	e0f6      	b.n	800996e <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009786:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800978a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800978e:	b2d9      	uxtb	r1, r3
 8009790:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8009794:	b2da      	uxtb	r2, r3
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800979a:	400a      	ands	r2, r1
 800979c:	b2d2      	uxtb	r2, r2
 800979e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097a4:	1c5a      	adds	r2, r3, #1
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	3b01      	subs	r3, #1
 80097b4:	b29a      	uxth	r2, r3
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	69db      	ldr	r3, [r3, #28]
 80097c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80097c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80097ca:	f003 0307 	and.w	r3, r3, #7
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d053      	beq.n	800987a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80097d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80097d6:	f003 0301 	and.w	r3, r3, #1
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d011      	beq.n	8009802 <UART_RxISR_8BIT_FIFOEN+0xca>
 80097de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80097e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d00b      	beq.n	8009802 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	2201      	movs	r2, #1
 80097f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097f8:	f043 0201 	orr.w	r2, r3, #1
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009802:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009806:	f003 0302 	and.w	r3, r3, #2
 800980a:	2b00      	cmp	r3, #0
 800980c:	d011      	beq.n	8009832 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800980e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009812:	f003 0301 	and.w	r3, r3, #1
 8009816:	2b00      	cmp	r3, #0
 8009818:	d00b      	beq.n	8009832 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	2202      	movs	r2, #2
 8009820:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009828:	f043 0204 	orr.w	r2, r3, #4
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009832:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009836:	f003 0304 	and.w	r3, r3, #4
 800983a:	2b00      	cmp	r3, #0
 800983c:	d011      	beq.n	8009862 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800983e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009842:	f003 0301 	and.w	r3, r3, #1
 8009846:	2b00      	cmp	r3, #0
 8009848:	d00b      	beq.n	8009862 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	2204      	movs	r2, #4
 8009850:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009858:	f043 0202 	orr.w	r2, r3, #2
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009868:	2b00      	cmp	r3, #0
 800986a:	d006      	beq.n	800987a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f7fe ff69 	bl	8008744 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2200      	movs	r2, #0
 8009876:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009880:	b29b      	uxth	r3, r3
 8009882:	2b00      	cmp	r3, #0
 8009884:	d173      	bne.n	800996e <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800988c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800988e:	e853 3f00 	ldrex	r3, [r3]
 8009892:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009894:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009896:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800989a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	461a      	mov	r2, r3
 80098a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80098a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80098aa:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ac:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80098ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80098b0:	e841 2300 	strex	r3, r2, [r1]
 80098b4:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80098b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d1e4      	bne.n	8009886 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	3308      	adds	r3, #8
 80098c2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098c6:	e853 3f00 	ldrex	r3, [r3]
 80098ca:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80098cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80098d2:	f023 0301 	bic.w	r3, r3, #1
 80098d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	3308      	adds	r3, #8
 80098de:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80098e0:	657a      	str	r2, [r7, #84]	; 0x54
 80098e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80098e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80098e8:	e841 2300 	strex	r3, r2, [r1]
 80098ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80098ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d1e3      	bne.n	80098bc <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2220      	movs	r2, #32
 80098f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2200      	movs	r2, #0
 8009900:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009906:	2b01      	cmp	r3, #1
 8009908:	d12e      	bne.n	8009968 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2200      	movs	r2, #0
 800990e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009918:	e853 3f00 	ldrex	r3, [r3]
 800991c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800991e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009920:	f023 0310 	bic.w	r3, r3, #16
 8009924:	67bb      	str	r3, [r7, #120]	; 0x78
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	461a      	mov	r2, r3
 800992c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800992e:	643b      	str	r3, [r7, #64]	; 0x40
 8009930:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009932:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009934:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009936:	e841 2300 	strex	r3, r2, [r1]
 800993a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800993c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800993e:	2b00      	cmp	r3, #0
 8009940:	d1e6      	bne.n	8009910 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	69db      	ldr	r3, [r3, #28]
 8009948:	f003 0310 	and.w	r3, r3, #16
 800994c:	2b10      	cmp	r3, #16
 800994e:	d103      	bne.n	8009958 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	2210      	movs	r2, #16
 8009956:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800995e:	4619      	mov	r1, r3
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f7fe fef9 	bl	8008758 <HAL_UARTEx_RxEventCallback>
 8009966:	e002      	b.n	800996e <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f7f8 fffb 	bl	8002964 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800996e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009972:	2b00      	cmp	r3, #0
 8009974:	d006      	beq.n	8009984 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8009976:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800997a:	f003 0320 	and.w	r3, r3, #32
 800997e:	2b00      	cmp	r3, #0
 8009980:	f47f aefe 	bne.w	8009780 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800998a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800998e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8009992:	2b00      	cmp	r3, #0
 8009994:	d045      	beq.n	8009a22 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800999c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80099a0:	429a      	cmp	r2, r3
 80099a2:	d23e      	bcs.n	8009a22 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	3308      	adds	r3, #8
 80099aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ac:	6a3b      	ldr	r3, [r7, #32]
 80099ae:	e853 3f00 	ldrex	r3, [r3]
 80099b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80099b4:	69fb      	ldr	r3, [r7, #28]
 80099b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80099ba:	673b      	str	r3, [r7, #112]	; 0x70
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	3308      	adds	r3, #8
 80099c2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80099c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80099c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099cc:	e841 2300 	strex	r3, r2, [r1]
 80099d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80099d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d1e5      	bne.n	80099a4 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	4a14      	ldr	r2, [pc, #80]	; (8009a2c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80099dc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	e853 3f00 	ldrex	r3, [r3]
 80099ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	f043 0320 	orr.w	r3, r3, #32
 80099f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	461a      	mov	r2, r3
 80099fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099fc:	61bb      	str	r3, [r7, #24]
 80099fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a00:	6979      	ldr	r1, [r7, #20]
 8009a02:	69ba      	ldr	r2, [r7, #24]
 8009a04:	e841 2300 	strex	r3, r2, [r1]
 8009a08:	613b      	str	r3, [r7, #16]
   return(result);
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d1e6      	bne.n	80099de <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009a10:	e007      	b.n	8009a22 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	699a      	ldr	r2, [r3, #24]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f042 0208 	orr.w	r2, r2, #8
 8009a20:	619a      	str	r2, [r3, #24]
}
 8009a22:	bf00      	nop
 8009a24:	3798      	adds	r7, #152	; 0x98
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}
 8009a2a:	bf00      	nop
 8009a2c:	08009477 	.word	0x08009477

08009a30 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b0a8      	sub	sp, #160	; 0xa0
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009a3e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	69db      	ldr	r3, [r3, #28]
 8009a48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	689b      	ldr	r3, [r3, #8]
 8009a5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a66:	2b22      	cmp	r3, #34	; 0x22
 8009a68:	f040 8153 	bne.w	8009d12 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009a72:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009a76:	e0fa      	b.n	8009c6e <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a7e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009a8a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8009a8e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009a92:	4013      	ands	r3, r2
 8009a94:	b29a      	uxth	r2, r3
 8009a96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009a9a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009aa0:	1c9a      	adds	r2, r3, #2
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009aac:	b29b      	uxth	r3, r3
 8009aae:	3b01      	subs	r3, #1
 8009ab0:	b29a      	uxth	r2, r3
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	69db      	ldr	r3, [r3, #28]
 8009abe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009ac2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009ac6:	f003 0307 	and.w	r3, r3, #7
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d053      	beq.n	8009b76 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009ace:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009ad2:	f003 0301 	and.w	r3, r3, #1
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d011      	beq.n	8009afe <UART_RxISR_16BIT_FIFOEN+0xce>
 8009ada:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d00b      	beq.n	8009afe <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	2201      	movs	r2, #1
 8009aec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009af4:	f043 0201 	orr.w	r2, r3, #1
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009afe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009b02:	f003 0302 	and.w	r3, r3, #2
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d011      	beq.n	8009b2e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009b0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b0e:	f003 0301 	and.w	r3, r3, #1
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d00b      	beq.n	8009b2e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	2202      	movs	r2, #2
 8009b1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b24:	f043 0204 	orr.w	r2, r3, #4
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009b32:	f003 0304 	and.w	r3, r3, #4
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d011      	beq.n	8009b5e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009b3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b3e:	f003 0301 	and.w	r3, r3, #1
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d00b      	beq.n	8009b5e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	2204      	movs	r2, #4
 8009b4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b54:	f043 0202 	orr.w	r2, r3, #2
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d006      	beq.n	8009b76 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f7fe fdeb 	bl	8008744 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2200      	movs	r2, #0
 8009b72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009b7c:	b29b      	uxth	r3, r3
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d175      	bne.n	8009c6e <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009b8a:	e853 3f00 	ldrex	r3, [r3]
 8009b8e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009b90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009ba4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009ba6:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009baa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009bac:	e841 2300 	strex	r3, r2, [r1]
 8009bb0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009bb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d1e4      	bne.n	8009b82 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	3308      	adds	r3, #8
 8009bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bc2:	e853 3f00 	ldrex	r3, [r3]
 8009bc6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009bc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009bce:	f023 0301 	bic.w	r3, r3, #1
 8009bd2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	3308      	adds	r3, #8
 8009bdc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009be0:	65ba      	str	r2, [r7, #88]	; 0x58
 8009be2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009be4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009be6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009be8:	e841 2300 	strex	r3, r2, [r1]
 8009bec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d1e1      	bne.n	8009bb8 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2220      	movs	r2, #32
 8009bf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d12e      	bne.n	8009c68 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c18:	e853 3f00 	ldrex	r3, [r3]
 8009c1c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c20:	f023 0310 	bic.w	r3, r3, #16
 8009c24:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009c2e:	647b      	str	r3, [r7, #68]	; 0x44
 8009c30:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009c34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c36:	e841 2300 	strex	r3, r2, [r1]
 8009c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d1e6      	bne.n	8009c10 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	69db      	ldr	r3, [r3, #28]
 8009c48:	f003 0310 	and.w	r3, r3, #16
 8009c4c:	2b10      	cmp	r3, #16
 8009c4e:	d103      	bne.n	8009c58 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	2210      	movs	r2, #16
 8009c56:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009c5e:	4619      	mov	r1, r3
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f7fe fd79 	bl	8008758 <HAL_UARTEx_RxEventCallback>
 8009c66:	e002      	b.n	8009c6e <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f7f8 fe7b 	bl	8002964 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009c6e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d006      	beq.n	8009c84 <UART_RxISR_16BIT_FIFOEN+0x254>
 8009c76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c7a:	f003 0320 	and.w	r3, r3, #32
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	f47f aefa 	bne.w	8009a78 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c8a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009c8e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d045      	beq.n	8009d22 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009c9c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8009ca0:	429a      	cmp	r2, r3
 8009ca2:	d23e      	bcs.n	8009d22 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	3308      	adds	r3, #8
 8009caa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cae:	e853 3f00 	ldrex	r3, [r3]
 8009cb2:	623b      	str	r3, [r7, #32]
   return(result);
 8009cb4:	6a3b      	ldr	r3, [r7, #32]
 8009cb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009cba:	677b      	str	r3, [r7, #116]	; 0x74
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	3308      	adds	r3, #8
 8009cc2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009cc4:	633a      	str	r2, [r7, #48]	; 0x30
 8009cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cc8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009cca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ccc:	e841 2300 	strex	r3, r2, [r1]
 8009cd0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d1e5      	bne.n	8009ca4 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	4a14      	ldr	r2, [pc, #80]	; (8009d2c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009cdc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	e853 3f00 	ldrex	r3, [r3]
 8009cea:	60fb      	str	r3, [r7, #12]
   return(result);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f043 0320 	orr.w	r3, r3, #32
 8009cf2:	673b      	str	r3, [r7, #112]	; 0x70
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	461a      	mov	r2, r3
 8009cfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009cfc:	61fb      	str	r3, [r7, #28]
 8009cfe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d00:	69b9      	ldr	r1, [r7, #24]
 8009d02:	69fa      	ldr	r2, [r7, #28]
 8009d04:	e841 2300 	strex	r3, r2, [r1]
 8009d08:	617b      	str	r3, [r7, #20]
   return(result);
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d1e6      	bne.n	8009cde <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009d10:	e007      	b.n	8009d22 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	699a      	ldr	r2, [r3, #24]
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f042 0208 	orr.w	r2, r2, #8
 8009d20:	619a      	str	r2, [r3, #24]
}
 8009d22:	bf00      	nop
 8009d24:	37a0      	adds	r7, #160	; 0xa0
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}
 8009d2a:	bf00      	nop
 8009d2c:	080095d7 	.word	0x080095d7

08009d30 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b083      	sub	sp, #12
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009d38:	bf00      	nop
 8009d3a:	370c      	adds	r7, #12
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr

08009d44 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b083      	sub	sp, #12
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009d4c:	bf00      	nop
 8009d4e:	370c      	adds	r7, #12
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr

08009d58 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b083      	sub	sp, #12
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009d60:	bf00      	nop
 8009d62:	370c      	adds	r7, #12
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr

08009d6c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b085      	sub	sp, #20
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009d7a:	2b01      	cmp	r3, #1
 8009d7c:	d101      	bne.n	8009d82 <HAL_UARTEx_DisableFifoMode+0x16>
 8009d7e:	2302      	movs	r3, #2
 8009d80:	e027      	b.n	8009dd2 <HAL_UARTEx_DisableFifoMode+0x66>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2201      	movs	r2, #1
 8009d86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2224      	movs	r2, #36	; 0x24
 8009d8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	681a      	ldr	r2, [r3, #0]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f022 0201 	bic.w	r2, r2, #1
 8009da8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009db0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2200      	movs	r2, #0
 8009db6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	68fa      	ldr	r2, [r7, #12]
 8009dbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2220      	movs	r2, #32
 8009dc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009dd0:	2300      	movs	r3, #0
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3714      	adds	r7, #20
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ddc:	4770      	bx	lr

08009dde <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009dde:	b580      	push	{r7, lr}
 8009de0:	b084      	sub	sp, #16
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	6078      	str	r0, [r7, #4]
 8009de6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d101      	bne.n	8009df6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009df2:	2302      	movs	r3, #2
 8009df4:	e02d      	b.n	8009e52 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2201      	movs	r2, #1
 8009dfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2224      	movs	r2, #36	; 0x24
 8009e02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	681a      	ldr	r2, [r3, #0]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f022 0201 	bic.w	r2, r2, #1
 8009e1c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	689b      	ldr	r3, [r3, #8]
 8009e24:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	683a      	ldr	r2, [r7, #0]
 8009e2e:	430a      	orrs	r2, r1
 8009e30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f000 f850 	bl	8009ed8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	68fa      	ldr	r2, [r7, #12]
 8009e3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2220      	movs	r2, #32
 8009e44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009e50:	2300      	movs	r3, #0
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3710      	adds	r7, #16
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}

08009e5a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009e5a:	b580      	push	{r7, lr}
 8009e5c:	b084      	sub	sp, #16
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]
 8009e62:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009e6a:	2b01      	cmp	r3, #1
 8009e6c:	d101      	bne.n	8009e72 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009e6e:	2302      	movs	r3, #2
 8009e70:	e02d      	b.n	8009ece <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2201      	movs	r2, #1
 8009e76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2224      	movs	r2, #36	; 0x24
 8009e7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	681a      	ldr	r2, [r3, #0]
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f022 0201 	bic.w	r2, r2, #1
 8009e98:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	689b      	ldr	r3, [r3, #8]
 8009ea0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	683a      	ldr	r2, [r7, #0]
 8009eaa:	430a      	orrs	r2, r1
 8009eac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 f812 	bl	8009ed8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	68fa      	ldr	r2, [r7, #12]
 8009eba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2220      	movs	r2, #32
 8009ec0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009ecc:	2300      	movs	r3, #0
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3710      	adds	r7, #16
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}
	...

08009ed8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b085      	sub	sp, #20
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d108      	bne.n	8009efa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2201      	movs	r2, #1
 8009eec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009ef8:	e031      	b.n	8009f5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009efa:	2308      	movs	r3, #8
 8009efc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009efe:	2308      	movs	r3, #8
 8009f00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	689b      	ldr	r3, [r3, #8]
 8009f08:	0e5b      	lsrs	r3, r3, #25
 8009f0a:	b2db      	uxtb	r3, r3
 8009f0c:	f003 0307 	and.w	r3, r3, #7
 8009f10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	689b      	ldr	r3, [r3, #8]
 8009f18:	0f5b      	lsrs	r3, r3, #29
 8009f1a:	b2db      	uxtb	r3, r3
 8009f1c:	f003 0307 	and.w	r3, r3, #7
 8009f20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009f22:	7bbb      	ldrb	r3, [r7, #14]
 8009f24:	7b3a      	ldrb	r2, [r7, #12]
 8009f26:	4911      	ldr	r1, [pc, #68]	; (8009f6c <UARTEx_SetNbDataToProcess+0x94>)
 8009f28:	5c8a      	ldrb	r2, [r1, r2]
 8009f2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009f2e:	7b3a      	ldrb	r2, [r7, #12]
 8009f30:	490f      	ldr	r1, [pc, #60]	; (8009f70 <UARTEx_SetNbDataToProcess+0x98>)
 8009f32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009f34:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f38:	b29a      	uxth	r2, r3
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f40:	7bfb      	ldrb	r3, [r7, #15]
 8009f42:	7b7a      	ldrb	r2, [r7, #13]
 8009f44:	4909      	ldr	r1, [pc, #36]	; (8009f6c <UARTEx_SetNbDataToProcess+0x94>)
 8009f46:	5c8a      	ldrb	r2, [r1, r2]
 8009f48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009f4c:	7b7a      	ldrb	r2, [r7, #13]
 8009f4e:	4908      	ldr	r1, [pc, #32]	; (8009f70 <UARTEx_SetNbDataToProcess+0x98>)
 8009f50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f52:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f56:	b29a      	uxth	r2, r3
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009f5e:	bf00      	nop
 8009f60:	3714      	adds	r7, #20
 8009f62:	46bd      	mov	sp, r7
 8009f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f68:	4770      	bx	lr
 8009f6a:	bf00      	nop
 8009f6c:	0800d448 	.word	0x0800d448
 8009f70:	0800d450 	.word	0x0800d450

08009f74 <atoi>:
 8009f74:	220a      	movs	r2, #10
 8009f76:	2100      	movs	r1, #0
 8009f78:	f000 bdce 	b.w	800ab18 <strtol>

08009f7c <__errno>:
 8009f7c:	4b01      	ldr	r3, [pc, #4]	; (8009f84 <__errno+0x8>)
 8009f7e:	6818      	ldr	r0, [r3, #0]
 8009f80:	4770      	bx	lr
 8009f82:	bf00      	nop
 8009f84:	2000000c 	.word	0x2000000c

08009f88 <__libc_init_array>:
 8009f88:	b570      	push	{r4, r5, r6, lr}
 8009f8a:	4d0d      	ldr	r5, [pc, #52]	; (8009fc0 <__libc_init_array+0x38>)
 8009f8c:	4c0d      	ldr	r4, [pc, #52]	; (8009fc4 <__libc_init_array+0x3c>)
 8009f8e:	1b64      	subs	r4, r4, r5
 8009f90:	10a4      	asrs	r4, r4, #2
 8009f92:	2600      	movs	r6, #0
 8009f94:	42a6      	cmp	r6, r4
 8009f96:	d109      	bne.n	8009fac <__libc_init_array+0x24>
 8009f98:	4d0b      	ldr	r5, [pc, #44]	; (8009fc8 <__libc_init_array+0x40>)
 8009f9a:	4c0c      	ldr	r4, [pc, #48]	; (8009fcc <__libc_init_array+0x44>)
 8009f9c:	f003 f81e 	bl	800cfdc <_init>
 8009fa0:	1b64      	subs	r4, r4, r5
 8009fa2:	10a4      	asrs	r4, r4, #2
 8009fa4:	2600      	movs	r6, #0
 8009fa6:	42a6      	cmp	r6, r4
 8009fa8:	d105      	bne.n	8009fb6 <__libc_init_array+0x2e>
 8009faa:	bd70      	pop	{r4, r5, r6, pc}
 8009fac:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fb0:	4798      	blx	r3
 8009fb2:	3601      	adds	r6, #1
 8009fb4:	e7ee      	b.n	8009f94 <__libc_init_array+0xc>
 8009fb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fba:	4798      	blx	r3
 8009fbc:	3601      	adds	r6, #1
 8009fbe:	e7f2      	b.n	8009fa6 <__libc_init_array+0x1e>
 8009fc0:	0800d89c 	.word	0x0800d89c
 8009fc4:	0800d89c 	.word	0x0800d89c
 8009fc8:	0800d89c 	.word	0x0800d89c
 8009fcc:	0800d8a0 	.word	0x0800d8a0

08009fd0 <memset>:
 8009fd0:	4402      	add	r2, r0
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d100      	bne.n	8009fda <memset+0xa>
 8009fd8:	4770      	bx	lr
 8009fda:	f803 1b01 	strb.w	r1, [r3], #1
 8009fde:	e7f9      	b.n	8009fd4 <memset+0x4>

08009fe0 <__cvt>:
 8009fe0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009fe4:	ec55 4b10 	vmov	r4, r5, d0
 8009fe8:	2d00      	cmp	r5, #0
 8009fea:	460e      	mov	r6, r1
 8009fec:	4619      	mov	r1, r3
 8009fee:	462b      	mov	r3, r5
 8009ff0:	bfbb      	ittet	lt
 8009ff2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009ff6:	461d      	movlt	r5, r3
 8009ff8:	2300      	movge	r3, #0
 8009ffa:	232d      	movlt	r3, #45	; 0x2d
 8009ffc:	700b      	strb	r3, [r1, #0]
 8009ffe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a000:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a004:	4691      	mov	r9, r2
 800a006:	f023 0820 	bic.w	r8, r3, #32
 800a00a:	bfbc      	itt	lt
 800a00c:	4622      	movlt	r2, r4
 800a00e:	4614      	movlt	r4, r2
 800a010:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a014:	d005      	beq.n	800a022 <__cvt+0x42>
 800a016:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a01a:	d100      	bne.n	800a01e <__cvt+0x3e>
 800a01c:	3601      	adds	r6, #1
 800a01e:	2102      	movs	r1, #2
 800a020:	e000      	b.n	800a024 <__cvt+0x44>
 800a022:	2103      	movs	r1, #3
 800a024:	ab03      	add	r3, sp, #12
 800a026:	9301      	str	r3, [sp, #4]
 800a028:	ab02      	add	r3, sp, #8
 800a02a:	9300      	str	r3, [sp, #0]
 800a02c:	ec45 4b10 	vmov	d0, r4, r5
 800a030:	4653      	mov	r3, sl
 800a032:	4632      	mov	r2, r6
 800a034:	f000 fe24 	bl	800ac80 <_dtoa_r>
 800a038:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a03c:	4607      	mov	r7, r0
 800a03e:	d102      	bne.n	800a046 <__cvt+0x66>
 800a040:	f019 0f01 	tst.w	r9, #1
 800a044:	d022      	beq.n	800a08c <__cvt+0xac>
 800a046:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a04a:	eb07 0906 	add.w	r9, r7, r6
 800a04e:	d110      	bne.n	800a072 <__cvt+0x92>
 800a050:	783b      	ldrb	r3, [r7, #0]
 800a052:	2b30      	cmp	r3, #48	; 0x30
 800a054:	d10a      	bne.n	800a06c <__cvt+0x8c>
 800a056:	2200      	movs	r2, #0
 800a058:	2300      	movs	r3, #0
 800a05a:	4620      	mov	r0, r4
 800a05c:	4629      	mov	r1, r5
 800a05e:	f7f6 fd6b 	bl	8000b38 <__aeabi_dcmpeq>
 800a062:	b918      	cbnz	r0, 800a06c <__cvt+0x8c>
 800a064:	f1c6 0601 	rsb	r6, r6, #1
 800a068:	f8ca 6000 	str.w	r6, [sl]
 800a06c:	f8da 3000 	ldr.w	r3, [sl]
 800a070:	4499      	add	r9, r3
 800a072:	2200      	movs	r2, #0
 800a074:	2300      	movs	r3, #0
 800a076:	4620      	mov	r0, r4
 800a078:	4629      	mov	r1, r5
 800a07a:	f7f6 fd5d 	bl	8000b38 <__aeabi_dcmpeq>
 800a07e:	b108      	cbz	r0, 800a084 <__cvt+0xa4>
 800a080:	f8cd 900c 	str.w	r9, [sp, #12]
 800a084:	2230      	movs	r2, #48	; 0x30
 800a086:	9b03      	ldr	r3, [sp, #12]
 800a088:	454b      	cmp	r3, r9
 800a08a:	d307      	bcc.n	800a09c <__cvt+0xbc>
 800a08c:	9b03      	ldr	r3, [sp, #12]
 800a08e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a090:	1bdb      	subs	r3, r3, r7
 800a092:	4638      	mov	r0, r7
 800a094:	6013      	str	r3, [r2, #0]
 800a096:	b004      	add	sp, #16
 800a098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a09c:	1c59      	adds	r1, r3, #1
 800a09e:	9103      	str	r1, [sp, #12]
 800a0a0:	701a      	strb	r2, [r3, #0]
 800a0a2:	e7f0      	b.n	800a086 <__cvt+0xa6>

0800a0a4 <__exponent>:
 800a0a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2900      	cmp	r1, #0
 800a0aa:	bfb8      	it	lt
 800a0ac:	4249      	neglt	r1, r1
 800a0ae:	f803 2b02 	strb.w	r2, [r3], #2
 800a0b2:	bfb4      	ite	lt
 800a0b4:	222d      	movlt	r2, #45	; 0x2d
 800a0b6:	222b      	movge	r2, #43	; 0x2b
 800a0b8:	2909      	cmp	r1, #9
 800a0ba:	7042      	strb	r2, [r0, #1]
 800a0bc:	dd2a      	ble.n	800a114 <__exponent+0x70>
 800a0be:	f10d 0407 	add.w	r4, sp, #7
 800a0c2:	46a4      	mov	ip, r4
 800a0c4:	270a      	movs	r7, #10
 800a0c6:	46a6      	mov	lr, r4
 800a0c8:	460a      	mov	r2, r1
 800a0ca:	fb91 f6f7 	sdiv	r6, r1, r7
 800a0ce:	fb07 1516 	mls	r5, r7, r6, r1
 800a0d2:	3530      	adds	r5, #48	; 0x30
 800a0d4:	2a63      	cmp	r2, #99	; 0x63
 800a0d6:	f104 34ff 	add.w	r4, r4, #4294967295
 800a0da:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a0de:	4631      	mov	r1, r6
 800a0e0:	dcf1      	bgt.n	800a0c6 <__exponent+0x22>
 800a0e2:	3130      	adds	r1, #48	; 0x30
 800a0e4:	f1ae 0502 	sub.w	r5, lr, #2
 800a0e8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a0ec:	1c44      	adds	r4, r0, #1
 800a0ee:	4629      	mov	r1, r5
 800a0f0:	4561      	cmp	r1, ip
 800a0f2:	d30a      	bcc.n	800a10a <__exponent+0x66>
 800a0f4:	f10d 0209 	add.w	r2, sp, #9
 800a0f8:	eba2 020e 	sub.w	r2, r2, lr
 800a0fc:	4565      	cmp	r5, ip
 800a0fe:	bf88      	it	hi
 800a100:	2200      	movhi	r2, #0
 800a102:	4413      	add	r3, r2
 800a104:	1a18      	subs	r0, r3, r0
 800a106:	b003      	add	sp, #12
 800a108:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a10a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a10e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a112:	e7ed      	b.n	800a0f0 <__exponent+0x4c>
 800a114:	2330      	movs	r3, #48	; 0x30
 800a116:	3130      	adds	r1, #48	; 0x30
 800a118:	7083      	strb	r3, [r0, #2]
 800a11a:	70c1      	strb	r1, [r0, #3]
 800a11c:	1d03      	adds	r3, r0, #4
 800a11e:	e7f1      	b.n	800a104 <__exponent+0x60>

0800a120 <_printf_float>:
 800a120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a124:	ed2d 8b02 	vpush	{d8}
 800a128:	b08d      	sub	sp, #52	; 0x34
 800a12a:	460c      	mov	r4, r1
 800a12c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a130:	4616      	mov	r6, r2
 800a132:	461f      	mov	r7, r3
 800a134:	4605      	mov	r5, r0
 800a136:	f001 fba3 	bl	800b880 <_localeconv_r>
 800a13a:	f8d0 a000 	ldr.w	sl, [r0]
 800a13e:	4650      	mov	r0, sl
 800a140:	f7f6 f878 	bl	8000234 <strlen>
 800a144:	2300      	movs	r3, #0
 800a146:	930a      	str	r3, [sp, #40]	; 0x28
 800a148:	6823      	ldr	r3, [r4, #0]
 800a14a:	9305      	str	r3, [sp, #20]
 800a14c:	f8d8 3000 	ldr.w	r3, [r8]
 800a150:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a154:	3307      	adds	r3, #7
 800a156:	f023 0307 	bic.w	r3, r3, #7
 800a15a:	f103 0208 	add.w	r2, r3, #8
 800a15e:	f8c8 2000 	str.w	r2, [r8]
 800a162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a166:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a16a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a16e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a172:	9307      	str	r3, [sp, #28]
 800a174:	f8cd 8018 	str.w	r8, [sp, #24]
 800a178:	ee08 0a10 	vmov	s16, r0
 800a17c:	4b9f      	ldr	r3, [pc, #636]	; (800a3fc <_printf_float+0x2dc>)
 800a17e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a182:	f04f 32ff 	mov.w	r2, #4294967295
 800a186:	f7f6 fd09 	bl	8000b9c <__aeabi_dcmpun>
 800a18a:	bb88      	cbnz	r0, 800a1f0 <_printf_float+0xd0>
 800a18c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a190:	4b9a      	ldr	r3, [pc, #616]	; (800a3fc <_printf_float+0x2dc>)
 800a192:	f04f 32ff 	mov.w	r2, #4294967295
 800a196:	f7f6 fce3 	bl	8000b60 <__aeabi_dcmple>
 800a19a:	bb48      	cbnz	r0, 800a1f0 <_printf_float+0xd0>
 800a19c:	2200      	movs	r2, #0
 800a19e:	2300      	movs	r3, #0
 800a1a0:	4640      	mov	r0, r8
 800a1a2:	4649      	mov	r1, r9
 800a1a4:	f7f6 fcd2 	bl	8000b4c <__aeabi_dcmplt>
 800a1a8:	b110      	cbz	r0, 800a1b0 <_printf_float+0x90>
 800a1aa:	232d      	movs	r3, #45	; 0x2d
 800a1ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1b0:	4b93      	ldr	r3, [pc, #588]	; (800a400 <_printf_float+0x2e0>)
 800a1b2:	4894      	ldr	r0, [pc, #592]	; (800a404 <_printf_float+0x2e4>)
 800a1b4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a1b8:	bf94      	ite	ls
 800a1ba:	4698      	movls	r8, r3
 800a1bc:	4680      	movhi	r8, r0
 800a1be:	2303      	movs	r3, #3
 800a1c0:	6123      	str	r3, [r4, #16]
 800a1c2:	9b05      	ldr	r3, [sp, #20]
 800a1c4:	f023 0204 	bic.w	r2, r3, #4
 800a1c8:	6022      	str	r2, [r4, #0]
 800a1ca:	f04f 0900 	mov.w	r9, #0
 800a1ce:	9700      	str	r7, [sp, #0]
 800a1d0:	4633      	mov	r3, r6
 800a1d2:	aa0b      	add	r2, sp, #44	; 0x2c
 800a1d4:	4621      	mov	r1, r4
 800a1d6:	4628      	mov	r0, r5
 800a1d8:	f000 f9d8 	bl	800a58c <_printf_common>
 800a1dc:	3001      	adds	r0, #1
 800a1de:	f040 8090 	bne.w	800a302 <_printf_float+0x1e2>
 800a1e2:	f04f 30ff 	mov.w	r0, #4294967295
 800a1e6:	b00d      	add	sp, #52	; 0x34
 800a1e8:	ecbd 8b02 	vpop	{d8}
 800a1ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1f0:	4642      	mov	r2, r8
 800a1f2:	464b      	mov	r3, r9
 800a1f4:	4640      	mov	r0, r8
 800a1f6:	4649      	mov	r1, r9
 800a1f8:	f7f6 fcd0 	bl	8000b9c <__aeabi_dcmpun>
 800a1fc:	b140      	cbz	r0, 800a210 <_printf_float+0xf0>
 800a1fe:	464b      	mov	r3, r9
 800a200:	2b00      	cmp	r3, #0
 800a202:	bfbc      	itt	lt
 800a204:	232d      	movlt	r3, #45	; 0x2d
 800a206:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a20a:	487f      	ldr	r0, [pc, #508]	; (800a408 <_printf_float+0x2e8>)
 800a20c:	4b7f      	ldr	r3, [pc, #508]	; (800a40c <_printf_float+0x2ec>)
 800a20e:	e7d1      	b.n	800a1b4 <_printf_float+0x94>
 800a210:	6863      	ldr	r3, [r4, #4]
 800a212:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a216:	9206      	str	r2, [sp, #24]
 800a218:	1c5a      	adds	r2, r3, #1
 800a21a:	d13f      	bne.n	800a29c <_printf_float+0x17c>
 800a21c:	2306      	movs	r3, #6
 800a21e:	6063      	str	r3, [r4, #4]
 800a220:	9b05      	ldr	r3, [sp, #20]
 800a222:	6861      	ldr	r1, [r4, #4]
 800a224:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a228:	2300      	movs	r3, #0
 800a22a:	9303      	str	r3, [sp, #12]
 800a22c:	ab0a      	add	r3, sp, #40	; 0x28
 800a22e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a232:	ab09      	add	r3, sp, #36	; 0x24
 800a234:	ec49 8b10 	vmov	d0, r8, r9
 800a238:	9300      	str	r3, [sp, #0]
 800a23a:	6022      	str	r2, [r4, #0]
 800a23c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a240:	4628      	mov	r0, r5
 800a242:	f7ff fecd 	bl	8009fe0 <__cvt>
 800a246:	9b06      	ldr	r3, [sp, #24]
 800a248:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a24a:	2b47      	cmp	r3, #71	; 0x47
 800a24c:	4680      	mov	r8, r0
 800a24e:	d108      	bne.n	800a262 <_printf_float+0x142>
 800a250:	1cc8      	adds	r0, r1, #3
 800a252:	db02      	blt.n	800a25a <_printf_float+0x13a>
 800a254:	6863      	ldr	r3, [r4, #4]
 800a256:	4299      	cmp	r1, r3
 800a258:	dd41      	ble.n	800a2de <_printf_float+0x1be>
 800a25a:	f1ab 0b02 	sub.w	fp, fp, #2
 800a25e:	fa5f fb8b 	uxtb.w	fp, fp
 800a262:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a266:	d820      	bhi.n	800a2aa <_printf_float+0x18a>
 800a268:	3901      	subs	r1, #1
 800a26a:	465a      	mov	r2, fp
 800a26c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a270:	9109      	str	r1, [sp, #36]	; 0x24
 800a272:	f7ff ff17 	bl	800a0a4 <__exponent>
 800a276:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a278:	1813      	adds	r3, r2, r0
 800a27a:	2a01      	cmp	r2, #1
 800a27c:	4681      	mov	r9, r0
 800a27e:	6123      	str	r3, [r4, #16]
 800a280:	dc02      	bgt.n	800a288 <_printf_float+0x168>
 800a282:	6822      	ldr	r2, [r4, #0]
 800a284:	07d2      	lsls	r2, r2, #31
 800a286:	d501      	bpl.n	800a28c <_printf_float+0x16c>
 800a288:	3301      	adds	r3, #1
 800a28a:	6123      	str	r3, [r4, #16]
 800a28c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a290:	2b00      	cmp	r3, #0
 800a292:	d09c      	beq.n	800a1ce <_printf_float+0xae>
 800a294:	232d      	movs	r3, #45	; 0x2d
 800a296:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a29a:	e798      	b.n	800a1ce <_printf_float+0xae>
 800a29c:	9a06      	ldr	r2, [sp, #24]
 800a29e:	2a47      	cmp	r2, #71	; 0x47
 800a2a0:	d1be      	bne.n	800a220 <_printf_float+0x100>
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d1bc      	bne.n	800a220 <_printf_float+0x100>
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	e7b9      	b.n	800a21e <_printf_float+0xfe>
 800a2aa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a2ae:	d118      	bne.n	800a2e2 <_printf_float+0x1c2>
 800a2b0:	2900      	cmp	r1, #0
 800a2b2:	6863      	ldr	r3, [r4, #4]
 800a2b4:	dd0b      	ble.n	800a2ce <_printf_float+0x1ae>
 800a2b6:	6121      	str	r1, [r4, #16]
 800a2b8:	b913      	cbnz	r3, 800a2c0 <_printf_float+0x1a0>
 800a2ba:	6822      	ldr	r2, [r4, #0]
 800a2bc:	07d0      	lsls	r0, r2, #31
 800a2be:	d502      	bpl.n	800a2c6 <_printf_float+0x1a6>
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	440b      	add	r3, r1
 800a2c4:	6123      	str	r3, [r4, #16]
 800a2c6:	65a1      	str	r1, [r4, #88]	; 0x58
 800a2c8:	f04f 0900 	mov.w	r9, #0
 800a2cc:	e7de      	b.n	800a28c <_printf_float+0x16c>
 800a2ce:	b913      	cbnz	r3, 800a2d6 <_printf_float+0x1b6>
 800a2d0:	6822      	ldr	r2, [r4, #0]
 800a2d2:	07d2      	lsls	r2, r2, #31
 800a2d4:	d501      	bpl.n	800a2da <_printf_float+0x1ba>
 800a2d6:	3302      	adds	r3, #2
 800a2d8:	e7f4      	b.n	800a2c4 <_printf_float+0x1a4>
 800a2da:	2301      	movs	r3, #1
 800a2dc:	e7f2      	b.n	800a2c4 <_printf_float+0x1a4>
 800a2de:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a2e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2e4:	4299      	cmp	r1, r3
 800a2e6:	db05      	blt.n	800a2f4 <_printf_float+0x1d4>
 800a2e8:	6823      	ldr	r3, [r4, #0]
 800a2ea:	6121      	str	r1, [r4, #16]
 800a2ec:	07d8      	lsls	r0, r3, #31
 800a2ee:	d5ea      	bpl.n	800a2c6 <_printf_float+0x1a6>
 800a2f0:	1c4b      	adds	r3, r1, #1
 800a2f2:	e7e7      	b.n	800a2c4 <_printf_float+0x1a4>
 800a2f4:	2900      	cmp	r1, #0
 800a2f6:	bfd4      	ite	le
 800a2f8:	f1c1 0202 	rsble	r2, r1, #2
 800a2fc:	2201      	movgt	r2, #1
 800a2fe:	4413      	add	r3, r2
 800a300:	e7e0      	b.n	800a2c4 <_printf_float+0x1a4>
 800a302:	6823      	ldr	r3, [r4, #0]
 800a304:	055a      	lsls	r2, r3, #21
 800a306:	d407      	bmi.n	800a318 <_printf_float+0x1f8>
 800a308:	6923      	ldr	r3, [r4, #16]
 800a30a:	4642      	mov	r2, r8
 800a30c:	4631      	mov	r1, r6
 800a30e:	4628      	mov	r0, r5
 800a310:	47b8      	blx	r7
 800a312:	3001      	adds	r0, #1
 800a314:	d12c      	bne.n	800a370 <_printf_float+0x250>
 800a316:	e764      	b.n	800a1e2 <_printf_float+0xc2>
 800a318:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a31c:	f240 80e0 	bls.w	800a4e0 <_printf_float+0x3c0>
 800a320:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a324:	2200      	movs	r2, #0
 800a326:	2300      	movs	r3, #0
 800a328:	f7f6 fc06 	bl	8000b38 <__aeabi_dcmpeq>
 800a32c:	2800      	cmp	r0, #0
 800a32e:	d034      	beq.n	800a39a <_printf_float+0x27a>
 800a330:	4a37      	ldr	r2, [pc, #220]	; (800a410 <_printf_float+0x2f0>)
 800a332:	2301      	movs	r3, #1
 800a334:	4631      	mov	r1, r6
 800a336:	4628      	mov	r0, r5
 800a338:	47b8      	blx	r7
 800a33a:	3001      	adds	r0, #1
 800a33c:	f43f af51 	beq.w	800a1e2 <_printf_float+0xc2>
 800a340:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a344:	429a      	cmp	r2, r3
 800a346:	db02      	blt.n	800a34e <_printf_float+0x22e>
 800a348:	6823      	ldr	r3, [r4, #0]
 800a34a:	07d8      	lsls	r0, r3, #31
 800a34c:	d510      	bpl.n	800a370 <_printf_float+0x250>
 800a34e:	ee18 3a10 	vmov	r3, s16
 800a352:	4652      	mov	r2, sl
 800a354:	4631      	mov	r1, r6
 800a356:	4628      	mov	r0, r5
 800a358:	47b8      	blx	r7
 800a35a:	3001      	adds	r0, #1
 800a35c:	f43f af41 	beq.w	800a1e2 <_printf_float+0xc2>
 800a360:	f04f 0800 	mov.w	r8, #0
 800a364:	f104 091a 	add.w	r9, r4, #26
 800a368:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a36a:	3b01      	subs	r3, #1
 800a36c:	4543      	cmp	r3, r8
 800a36e:	dc09      	bgt.n	800a384 <_printf_float+0x264>
 800a370:	6823      	ldr	r3, [r4, #0]
 800a372:	079b      	lsls	r3, r3, #30
 800a374:	f100 8105 	bmi.w	800a582 <_printf_float+0x462>
 800a378:	68e0      	ldr	r0, [r4, #12]
 800a37a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a37c:	4298      	cmp	r0, r3
 800a37e:	bfb8      	it	lt
 800a380:	4618      	movlt	r0, r3
 800a382:	e730      	b.n	800a1e6 <_printf_float+0xc6>
 800a384:	2301      	movs	r3, #1
 800a386:	464a      	mov	r2, r9
 800a388:	4631      	mov	r1, r6
 800a38a:	4628      	mov	r0, r5
 800a38c:	47b8      	blx	r7
 800a38e:	3001      	adds	r0, #1
 800a390:	f43f af27 	beq.w	800a1e2 <_printf_float+0xc2>
 800a394:	f108 0801 	add.w	r8, r8, #1
 800a398:	e7e6      	b.n	800a368 <_printf_float+0x248>
 800a39a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	dc39      	bgt.n	800a414 <_printf_float+0x2f4>
 800a3a0:	4a1b      	ldr	r2, [pc, #108]	; (800a410 <_printf_float+0x2f0>)
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	4631      	mov	r1, r6
 800a3a6:	4628      	mov	r0, r5
 800a3a8:	47b8      	blx	r7
 800a3aa:	3001      	adds	r0, #1
 800a3ac:	f43f af19 	beq.w	800a1e2 <_printf_float+0xc2>
 800a3b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	d102      	bne.n	800a3be <_printf_float+0x29e>
 800a3b8:	6823      	ldr	r3, [r4, #0]
 800a3ba:	07d9      	lsls	r1, r3, #31
 800a3bc:	d5d8      	bpl.n	800a370 <_printf_float+0x250>
 800a3be:	ee18 3a10 	vmov	r3, s16
 800a3c2:	4652      	mov	r2, sl
 800a3c4:	4631      	mov	r1, r6
 800a3c6:	4628      	mov	r0, r5
 800a3c8:	47b8      	blx	r7
 800a3ca:	3001      	adds	r0, #1
 800a3cc:	f43f af09 	beq.w	800a1e2 <_printf_float+0xc2>
 800a3d0:	f04f 0900 	mov.w	r9, #0
 800a3d4:	f104 0a1a 	add.w	sl, r4, #26
 800a3d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3da:	425b      	negs	r3, r3
 800a3dc:	454b      	cmp	r3, r9
 800a3de:	dc01      	bgt.n	800a3e4 <_printf_float+0x2c4>
 800a3e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3e2:	e792      	b.n	800a30a <_printf_float+0x1ea>
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	4652      	mov	r2, sl
 800a3e8:	4631      	mov	r1, r6
 800a3ea:	4628      	mov	r0, r5
 800a3ec:	47b8      	blx	r7
 800a3ee:	3001      	adds	r0, #1
 800a3f0:	f43f aef7 	beq.w	800a1e2 <_printf_float+0xc2>
 800a3f4:	f109 0901 	add.w	r9, r9, #1
 800a3f8:	e7ee      	b.n	800a3d8 <_printf_float+0x2b8>
 800a3fa:	bf00      	nop
 800a3fc:	7fefffff 	.word	0x7fefffff
 800a400:	0800d45c 	.word	0x0800d45c
 800a404:	0800d460 	.word	0x0800d460
 800a408:	0800d468 	.word	0x0800d468
 800a40c:	0800d464 	.word	0x0800d464
 800a410:	0800d46c 	.word	0x0800d46c
 800a414:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a416:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a418:	429a      	cmp	r2, r3
 800a41a:	bfa8      	it	ge
 800a41c:	461a      	movge	r2, r3
 800a41e:	2a00      	cmp	r2, #0
 800a420:	4691      	mov	r9, r2
 800a422:	dc37      	bgt.n	800a494 <_printf_float+0x374>
 800a424:	f04f 0b00 	mov.w	fp, #0
 800a428:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a42c:	f104 021a 	add.w	r2, r4, #26
 800a430:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a432:	9305      	str	r3, [sp, #20]
 800a434:	eba3 0309 	sub.w	r3, r3, r9
 800a438:	455b      	cmp	r3, fp
 800a43a:	dc33      	bgt.n	800a4a4 <_printf_float+0x384>
 800a43c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a440:	429a      	cmp	r2, r3
 800a442:	db3b      	blt.n	800a4bc <_printf_float+0x39c>
 800a444:	6823      	ldr	r3, [r4, #0]
 800a446:	07da      	lsls	r2, r3, #31
 800a448:	d438      	bmi.n	800a4bc <_printf_float+0x39c>
 800a44a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a44c:	9a05      	ldr	r2, [sp, #20]
 800a44e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a450:	1a9a      	subs	r2, r3, r2
 800a452:	eba3 0901 	sub.w	r9, r3, r1
 800a456:	4591      	cmp	r9, r2
 800a458:	bfa8      	it	ge
 800a45a:	4691      	movge	r9, r2
 800a45c:	f1b9 0f00 	cmp.w	r9, #0
 800a460:	dc35      	bgt.n	800a4ce <_printf_float+0x3ae>
 800a462:	f04f 0800 	mov.w	r8, #0
 800a466:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a46a:	f104 0a1a 	add.w	sl, r4, #26
 800a46e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a472:	1a9b      	subs	r3, r3, r2
 800a474:	eba3 0309 	sub.w	r3, r3, r9
 800a478:	4543      	cmp	r3, r8
 800a47a:	f77f af79 	ble.w	800a370 <_printf_float+0x250>
 800a47e:	2301      	movs	r3, #1
 800a480:	4652      	mov	r2, sl
 800a482:	4631      	mov	r1, r6
 800a484:	4628      	mov	r0, r5
 800a486:	47b8      	blx	r7
 800a488:	3001      	adds	r0, #1
 800a48a:	f43f aeaa 	beq.w	800a1e2 <_printf_float+0xc2>
 800a48e:	f108 0801 	add.w	r8, r8, #1
 800a492:	e7ec      	b.n	800a46e <_printf_float+0x34e>
 800a494:	4613      	mov	r3, r2
 800a496:	4631      	mov	r1, r6
 800a498:	4642      	mov	r2, r8
 800a49a:	4628      	mov	r0, r5
 800a49c:	47b8      	blx	r7
 800a49e:	3001      	adds	r0, #1
 800a4a0:	d1c0      	bne.n	800a424 <_printf_float+0x304>
 800a4a2:	e69e      	b.n	800a1e2 <_printf_float+0xc2>
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	4631      	mov	r1, r6
 800a4a8:	4628      	mov	r0, r5
 800a4aa:	9205      	str	r2, [sp, #20]
 800a4ac:	47b8      	blx	r7
 800a4ae:	3001      	adds	r0, #1
 800a4b0:	f43f ae97 	beq.w	800a1e2 <_printf_float+0xc2>
 800a4b4:	9a05      	ldr	r2, [sp, #20]
 800a4b6:	f10b 0b01 	add.w	fp, fp, #1
 800a4ba:	e7b9      	b.n	800a430 <_printf_float+0x310>
 800a4bc:	ee18 3a10 	vmov	r3, s16
 800a4c0:	4652      	mov	r2, sl
 800a4c2:	4631      	mov	r1, r6
 800a4c4:	4628      	mov	r0, r5
 800a4c6:	47b8      	blx	r7
 800a4c8:	3001      	adds	r0, #1
 800a4ca:	d1be      	bne.n	800a44a <_printf_float+0x32a>
 800a4cc:	e689      	b.n	800a1e2 <_printf_float+0xc2>
 800a4ce:	9a05      	ldr	r2, [sp, #20]
 800a4d0:	464b      	mov	r3, r9
 800a4d2:	4442      	add	r2, r8
 800a4d4:	4631      	mov	r1, r6
 800a4d6:	4628      	mov	r0, r5
 800a4d8:	47b8      	blx	r7
 800a4da:	3001      	adds	r0, #1
 800a4dc:	d1c1      	bne.n	800a462 <_printf_float+0x342>
 800a4de:	e680      	b.n	800a1e2 <_printf_float+0xc2>
 800a4e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a4e2:	2a01      	cmp	r2, #1
 800a4e4:	dc01      	bgt.n	800a4ea <_printf_float+0x3ca>
 800a4e6:	07db      	lsls	r3, r3, #31
 800a4e8:	d538      	bpl.n	800a55c <_printf_float+0x43c>
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	4642      	mov	r2, r8
 800a4ee:	4631      	mov	r1, r6
 800a4f0:	4628      	mov	r0, r5
 800a4f2:	47b8      	blx	r7
 800a4f4:	3001      	adds	r0, #1
 800a4f6:	f43f ae74 	beq.w	800a1e2 <_printf_float+0xc2>
 800a4fa:	ee18 3a10 	vmov	r3, s16
 800a4fe:	4652      	mov	r2, sl
 800a500:	4631      	mov	r1, r6
 800a502:	4628      	mov	r0, r5
 800a504:	47b8      	blx	r7
 800a506:	3001      	adds	r0, #1
 800a508:	f43f ae6b 	beq.w	800a1e2 <_printf_float+0xc2>
 800a50c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a510:	2200      	movs	r2, #0
 800a512:	2300      	movs	r3, #0
 800a514:	f7f6 fb10 	bl	8000b38 <__aeabi_dcmpeq>
 800a518:	b9d8      	cbnz	r0, 800a552 <_printf_float+0x432>
 800a51a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a51c:	f108 0201 	add.w	r2, r8, #1
 800a520:	3b01      	subs	r3, #1
 800a522:	4631      	mov	r1, r6
 800a524:	4628      	mov	r0, r5
 800a526:	47b8      	blx	r7
 800a528:	3001      	adds	r0, #1
 800a52a:	d10e      	bne.n	800a54a <_printf_float+0x42a>
 800a52c:	e659      	b.n	800a1e2 <_printf_float+0xc2>
 800a52e:	2301      	movs	r3, #1
 800a530:	4652      	mov	r2, sl
 800a532:	4631      	mov	r1, r6
 800a534:	4628      	mov	r0, r5
 800a536:	47b8      	blx	r7
 800a538:	3001      	adds	r0, #1
 800a53a:	f43f ae52 	beq.w	800a1e2 <_printf_float+0xc2>
 800a53e:	f108 0801 	add.w	r8, r8, #1
 800a542:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a544:	3b01      	subs	r3, #1
 800a546:	4543      	cmp	r3, r8
 800a548:	dcf1      	bgt.n	800a52e <_printf_float+0x40e>
 800a54a:	464b      	mov	r3, r9
 800a54c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a550:	e6dc      	b.n	800a30c <_printf_float+0x1ec>
 800a552:	f04f 0800 	mov.w	r8, #0
 800a556:	f104 0a1a 	add.w	sl, r4, #26
 800a55a:	e7f2      	b.n	800a542 <_printf_float+0x422>
 800a55c:	2301      	movs	r3, #1
 800a55e:	4642      	mov	r2, r8
 800a560:	e7df      	b.n	800a522 <_printf_float+0x402>
 800a562:	2301      	movs	r3, #1
 800a564:	464a      	mov	r2, r9
 800a566:	4631      	mov	r1, r6
 800a568:	4628      	mov	r0, r5
 800a56a:	47b8      	blx	r7
 800a56c:	3001      	adds	r0, #1
 800a56e:	f43f ae38 	beq.w	800a1e2 <_printf_float+0xc2>
 800a572:	f108 0801 	add.w	r8, r8, #1
 800a576:	68e3      	ldr	r3, [r4, #12]
 800a578:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a57a:	1a5b      	subs	r3, r3, r1
 800a57c:	4543      	cmp	r3, r8
 800a57e:	dcf0      	bgt.n	800a562 <_printf_float+0x442>
 800a580:	e6fa      	b.n	800a378 <_printf_float+0x258>
 800a582:	f04f 0800 	mov.w	r8, #0
 800a586:	f104 0919 	add.w	r9, r4, #25
 800a58a:	e7f4      	b.n	800a576 <_printf_float+0x456>

0800a58c <_printf_common>:
 800a58c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a590:	4616      	mov	r6, r2
 800a592:	4699      	mov	r9, r3
 800a594:	688a      	ldr	r2, [r1, #8]
 800a596:	690b      	ldr	r3, [r1, #16]
 800a598:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a59c:	4293      	cmp	r3, r2
 800a59e:	bfb8      	it	lt
 800a5a0:	4613      	movlt	r3, r2
 800a5a2:	6033      	str	r3, [r6, #0]
 800a5a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a5a8:	4607      	mov	r7, r0
 800a5aa:	460c      	mov	r4, r1
 800a5ac:	b10a      	cbz	r2, 800a5b2 <_printf_common+0x26>
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	6033      	str	r3, [r6, #0]
 800a5b2:	6823      	ldr	r3, [r4, #0]
 800a5b4:	0699      	lsls	r1, r3, #26
 800a5b6:	bf42      	ittt	mi
 800a5b8:	6833      	ldrmi	r3, [r6, #0]
 800a5ba:	3302      	addmi	r3, #2
 800a5bc:	6033      	strmi	r3, [r6, #0]
 800a5be:	6825      	ldr	r5, [r4, #0]
 800a5c0:	f015 0506 	ands.w	r5, r5, #6
 800a5c4:	d106      	bne.n	800a5d4 <_printf_common+0x48>
 800a5c6:	f104 0a19 	add.w	sl, r4, #25
 800a5ca:	68e3      	ldr	r3, [r4, #12]
 800a5cc:	6832      	ldr	r2, [r6, #0]
 800a5ce:	1a9b      	subs	r3, r3, r2
 800a5d0:	42ab      	cmp	r3, r5
 800a5d2:	dc26      	bgt.n	800a622 <_printf_common+0x96>
 800a5d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a5d8:	1e13      	subs	r3, r2, #0
 800a5da:	6822      	ldr	r2, [r4, #0]
 800a5dc:	bf18      	it	ne
 800a5de:	2301      	movne	r3, #1
 800a5e0:	0692      	lsls	r2, r2, #26
 800a5e2:	d42b      	bmi.n	800a63c <_printf_common+0xb0>
 800a5e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a5e8:	4649      	mov	r1, r9
 800a5ea:	4638      	mov	r0, r7
 800a5ec:	47c0      	blx	r8
 800a5ee:	3001      	adds	r0, #1
 800a5f0:	d01e      	beq.n	800a630 <_printf_common+0xa4>
 800a5f2:	6823      	ldr	r3, [r4, #0]
 800a5f4:	68e5      	ldr	r5, [r4, #12]
 800a5f6:	6832      	ldr	r2, [r6, #0]
 800a5f8:	f003 0306 	and.w	r3, r3, #6
 800a5fc:	2b04      	cmp	r3, #4
 800a5fe:	bf08      	it	eq
 800a600:	1aad      	subeq	r5, r5, r2
 800a602:	68a3      	ldr	r3, [r4, #8]
 800a604:	6922      	ldr	r2, [r4, #16]
 800a606:	bf0c      	ite	eq
 800a608:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a60c:	2500      	movne	r5, #0
 800a60e:	4293      	cmp	r3, r2
 800a610:	bfc4      	itt	gt
 800a612:	1a9b      	subgt	r3, r3, r2
 800a614:	18ed      	addgt	r5, r5, r3
 800a616:	2600      	movs	r6, #0
 800a618:	341a      	adds	r4, #26
 800a61a:	42b5      	cmp	r5, r6
 800a61c:	d11a      	bne.n	800a654 <_printf_common+0xc8>
 800a61e:	2000      	movs	r0, #0
 800a620:	e008      	b.n	800a634 <_printf_common+0xa8>
 800a622:	2301      	movs	r3, #1
 800a624:	4652      	mov	r2, sl
 800a626:	4649      	mov	r1, r9
 800a628:	4638      	mov	r0, r7
 800a62a:	47c0      	blx	r8
 800a62c:	3001      	adds	r0, #1
 800a62e:	d103      	bne.n	800a638 <_printf_common+0xac>
 800a630:	f04f 30ff 	mov.w	r0, #4294967295
 800a634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a638:	3501      	adds	r5, #1
 800a63a:	e7c6      	b.n	800a5ca <_printf_common+0x3e>
 800a63c:	18e1      	adds	r1, r4, r3
 800a63e:	1c5a      	adds	r2, r3, #1
 800a640:	2030      	movs	r0, #48	; 0x30
 800a642:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a646:	4422      	add	r2, r4
 800a648:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a64c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a650:	3302      	adds	r3, #2
 800a652:	e7c7      	b.n	800a5e4 <_printf_common+0x58>
 800a654:	2301      	movs	r3, #1
 800a656:	4622      	mov	r2, r4
 800a658:	4649      	mov	r1, r9
 800a65a:	4638      	mov	r0, r7
 800a65c:	47c0      	blx	r8
 800a65e:	3001      	adds	r0, #1
 800a660:	d0e6      	beq.n	800a630 <_printf_common+0xa4>
 800a662:	3601      	adds	r6, #1
 800a664:	e7d9      	b.n	800a61a <_printf_common+0x8e>
	...

0800a668 <_printf_i>:
 800a668:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a66c:	7e0f      	ldrb	r7, [r1, #24]
 800a66e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a670:	2f78      	cmp	r7, #120	; 0x78
 800a672:	4691      	mov	r9, r2
 800a674:	4680      	mov	r8, r0
 800a676:	460c      	mov	r4, r1
 800a678:	469a      	mov	sl, r3
 800a67a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a67e:	d807      	bhi.n	800a690 <_printf_i+0x28>
 800a680:	2f62      	cmp	r7, #98	; 0x62
 800a682:	d80a      	bhi.n	800a69a <_printf_i+0x32>
 800a684:	2f00      	cmp	r7, #0
 800a686:	f000 80d8 	beq.w	800a83a <_printf_i+0x1d2>
 800a68a:	2f58      	cmp	r7, #88	; 0x58
 800a68c:	f000 80a3 	beq.w	800a7d6 <_printf_i+0x16e>
 800a690:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a694:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a698:	e03a      	b.n	800a710 <_printf_i+0xa8>
 800a69a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a69e:	2b15      	cmp	r3, #21
 800a6a0:	d8f6      	bhi.n	800a690 <_printf_i+0x28>
 800a6a2:	a101      	add	r1, pc, #4	; (adr r1, 800a6a8 <_printf_i+0x40>)
 800a6a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a6a8:	0800a701 	.word	0x0800a701
 800a6ac:	0800a715 	.word	0x0800a715
 800a6b0:	0800a691 	.word	0x0800a691
 800a6b4:	0800a691 	.word	0x0800a691
 800a6b8:	0800a691 	.word	0x0800a691
 800a6bc:	0800a691 	.word	0x0800a691
 800a6c0:	0800a715 	.word	0x0800a715
 800a6c4:	0800a691 	.word	0x0800a691
 800a6c8:	0800a691 	.word	0x0800a691
 800a6cc:	0800a691 	.word	0x0800a691
 800a6d0:	0800a691 	.word	0x0800a691
 800a6d4:	0800a821 	.word	0x0800a821
 800a6d8:	0800a745 	.word	0x0800a745
 800a6dc:	0800a803 	.word	0x0800a803
 800a6e0:	0800a691 	.word	0x0800a691
 800a6e4:	0800a691 	.word	0x0800a691
 800a6e8:	0800a843 	.word	0x0800a843
 800a6ec:	0800a691 	.word	0x0800a691
 800a6f0:	0800a745 	.word	0x0800a745
 800a6f4:	0800a691 	.word	0x0800a691
 800a6f8:	0800a691 	.word	0x0800a691
 800a6fc:	0800a80b 	.word	0x0800a80b
 800a700:	682b      	ldr	r3, [r5, #0]
 800a702:	1d1a      	adds	r2, r3, #4
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	602a      	str	r2, [r5, #0]
 800a708:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a70c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a710:	2301      	movs	r3, #1
 800a712:	e0a3      	b.n	800a85c <_printf_i+0x1f4>
 800a714:	6820      	ldr	r0, [r4, #0]
 800a716:	6829      	ldr	r1, [r5, #0]
 800a718:	0606      	lsls	r6, r0, #24
 800a71a:	f101 0304 	add.w	r3, r1, #4
 800a71e:	d50a      	bpl.n	800a736 <_printf_i+0xce>
 800a720:	680e      	ldr	r6, [r1, #0]
 800a722:	602b      	str	r3, [r5, #0]
 800a724:	2e00      	cmp	r6, #0
 800a726:	da03      	bge.n	800a730 <_printf_i+0xc8>
 800a728:	232d      	movs	r3, #45	; 0x2d
 800a72a:	4276      	negs	r6, r6
 800a72c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a730:	485e      	ldr	r0, [pc, #376]	; (800a8ac <_printf_i+0x244>)
 800a732:	230a      	movs	r3, #10
 800a734:	e019      	b.n	800a76a <_printf_i+0x102>
 800a736:	680e      	ldr	r6, [r1, #0]
 800a738:	602b      	str	r3, [r5, #0]
 800a73a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a73e:	bf18      	it	ne
 800a740:	b236      	sxthne	r6, r6
 800a742:	e7ef      	b.n	800a724 <_printf_i+0xbc>
 800a744:	682b      	ldr	r3, [r5, #0]
 800a746:	6820      	ldr	r0, [r4, #0]
 800a748:	1d19      	adds	r1, r3, #4
 800a74a:	6029      	str	r1, [r5, #0]
 800a74c:	0601      	lsls	r1, r0, #24
 800a74e:	d501      	bpl.n	800a754 <_printf_i+0xec>
 800a750:	681e      	ldr	r6, [r3, #0]
 800a752:	e002      	b.n	800a75a <_printf_i+0xf2>
 800a754:	0646      	lsls	r6, r0, #25
 800a756:	d5fb      	bpl.n	800a750 <_printf_i+0xe8>
 800a758:	881e      	ldrh	r6, [r3, #0]
 800a75a:	4854      	ldr	r0, [pc, #336]	; (800a8ac <_printf_i+0x244>)
 800a75c:	2f6f      	cmp	r7, #111	; 0x6f
 800a75e:	bf0c      	ite	eq
 800a760:	2308      	moveq	r3, #8
 800a762:	230a      	movne	r3, #10
 800a764:	2100      	movs	r1, #0
 800a766:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a76a:	6865      	ldr	r5, [r4, #4]
 800a76c:	60a5      	str	r5, [r4, #8]
 800a76e:	2d00      	cmp	r5, #0
 800a770:	bfa2      	ittt	ge
 800a772:	6821      	ldrge	r1, [r4, #0]
 800a774:	f021 0104 	bicge.w	r1, r1, #4
 800a778:	6021      	strge	r1, [r4, #0]
 800a77a:	b90e      	cbnz	r6, 800a780 <_printf_i+0x118>
 800a77c:	2d00      	cmp	r5, #0
 800a77e:	d04d      	beq.n	800a81c <_printf_i+0x1b4>
 800a780:	4615      	mov	r5, r2
 800a782:	fbb6 f1f3 	udiv	r1, r6, r3
 800a786:	fb03 6711 	mls	r7, r3, r1, r6
 800a78a:	5dc7      	ldrb	r7, [r0, r7]
 800a78c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a790:	4637      	mov	r7, r6
 800a792:	42bb      	cmp	r3, r7
 800a794:	460e      	mov	r6, r1
 800a796:	d9f4      	bls.n	800a782 <_printf_i+0x11a>
 800a798:	2b08      	cmp	r3, #8
 800a79a:	d10b      	bne.n	800a7b4 <_printf_i+0x14c>
 800a79c:	6823      	ldr	r3, [r4, #0]
 800a79e:	07de      	lsls	r6, r3, #31
 800a7a0:	d508      	bpl.n	800a7b4 <_printf_i+0x14c>
 800a7a2:	6923      	ldr	r3, [r4, #16]
 800a7a4:	6861      	ldr	r1, [r4, #4]
 800a7a6:	4299      	cmp	r1, r3
 800a7a8:	bfde      	ittt	le
 800a7aa:	2330      	movle	r3, #48	; 0x30
 800a7ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a7b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a7b4:	1b52      	subs	r2, r2, r5
 800a7b6:	6122      	str	r2, [r4, #16]
 800a7b8:	f8cd a000 	str.w	sl, [sp]
 800a7bc:	464b      	mov	r3, r9
 800a7be:	aa03      	add	r2, sp, #12
 800a7c0:	4621      	mov	r1, r4
 800a7c2:	4640      	mov	r0, r8
 800a7c4:	f7ff fee2 	bl	800a58c <_printf_common>
 800a7c8:	3001      	adds	r0, #1
 800a7ca:	d14c      	bne.n	800a866 <_printf_i+0x1fe>
 800a7cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a7d0:	b004      	add	sp, #16
 800a7d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7d6:	4835      	ldr	r0, [pc, #212]	; (800a8ac <_printf_i+0x244>)
 800a7d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a7dc:	6829      	ldr	r1, [r5, #0]
 800a7de:	6823      	ldr	r3, [r4, #0]
 800a7e0:	f851 6b04 	ldr.w	r6, [r1], #4
 800a7e4:	6029      	str	r1, [r5, #0]
 800a7e6:	061d      	lsls	r5, r3, #24
 800a7e8:	d514      	bpl.n	800a814 <_printf_i+0x1ac>
 800a7ea:	07df      	lsls	r7, r3, #31
 800a7ec:	bf44      	itt	mi
 800a7ee:	f043 0320 	orrmi.w	r3, r3, #32
 800a7f2:	6023      	strmi	r3, [r4, #0]
 800a7f4:	b91e      	cbnz	r6, 800a7fe <_printf_i+0x196>
 800a7f6:	6823      	ldr	r3, [r4, #0]
 800a7f8:	f023 0320 	bic.w	r3, r3, #32
 800a7fc:	6023      	str	r3, [r4, #0]
 800a7fe:	2310      	movs	r3, #16
 800a800:	e7b0      	b.n	800a764 <_printf_i+0xfc>
 800a802:	6823      	ldr	r3, [r4, #0]
 800a804:	f043 0320 	orr.w	r3, r3, #32
 800a808:	6023      	str	r3, [r4, #0]
 800a80a:	2378      	movs	r3, #120	; 0x78
 800a80c:	4828      	ldr	r0, [pc, #160]	; (800a8b0 <_printf_i+0x248>)
 800a80e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a812:	e7e3      	b.n	800a7dc <_printf_i+0x174>
 800a814:	0659      	lsls	r1, r3, #25
 800a816:	bf48      	it	mi
 800a818:	b2b6      	uxthmi	r6, r6
 800a81a:	e7e6      	b.n	800a7ea <_printf_i+0x182>
 800a81c:	4615      	mov	r5, r2
 800a81e:	e7bb      	b.n	800a798 <_printf_i+0x130>
 800a820:	682b      	ldr	r3, [r5, #0]
 800a822:	6826      	ldr	r6, [r4, #0]
 800a824:	6961      	ldr	r1, [r4, #20]
 800a826:	1d18      	adds	r0, r3, #4
 800a828:	6028      	str	r0, [r5, #0]
 800a82a:	0635      	lsls	r5, r6, #24
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	d501      	bpl.n	800a834 <_printf_i+0x1cc>
 800a830:	6019      	str	r1, [r3, #0]
 800a832:	e002      	b.n	800a83a <_printf_i+0x1d2>
 800a834:	0670      	lsls	r0, r6, #25
 800a836:	d5fb      	bpl.n	800a830 <_printf_i+0x1c8>
 800a838:	8019      	strh	r1, [r3, #0]
 800a83a:	2300      	movs	r3, #0
 800a83c:	6123      	str	r3, [r4, #16]
 800a83e:	4615      	mov	r5, r2
 800a840:	e7ba      	b.n	800a7b8 <_printf_i+0x150>
 800a842:	682b      	ldr	r3, [r5, #0]
 800a844:	1d1a      	adds	r2, r3, #4
 800a846:	602a      	str	r2, [r5, #0]
 800a848:	681d      	ldr	r5, [r3, #0]
 800a84a:	6862      	ldr	r2, [r4, #4]
 800a84c:	2100      	movs	r1, #0
 800a84e:	4628      	mov	r0, r5
 800a850:	f7f5 fcfe 	bl	8000250 <memchr>
 800a854:	b108      	cbz	r0, 800a85a <_printf_i+0x1f2>
 800a856:	1b40      	subs	r0, r0, r5
 800a858:	6060      	str	r0, [r4, #4]
 800a85a:	6863      	ldr	r3, [r4, #4]
 800a85c:	6123      	str	r3, [r4, #16]
 800a85e:	2300      	movs	r3, #0
 800a860:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a864:	e7a8      	b.n	800a7b8 <_printf_i+0x150>
 800a866:	6923      	ldr	r3, [r4, #16]
 800a868:	462a      	mov	r2, r5
 800a86a:	4649      	mov	r1, r9
 800a86c:	4640      	mov	r0, r8
 800a86e:	47d0      	blx	sl
 800a870:	3001      	adds	r0, #1
 800a872:	d0ab      	beq.n	800a7cc <_printf_i+0x164>
 800a874:	6823      	ldr	r3, [r4, #0]
 800a876:	079b      	lsls	r3, r3, #30
 800a878:	d413      	bmi.n	800a8a2 <_printf_i+0x23a>
 800a87a:	68e0      	ldr	r0, [r4, #12]
 800a87c:	9b03      	ldr	r3, [sp, #12]
 800a87e:	4298      	cmp	r0, r3
 800a880:	bfb8      	it	lt
 800a882:	4618      	movlt	r0, r3
 800a884:	e7a4      	b.n	800a7d0 <_printf_i+0x168>
 800a886:	2301      	movs	r3, #1
 800a888:	4632      	mov	r2, r6
 800a88a:	4649      	mov	r1, r9
 800a88c:	4640      	mov	r0, r8
 800a88e:	47d0      	blx	sl
 800a890:	3001      	adds	r0, #1
 800a892:	d09b      	beq.n	800a7cc <_printf_i+0x164>
 800a894:	3501      	adds	r5, #1
 800a896:	68e3      	ldr	r3, [r4, #12]
 800a898:	9903      	ldr	r1, [sp, #12]
 800a89a:	1a5b      	subs	r3, r3, r1
 800a89c:	42ab      	cmp	r3, r5
 800a89e:	dcf2      	bgt.n	800a886 <_printf_i+0x21e>
 800a8a0:	e7eb      	b.n	800a87a <_printf_i+0x212>
 800a8a2:	2500      	movs	r5, #0
 800a8a4:	f104 0619 	add.w	r6, r4, #25
 800a8a8:	e7f5      	b.n	800a896 <_printf_i+0x22e>
 800a8aa:	bf00      	nop
 800a8ac:	0800d46e 	.word	0x0800d46e
 800a8b0:	0800d47f 	.word	0x0800d47f

0800a8b4 <sniprintf>:
 800a8b4:	b40c      	push	{r2, r3}
 800a8b6:	b530      	push	{r4, r5, lr}
 800a8b8:	4b17      	ldr	r3, [pc, #92]	; (800a918 <sniprintf+0x64>)
 800a8ba:	1e0c      	subs	r4, r1, #0
 800a8bc:	681d      	ldr	r5, [r3, #0]
 800a8be:	b09d      	sub	sp, #116	; 0x74
 800a8c0:	da08      	bge.n	800a8d4 <sniprintf+0x20>
 800a8c2:	238b      	movs	r3, #139	; 0x8b
 800a8c4:	602b      	str	r3, [r5, #0]
 800a8c6:	f04f 30ff 	mov.w	r0, #4294967295
 800a8ca:	b01d      	add	sp, #116	; 0x74
 800a8cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a8d0:	b002      	add	sp, #8
 800a8d2:	4770      	bx	lr
 800a8d4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a8d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a8dc:	bf14      	ite	ne
 800a8de:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a8e2:	4623      	moveq	r3, r4
 800a8e4:	9304      	str	r3, [sp, #16]
 800a8e6:	9307      	str	r3, [sp, #28]
 800a8e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a8ec:	9002      	str	r0, [sp, #8]
 800a8ee:	9006      	str	r0, [sp, #24]
 800a8f0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a8f4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a8f6:	ab21      	add	r3, sp, #132	; 0x84
 800a8f8:	a902      	add	r1, sp, #8
 800a8fa:	4628      	mov	r0, r5
 800a8fc:	9301      	str	r3, [sp, #4]
 800a8fe:	f001 fcaf 	bl	800c260 <_svfiprintf_r>
 800a902:	1c43      	adds	r3, r0, #1
 800a904:	bfbc      	itt	lt
 800a906:	238b      	movlt	r3, #139	; 0x8b
 800a908:	602b      	strlt	r3, [r5, #0]
 800a90a:	2c00      	cmp	r4, #0
 800a90c:	d0dd      	beq.n	800a8ca <sniprintf+0x16>
 800a90e:	9b02      	ldr	r3, [sp, #8]
 800a910:	2200      	movs	r2, #0
 800a912:	701a      	strb	r2, [r3, #0]
 800a914:	e7d9      	b.n	800a8ca <sniprintf+0x16>
 800a916:	bf00      	nop
 800a918:	2000000c 	.word	0x2000000c

0800a91c <siprintf>:
 800a91c:	b40e      	push	{r1, r2, r3}
 800a91e:	b500      	push	{lr}
 800a920:	b09c      	sub	sp, #112	; 0x70
 800a922:	ab1d      	add	r3, sp, #116	; 0x74
 800a924:	9002      	str	r0, [sp, #8]
 800a926:	9006      	str	r0, [sp, #24]
 800a928:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a92c:	4809      	ldr	r0, [pc, #36]	; (800a954 <siprintf+0x38>)
 800a92e:	9107      	str	r1, [sp, #28]
 800a930:	9104      	str	r1, [sp, #16]
 800a932:	4909      	ldr	r1, [pc, #36]	; (800a958 <siprintf+0x3c>)
 800a934:	f853 2b04 	ldr.w	r2, [r3], #4
 800a938:	9105      	str	r1, [sp, #20]
 800a93a:	6800      	ldr	r0, [r0, #0]
 800a93c:	9301      	str	r3, [sp, #4]
 800a93e:	a902      	add	r1, sp, #8
 800a940:	f001 fc8e 	bl	800c260 <_svfiprintf_r>
 800a944:	9b02      	ldr	r3, [sp, #8]
 800a946:	2200      	movs	r2, #0
 800a948:	701a      	strb	r2, [r3, #0]
 800a94a:	b01c      	add	sp, #112	; 0x70
 800a94c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a950:	b003      	add	sp, #12
 800a952:	4770      	bx	lr
 800a954:	2000000c 	.word	0x2000000c
 800a958:	ffff0208 	.word	0xffff0208

0800a95c <strtok>:
 800a95c:	4b16      	ldr	r3, [pc, #88]	; (800a9b8 <strtok+0x5c>)
 800a95e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a960:	681e      	ldr	r6, [r3, #0]
 800a962:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800a964:	4605      	mov	r5, r0
 800a966:	b9fc      	cbnz	r4, 800a9a8 <strtok+0x4c>
 800a968:	2050      	movs	r0, #80	; 0x50
 800a96a:	9101      	str	r1, [sp, #4]
 800a96c:	f000 ff8c 	bl	800b888 <malloc>
 800a970:	9901      	ldr	r1, [sp, #4]
 800a972:	65b0      	str	r0, [r6, #88]	; 0x58
 800a974:	4602      	mov	r2, r0
 800a976:	b920      	cbnz	r0, 800a982 <strtok+0x26>
 800a978:	4b10      	ldr	r3, [pc, #64]	; (800a9bc <strtok+0x60>)
 800a97a:	4811      	ldr	r0, [pc, #68]	; (800a9c0 <strtok+0x64>)
 800a97c:	2157      	movs	r1, #87	; 0x57
 800a97e:	f000 f8d5 	bl	800ab2c <__assert_func>
 800a982:	e9c0 4400 	strd	r4, r4, [r0]
 800a986:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a98a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a98e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a992:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a996:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a99a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a99e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a9a2:	6184      	str	r4, [r0, #24]
 800a9a4:	7704      	strb	r4, [r0, #28]
 800a9a6:	6244      	str	r4, [r0, #36]	; 0x24
 800a9a8:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	4628      	mov	r0, r5
 800a9ae:	b002      	add	sp, #8
 800a9b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a9b4:	f000 b806 	b.w	800a9c4 <__strtok_r>
 800a9b8:	2000000c 	.word	0x2000000c
 800a9bc:	0800d490 	.word	0x0800d490
 800a9c0:	0800d4a7 	.word	0x0800d4a7

0800a9c4 <__strtok_r>:
 800a9c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9c6:	b908      	cbnz	r0, 800a9cc <__strtok_r+0x8>
 800a9c8:	6810      	ldr	r0, [r2, #0]
 800a9ca:	b188      	cbz	r0, 800a9f0 <__strtok_r+0x2c>
 800a9cc:	4604      	mov	r4, r0
 800a9ce:	4620      	mov	r0, r4
 800a9d0:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a9d4:	460f      	mov	r7, r1
 800a9d6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a9da:	b91e      	cbnz	r6, 800a9e4 <__strtok_r+0x20>
 800a9dc:	b965      	cbnz	r5, 800a9f8 <__strtok_r+0x34>
 800a9de:	6015      	str	r5, [r2, #0]
 800a9e0:	4628      	mov	r0, r5
 800a9e2:	e005      	b.n	800a9f0 <__strtok_r+0x2c>
 800a9e4:	42b5      	cmp	r5, r6
 800a9e6:	d1f6      	bne.n	800a9d6 <__strtok_r+0x12>
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d1f0      	bne.n	800a9ce <__strtok_r+0xa>
 800a9ec:	6014      	str	r4, [r2, #0]
 800a9ee:	7003      	strb	r3, [r0, #0]
 800a9f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9f2:	461c      	mov	r4, r3
 800a9f4:	e00c      	b.n	800aa10 <__strtok_r+0x4c>
 800a9f6:	b915      	cbnz	r5, 800a9fe <__strtok_r+0x3a>
 800a9f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a9fc:	460e      	mov	r6, r1
 800a9fe:	f816 5b01 	ldrb.w	r5, [r6], #1
 800aa02:	42ab      	cmp	r3, r5
 800aa04:	d1f7      	bne.n	800a9f6 <__strtok_r+0x32>
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d0f3      	beq.n	800a9f2 <__strtok_r+0x2e>
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800aa10:	6014      	str	r4, [r2, #0]
 800aa12:	e7ed      	b.n	800a9f0 <__strtok_r+0x2c>

0800aa14 <_strtol_l.constprop.0>:
 800aa14:	2b01      	cmp	r3, #1
 800aa16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa1a:	d001      	beq.n	800aa20 <_strtol_l.constprop.0+0xc>
 800aa1c:	2b24      	cmp	r3, #36	; 0x24
 800aa1e:	d906      	bls.n	800aa2e <_strtol_l.constprop.0+0x1a>
 800aa20:	f7ff faac 	bl	8009f7c <__errno>
 800aa24:	2316      	movs	r3, #22
 800aa26:	6003      	str	r3, [r0, #0]
 800aa28:	2000      	movs	r0, #0
 800aa2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa2e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ab14 <_strtol_l.constprop.0+0x100>
 800aa32:	460d      	mov	r5, r1
 800aa34:	462e      	mov	r6, r5
 800aa36:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa3a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800aa3e:	f017 0708 	ands.w	r7, r7, #8
 800aa42:	d1f7      	bne.n	800aa34 <_strtol_l.constprop.0+0x20>
 800aa44:	2c2d      	cmp	r4, #45	; 0x2d
 800aa46:	d132      	bne.n	800aaae <_strtol_l.constprop.0+0x9a>
 800aa48:	782c      	ldrb	r4, [r5, #0]
 800aa4a:	2701      	movs	r7, #1
 800aa4c:	1cb5      	adds	r5, r6, #2
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d05b      	beq.n	800ab0a <_strtol_l.constprop.0+0xf6>
 800aa52:	2b10      	cmp	r3, #16
 800aa54:	d109      	bne.n	800aa6a <_strtol_l.constprop.0+0x56>
 800aa56:	2c30      	cmp	r4, #48	; 0x30
 800aa58:	d107      	bne.n	800aa6a <_strtol_l.constprop.0+0x56>
 800aa5a:	782c      	ldrb	r4, [r5, #0]
 800aa5c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800aa60:	2c58      	cmp	r4, #88	; 0x58
 800aa62:	d14d      	bne.n	800ab00 <_strtol_l.constprop.0+0xec>
 800aa64:	786c      	ldrb	r4, [r5, #1]
 800aa66:	2310      	movs	r3, #16
 800aa68:	3502      	adds	r5, #2
 800aa6a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800aa6e:	f108 38ff 	add.w	r8, r8, #4294967295
 800aa72:	f04f 0c00 	mov.w	ip, #0
 800aa76:	fbb8 f9f3 	udiv	r9, r8, r3
 800aa7a:	4666      	mov	r6, ip
 800aa7c:	fb03 8a19 	mls	sl, r3, r9, r8
 800aa80:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800aa84:	f1be 0f09 	cmp.w	lr, #9
 800aa88:	d816      	bhi.n	800aab8 <_strtol_l.constprop.0+0xa4>
 800aa8a:	4674      	mov	r4, lr
 800aa8c:	42a3      	cmp	r3, r4
 800aa8e:	dd24      	ble.n	800aada <_strtol_l.constprop.0+0xc6>
 800aa90:	f1bc 0f00 	cmp.w	ip, #0
 800aa94:	db1e      	blt.n	800aad4 <_strtol_l.constprop.0+0xc0>
 800aa96:	45b1      	cmp	r9, r6
 800aa98:	d31c      	bcc.n	800aad4 <_strtol_l.constprop.0+0xc0>
 800aa9a:	d101      	bne.n	800aaa0 <_strtol_l.constprop.0+0x8c>
 800aa9c:	45a2      	cmp	sl, r4
 800aa9e:	db19      	blt.n	800aad4 <_strtol_l.constprop.0+0xc0>
 800aaa0:	fb06 4603 	mla	r6, r6, r3, r4
 800aaa4:	f04f 0c01 	mov.w	ip, #1
 800aaa8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aaac:	e7e8      	b.n	800aa80 <_strtol_l.constprop.0+0x6c>
 800aaae:	2c2b      	cmp	r4, #43	; 0x2b
 800aab0:	bf04      	itt	eq
 800aab2:	782c      	ldrbeq	r4, [r5, #0]
 800aab4:	1cb5      	addeq	r5, r6, #2
 800aab6:	e7ca      	b.n	800aa4e <_strtol_l.constprop.0+0x3a>
 800aab8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800aabc:	f1be 0f19 	cmp.w	lr, #25
 800aac0:	d801      	bhi.n	800aac6 <_strtol_l.constprop.0+0xb2>
 800aac2:	3c37      	subs	r4, #55	; 0x37
 800aac4:	e7e2      	b.n	800aa8c <_strtol_l.constprop.0+0x78>
 800aac6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800aaca:	f1be 0f19 	cmp.w	lr, #25
 800aace:	d804      	bhi.n	800aada <_strtol_l.constprop.0+0xc6>
 800aad0:	3c57      	subs	r4, #87	; 0x57
 800aad2:	e7db      	b.n	800aa8c <_strtol_l.constprop.0+0x78>
 800aad4:	f04f 3cff 	mov.w	ip, #4294967295
 800aad8:	e7e6      	b.n	800aaa8 <_strtol_l.constprop.0+0x94>
 800aada:	f1bc 0f00 	cmp.w	ip, #0
 800aade:	da05      	bge.n	800aaec <_strtol_l.constprop.0+0xd8>
 800aae0:	2322      	movs	r3, #34	; 0x22
 800aae2:	6003      	str	r3, [r0, #0]
 800aae4:	4646      	mov	r6, r8
 800aae6:	b942      	cbnz	r2, 800aafa <_strtol_l.constprop.0+0xe6>
 800aae8:	4630      	mov	r0, r6
 800aaea:	e79e      	b.n	800aa2a <_strtol_l.constprop.0+0x16>
 800aaec:	b107      	cbz	r7, 800aaf0 <_strtol_l.constprop.0+0xdc>
 800aaee:	4276      	negs	r6, r6
 800aaf0:	2a00      	cmp	r2, #0
 800aaf2:	d0f9      	beq.n	800aae8 <_strtol_l.constprop.0+0xd4>
 800aaf4:	f1bc 0f00 	cmp.w	ip, #0
 800aaf8:	d000      	beq.n	800aafc <_strtol_l.constprop.0+0xe8>
 800aafa:	1e69      	subs	r1, r5, #1
 800aafc:	6011      	str	r1, [r2, #0]
 800aafe:	e7f3      	b.n	800aae8 <_strtol_l.constprop.0+0xd4>
 800ab00:	2430      	movs	r4, #48	; 0x30
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d1b1      	bne.n	800aa6a <_strtol_l.constprop.0+0x56>
 800ab06:	2308      	movs	r3, #8
 800ab08:	e7af      	b.n	800aa6a <_strtol_l.constprop.0+0x56>
 800ab0a:	2c30      	cmp	r4, #48	; 0x30
 800ab0c:	d0a5      	beq.n	800aa5a <_strtol_l.constprop.0+0x46>
 800ab0e:	230a      	movs	r3, #10
 800ab10:	e7ab      	b.n	800aa6a <_strtol_l.constprop.0+0x56>
 800ab12:	bf00      	nop
 800ab14:	0800d541 	.word	0x0800d541

0800ab18 <strtol>:
 800ab18:	4613      	mov	r3, r2
 800ab1a:	460a      	mov	r2, r1
 800ab1c:	4601      	mov	r1, r0
 800ab1e:	4802      	ldr	r0, [pc, #8]	; (800ab28 <strtol+0x10>)
 800ab20:	6800      	ldr	r0, [r0, #0]
 800ab22:	f7ff bf77 	b.w	800aa14 <_strtol_l.constprop.0>
 800ab26:	bf00      	nop
 800ab28:	2000000c 	.word	0x2000000c

0800ab2c <__assert_func>:
 800ab2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab2e:	4614      	mov	r4, r2
 800ab30:	461a      	mov	r2, r3
 800ab32:	4b09      	ldr	r3, [pc, #36]	; (800ab58 <__assert_func+0x2c>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	4605      	mov	r5, r0
 800ab38:	68d8      	ldr	r0, [r3, #12]
 800ab3a:	b14c      	cbz	r4, 800ab50 <__assert_func+0x24>
 800ab3c:	4b07      	ldr	r3, [pc, #28]	; (800ab5c <__assert_func+0x30>)
 800ab3e:	9100      	str	r1, [sp, #0]
 800ab40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab44:	4906      	ldr	r1, [pc, #24]	; (800ab60 <__assert_func+0x34>)
 800ab46:	462b      	mov	r3, r5
 800ab48:	f000 fe88 	bl	800b85c <fiprintf>
 800ab4c:	f001 feb2 	bl	800c8b4 <abort>
 800ab50:	4b04      	ldr	r3, [pc, #16]	; (800ab64 <__assert_func+0x38>)
 800ab52:	461c      	mov	r4, r3
 800ab54:	e7f3      	b.n	800ab3e <__assert_func+0x12>
 800ab56:	bf00      	nop
 800ab58:	2000000c 	.word	0x2000000c
 800ab5c:	0800d504 	.word	0x0800d504
 800ab60:	0800d511 	.word	0x0800d511
 800ab64:	0800d53f 	.word	0x0800d53f

0800ab68 <quorem>:
 800ab68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab6c:	6903      	ldr	r3, [r0, #16]
 800ab6e:	690c      	ldr	r4, [r1, #16]
 800ab70:	42a3      	cmp	r3, r4
 800ab72:	4607      	mov	r7, r0
 800ab74:	f2c0 8081 	blt.w	800ac7a <quorem+0x112>
 800ab78:	3c01      	subs	r4, #1
 800ab7a:	f101 0814 	add.w	r8, r1, #20
 800ab7e:	f100 0514 	add.w	r5, r0, #20
 800ab82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ab86:	9301      	str	r3, [sp, #4]
 800ab88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ab8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ab90:	3301      	adds	r3, #1
 800ab92:	429a      	cmp	r2, r3
 800ab94:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ab98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ab9c:	fbb2 f6f3 	udiv	r6, r2, r3
 800aba0:	d331      	bcc.n	800ac06 <quorem+0x9e>
 800aba2:	f04f 0e00 	mov.w	lr, #0
 800aba6:	4640      	mov	r0, r8
 800aba8:	46ac      	mov	ip, r5
 800abaa:	46f2      	mov	sl, lr
 800abac:	f850 2b04 	ldr.w	r2, [r0], #4
 800abb0:	b293      	uxth	r3, r2
 800abb2:	fb06 e303 	mla	r3, r6, r3, lr
 800abb6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800abba:	b29b      	uxth	r3, r3
 800abbc:	ebaa 0303 	sub.w	r3, sl, r3
 800abc0:	f8dc a000 	ldr.w	sl, [ip]
 800abc4:	0c12      	lsrs	r2, r2, #16
 800abc6:	fa13 f38a 	uxtah	r3, r3, sl
 800abca:	fb06 e202 	mla	r2, r6, r2, lr
 800abce:	9300      	str	r3, [sp, #0]
 800abd0:	9b00      	ldr	r3, [sp, #0]
 800abd2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800abd6:	b292      	uxth	r2, r2
 800abd8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800abdc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800abe0:	f8bd 3000 	ldrh.w	r3, [sp]
 800abe4:	4581      	cmp	r9, r0
 800abe6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800abea:	f84c 3b04 	str.w	r3, [ip], #4
 800abee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800abf2:	d2db      	bcs.n	800abac <quorem+0x44>
 800abf4:	f855 300b 	ldr.w	r3, [r5, fp]
 800abf8:	b92b      	cbnz	r3, 800ac06 <quorem+0x9e>
 800abfa:	9b01      	ldr	r3, [sp, #4]
 800abfc:	3b04      	subs	r3, #4
 800abfe:	429d      	cmp	r5, r3
 800ac00:	461a      	mov	r2, r3
 800ac02:	d32e      	bcc.n	800ac62 <quorem+0xfa>
 800ac04:	613c      	str	r4, [r7, #16]
 800ac06:	4638      	mov	r0, r7
 800ac08:	f001 f8d6 	bl	800bdb8 <__mcmp>
 800ac0c:	2800      	cmp	r0, #0
 800ac0e:	db24      	blt.n	800ac5a <quorem+0xf2>
 800ac10:	3601      	adds	r6, #1
 800ac12:	4628      	mov	r0, r5
 800ac14:	f04f 0c00 	mov.w	ip, #0
 800ac18:	f858 2b04 	ldr.w	r2, [r8], #4
 800ac1c:	f8d0 e000 	ldr.w	lr, [r0]
 800ac20:	b293      	uxth	r3, r2
 800ac22:	ebac 0303 	sub.w	r3, ip, r3
 800ac26:	0c12      	lsrs	r2, r2, #16
 800ac28:	fa13 f38e 	uxtah	r3, r3, lr
 800ac2c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ac30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ac34:	b29b      	uxth	r3, r3
 800ac36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac3a:	45c1      	cmp	r9, r8
 800ac3c:	f840 3b04 	str.w	r3, [r0], #4
 800ac40:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ac44:	d2e8      	bcs.n	800ac18 <quorem+0xb0>
 800ac46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac4e:	b922      	cbnz	r2, 800ac5a <quorem+0xf2>
 800ac50:	3b04      	subs	r3, #4
 800ac52:	429d      	cmp	r5, r3
 800ac54:	461a      	mov	r2, r3
 800ac56:	d30a      	bcc.n	800ac6e <quorem+0x106>
 800ac58:	613c      	str	r4, [r7, #16]
 800ac5a:	4630      	mov	r0, r6
 800ac5c:	b003      	add	sp, #12
 800ac5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac62:	6812      	ldr	r2, [r2, #0]
 800ac64:	3b04      	subs	r3, #4
 800ac66:	2a00      	cmp	r2, #0
 800ac68:	d1cc      	bne.n	800ac04 <quorem+0x9c>
 800ac6a:	3c01      	subs	r4, #1
 800ac6c:	e7c7      	b.n	800abfe <quorem+0x96>
 800ac6e:	6812      	ldr	r2, [r2, #0]
 800ac70:	3b04      	subs	r3, #4
 800ac72:	2a00      	cmp	r2, #0
 800ac74:	d1f0      	bne.n	800ac58 <quorem+0xf0>
 800ac76:	3c01      	subs	r4, #1
 800ac78:	e7eb      	b.n	800ac52 <quorem+0xea>
 800ac7a:	2000      	movs	r0, #0
 800ac7c:	e7ee      	b.n	800ac5c <quorem+0xf4>
	...

0800ac80 <_dtoa_r>:
 800ac80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac84:	ed2d 8b04 	vpush	{d8-d9}
 800ac88:	ec57 6b10 	vmov	r6, r7, d0
 800ac8c:	b093      	sub	sp, #76	; 0x4c
 800ac8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ac90:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ac94:	9106      	str	r1, [sp, #24]
 800ac96:	ee10 aa10 	vmov	sl, s0
 800ac9a:	4604      	mov	r4, r0
 800ac9c:	9209      	str	r2, [sp, #36]	; 0x24
 800ac9e:	930c      	str	r3, [sp, #48]	; 0x30
 800aca0:	46bb      	mov	fp, r7
 800aca2:	b975      	cbnz	r5, 800acc2 <_dtoa_r+0x42>
 800aca4:	2010      	movs	r0, #16
 800aca6:	f000 fdef 	bl	800b888 <malloc>
 800acaa:	4602      	mov	r2, r0
 800acac:	6260      	str	r0, [r4, #36]	; 0x24
 800acae:	b920      	cbnz	r0, 800acba <_dtoa_r+0x3a>
 800acb0:	4ba7      	ldr	r3, [pc, #668]	; (800af50 <_dtoa_r+0x2d0>)
 800acb2:	21ea      	movs	r1, #234	; 0xea
 800acb4:	48a7      	ldr	r0, [pc, #668]	; (800af54 <_dtoa_r+0x2d4>)
 800acb6:	f7ff ff39 	bl	800ab2c <__assert_func>
 800acba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800acbe:	6005      	str	r5, [r0, #0]
 800acc0:	60c5      	str	r5, [r0, #12]
 800acc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800acc4:	6819      	ldr	r1, [r3, #0]
 800acc6:	b151      	cbz	r1, 800acde <_dtoa_r+0x5e>
 800acc8:	685a      	ldr	r2, [r3, #4]
 800acca:	604a      	str	r2, [r1, #4]
 800accc:	2301      	movs	r3, #1
 800acce:	4093      	lsls	r3, r2
 800acd0:	608b      	str	r3, [r1, #8]
 800acd2:	4620      	mov	r0, r4
 800acd4:	f000 fe2e 	bl	800b934 <_Bfree>
 800acd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800acda:	2200      	movs	r2, #0
 800acdc:	601a      	str	r2, [r3, #0]
 800acde:	1e3b      	subs	r3, r7, #0
 800ace0:	bfaa      	itet	ge
 800ace2:	2300      	movge	r3, #0
 800ace4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ace8:	f8c8 3000 	strge.w	r3, [r8]
 800acec:	4b9a      	ldr	r3, [pc, #616]	; (800af58 <_dtoa_r+0x2d8>)
 800acee:	bfbc      	itt	lt
 800acf0:	2201      	movlt	r2, #1
 800acf2:	f8c8 2000 	strlt.w	r2, [r8]
 800acf6:	ea33 030b 	bics.w	r3, r3, fp
 800acfa:	d11b      	bne.n	800ad34 <_dtoa_r+0xb4>
 800acfc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800acfe:	f242 730f 	movw	r3, #9999	; 0x270f
 800ad02:	6013      	str	r3, [r2, #0]
 800ad04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ad08:	4333      	orrs	r3, r6
 800ad0a:	f000 8592 	beq.w	800b832 <_dtoa_r+0xbb2>
 800ad0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad10:	b963      	cbnz	r3, 800ad2c <_dtoa_r+0xac>
 800ad12:	4b92      	ldr	r3, [pc, #584]	; (800af5c <_dtoa_r+0x2dc>)
 800ad14:	e022      	b.n	800ad5c <_dtoa_r+0xdc>
 800ad16:	4b92      	ldr	r3, [pc, #584]	; (800af60 <_dtoa_r+0x2e0>)
 800ad18:	9301      	str	r3, [sp, #4]
 800ad1a:	3308      	adds	r3, #8
 800ad1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ad1e:	6013      	str	r3, [r2, #0]
 800ad20:	9801      	ldr	r0, [sp, #4]
 800ad22:	b013      	add	sp, #76	; 0x4c
 800ad24:	ecbd 8b04 	vpop	{d8-d9}
 800ad28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad2c:	4b8b      	ldr	r3, [pc, #556]	; (800af5c <_dtoa_r+0x2dc>)
 800ad2e:	9301      	str	r3, [sp, #4]
 800ad30:	3303      	adds	r3, #3
 800ad32:	e7f3      	b.n	800ad1c <_dtoa_r+0x9c>
 800ad34:	2200      	movs	r2, #0
 800ad36:	2300      	movs	r3, #0
 800ad38:	4650      	mov	r0, sl
 800ad3a:	4659      	mov	r1, fp
 800ad3c:	f7f5 fefc 	bl	8000b38 <__aeabi_dcmpeq>
 800ad40:	ec4b ab19 	vmov	d9, sl, fp
 800ad44:	4680      	mov	r8, r0
 800ad46:	b158      	cbz	r0, 800ad60 <_dtoa_r+0xe0>
 800ad48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	6013      	str	r3, [r2, #0]
 800ad4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	f000 856b 	beq.w	800b82c <_dtoa_r+0xbac>
 800ad56:	4883      	ldr	r0, [pc, #524]	; (800af64 <_dtoa_r+0x2e4>)
 800ad58:	6018      	str	r0, [r3, #0]
 800ad5a:	1e43      	subs	r3, r0, #1
 800ad5c:	9301      	str	r3, [sp, #4]
 800ad5e:	e7df      	b.n	800ad20 <_dtoa_r+0xa0>
 800ad60:	ec4b ab10 	vmov	d0, sl, fp
 800ad64:	aa10      	add	r2, sp, #64	; 0x40
 800ad66:	a911      	add	r1, sp, #68	; 0x44
 800ad68:	4620      	mov	r0, r4
 800ad6a:	f001 f8cb 	bl	800bf04 <__d2b>
 800ad6e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ad72:	ee08 0a10 	vmov	s16, r0
 800ad76:	2d00      	cmp	r5, #0
 800ad78:	f000 8084 	beq.w	800ae84 <_dtoa_r+0x204>
 800ad7c:	ee19 3a90 	vmov	r3, s19
 800ad80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad84:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ad88:	4656      	mov	r6, sl
 800ad8a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ad8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ad92:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ad96:	4b74      	ldr	r3, [pc, #464]	; (800af68 <_dtoa_r+0x2e8>)
 800ad98:	2200      	movs	r2, #0
 800ad9a:	4630      	mov	r0, r6
 800ad9c:	4639      	mov	r1, r7
 800ad9e:	f7f5 faab 	bl	80002f8 <__aeabi_dsub>
 800ada2:	a365      	add	r3, pc, #404	; (adr r3, 800af38 <_dtoa_r+0x2b8>)
 800ada4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada8:	f7f5 fc5e 	bl	8000668 <__aeabi_dmul>
 800adac:	a364      	add	r3, pc, #400	; (adr r3, 800af40 <_dtoa_r+0x2c0>)
 800adae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb2:	f7f5 faa3 	bl	80002fc <__adddf3>
 800adb6:	4606      	mov	r6, r0
 800adb8:	4628      	mov	r0, r5
 800adba:	460f      	mov	r7, r1
 800adbc:	f7f5 fbea 	bl	8000594 <__aeabi_i2d>
 800adc0:	a361      	add	r3, pc, #388	; (adr r3, 800af48 <_dtoa_r+0x2c8>)
 800adc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc6:	f7f5 fc4f 	bl	8000668 <__aeabi_dmul>
 800adca:	4602      	mov	r2, r0
 800adcc:	460b      	mov	r3, r1
 800adce:	4630      	mov	r0, r6
 800add0:	4639      	mov	r1, r7
 800add2:	f7f5 fa93 	bl	80002fc <__adddf3>
 800add6:	4606      	mov	r6, r0
 800add8:	460f      	mov	r7, r1
 800adda:	f7f5 fef5 	bl	8000bc8 <__aeabi_d2iz>
 800adde:	2200      	movs	r2, #0
 800ade0:	9000      	str	r0, [sp, #0]
 800ade2:	2300      	movs	r3, #0
 800ade4:	4630      	mov	r0, r6
 800ade6:	4639      	mov	r1, r7
 800ade8:	f7f5 feb0 	bl	8000b4c <__aeabi_dcmplt>
 800adec:	b150      	cbz	r0, 800ae04 <_dtoa_r+0x184>
 800adee:	9800      	ldr	r0, [sp, #0]
 800adf0:	f7f5 fbd0 	bl	8000594 <__aeabi_i2d>
 800adf4:	4632      	mov	r2, r6
 800adf6:	463b      	mov	r3, r7
 800adf8:	f7f5 fe9e 	bl	8000b38 <__aeabi_dcmpeq>
 800adfc:	b910      	cbnz	r0, 800ae04 <_dtoa_r+0x184>
 800adfe:	9b00      	ldr	r3, [sp, #0]
 800ae00:	3b01      	subs	r3, #1
 800ae02:	9300      	str	r3, [sp, #0]
 800ae04:	9b00      	ldr	r3, [sp, #0]
 800ae06:	2b16      	cmp	r3, #22
 800ae08:	d85a      	bhi.n	800aec0 <_dtoa_r+0x240>
 800ae0a:	9a00      	ldr	r2, [sp, #0]
 800ae0c:	4b57      	ldr	r3, [pc, #348]	; (800af6c <_dtoa_r+0x2ec>)
 800ae0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae16:	ec51 0b19 	vmov	r0, r1, d9
 800ae1a:	f7f5 fe97 	bl	8000b4c <__aeabi_dcmplt>
 800ae1e:	2800      	cmp	r0, #0
 800ae20:	d050      	beq.n	800aec4 <_dtoa_r+0x244>
 800ae22:	9b00      	ldr	r3, [sp, #0]
 800ae24:	3b01      	subs	r3, #1
 800ae26:	9300      	str	r3, [sp, #0]
 800ae28:	2300      	movs	r3, #0
 800ae2a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae2e:	1b5d      	subs	r5, r3, r5
 800ae30:	1e6b      	subs	r3, r5, #1
 800ae32:	9305      	str	r3, [sp, #20]
 800ae34:	bf45      	ittet	mi
 800ae36:	f1c5 0301 	rsbmi	r3, r5, #1
 800ae3a:	9304      	strmi	r3, [sp, #16]
 800ae3c:	2300      	movpl	r3, #0
 800ae3e:	2300      	movmi	r3, #0
 800ae40:	bf4c      	ite	mi
 800ae42:	9305      	strmi	r3, [sp, #20]
 800ae44:	9304      	strpl	r3, [sp, #16]
 800ae46:	9b00      	ldr	r3, [sp, #0]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	db3d      	blt.n	800aec8 <_dtoa_r+0x248>
 800ae4c:	9b05      	ldr	r3, [sp, #20]
 800ae4e:	9a00      	ldr	r2, [sp, #0]
 800ae50:	920a      	str	r2, [sp, #40]	; 0x28
 800ae52:	4413      	add	r3, r2
 800ae54:	9305      	str	r3, [sp, #20]
 800ae56:	2300      	movs	r3, #0
 800ae58:	9307      	str	r3, [sp, #28]
 800ae5a:	9b06      	ldr	r3, [sp, #24]
 800ae5c:	2b09      	cmp	r3, #9
 800ae5e:	f200 8089 	bhi.w	800af74 <_dtoa_r+0x2f4>
 800ae62:	2b05      	cmp	r3, #5
 800ae64:	bfc4      	itt	gt
 800ae66:	3b04      	subgt	r3, #4
 800ae68:	9306      	strgt	r3, [sp, #24]
 800ae6a:	9b06      	ldr	r3, [sp, #24]
 800ae6c:	f1a3 0302 	sub.w	r3, r3, #2
 800ae70:	bfcc      	ite	gt
 800ae72:	2500      	movgt	r5, #0
 800ae74:	2501      	movle	r5, #1
 800ae76:	2b03      	cmp	r3, #3
 800ae78:	f200 8087 	bhi.w	800af8a <_dtoa_r+0x30a>
 800ae7c:	e8df f003 	tbb	[pc, r3]
 800ae80:	59383a2d 	.word	0x59383a2d
 800ae84:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ae88:	441d      	add	r5, r3
 800ae8a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ae8e:	2b20      	cmp	r3, #32
 800ae90:	bfc1      	itttt	gt
 800ae92:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ae96:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ae9a:	fa0b f303 	lslgt.w	r3, fp, r3
 800ae9e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800aea2:	bfda      	itte	le
 800aea4:	f1c3 0320 	rsble	r3, r3, #32
 800aea8:	fa06 f003 	lslle.w	r0, r6, r3
 800aeac:	4318      	orrgt	r0, r3
 800aeae:	f7f5 fb61 	bl	8000574 <__aeabi_ui2d>
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	4606      	mov	r6, r0
 800aeb6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800aeba:	3d01      	subs	r5, #1
 800aebc:	930e      	str	r3, [sp, #56]	; 0x38
 800aebe:	e76a      	b.n	800ad96 <_dtoa_r+0x116>
 800aec0:	2301      	movs	r3, #1
 800aec2:	e7b2      	b.n	800ae2a <_dtoa_r+0x1aa>
 800aec4:	900b      	str	r0, [sp, #44]	; 0x2c
 800aec6:	e7b1      	b.n	800ae2c <_dtoa_r+0x1ac>
 800aec8:	9b04      	ldr	r3, [sp, #16]
 800aeca:	9a00      	ldr	r2, [sp, #0]
 800aecc:	1a9b      	subs	r3, r3, r2
 800aece:	9304      	str	r3, [sp, #16]
 800aed0:	4253      	negs	r3, r2
 800aed2:	9307      	str	r3, [sp, #28]
 800aed4:	2300      	movs	r3, #0
 800aed6:	930a      	str	r3, [sp, #40]	; 0x28
 800aed8:	e7bf      	b.n	800ae5a <_dtoa_r+0x1da>
 800aeda:	2300      	movs	r3, #0
 800aedc:	9308      	str	r3, [sp, #32]
 800aede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	dc55      	bgt.n	800af90 <_dtoa_r+0x310>
 800aee4:	2301      	movs	r3, #1
 800aee6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800aeea:	461a      	mov	r2, r3
 800aeec:	9209      	str	r2, [sp, #36]	; 0x24
 800aeee:	e00c      	b.n	800af0a <_dtoa_r+0x28a>
 800aef0:	2301      	movs	r3, #1
 800aef2:	e7f3      	b.n	800aedc <_dtoa_r+0x25c>
 800aef4:	2300      	movs	r3, #0
 800aef6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aef8:	9308      	str	r3, [sp, #32]
 800aefa:	9b00      	ldr	r3, [sp, #0]
 800aefc:	4413      	add	r3, r2
 800aefe:	9302      	str	r3, [sp, #8]
 800af00:	3301      	adds	r3, #1
 800af02:	2b01      	cmp	r3, #1
 800af04:	9303      	str	r3, [sp, #12]
 800af06:	bfb8      	it	lt
 800af08:	2301      	movlt	r3, #1
 800af0a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800af0c:	2200      	movs	r2, #0
 800af0e:	6042      	str	r2, [r0, #4]
 800af10:	2204      	movs	r2, #4
 800af12:	f102 0614 	add.w	r6, r2, #20
 800af16:	429e      	cmp	r6, r3
 800af18:	6841      	ldr	r1, [r0, #4]
 800af1a:	d93d      	bls.n	800af98 <_dtoa_r+0x318>
 800af1c:	4620      	mov	r0, r4
 800af1e:	f000 fcc9 	bl	800b8b4 <_Balloc>
 800af22:	9001      	str	r0, [sp, #4]
 800af24:	2800      	cmp	r0, #0
 800af26:	d13b      	bne.n	800afa0 <_dtoa_r+0x320>
 800af28:	4b11      	ldr	r3, [pc, #68]	; (800af70 <_dtoa_r+0x2f0>)
 800af2a:	4602      	mov	r2, r0
 800af2c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800af30:	e6c0      	b.n	800acb4 <_dtoa_r+0x34>
 800af32:	2301      	movs	r3, #1
 800af34:	e7df      	b.n	800aef6 <_dtoa_r+0x276>
 800af36:	bf00      	nop
 800af38:	636f4361 	.word	0x636f4361
 800af3c:	3fd287a7 	.word	0x3fd287a7
 800af40:	8b60c8b3 	.word	0x8b60c8b3
 800af44:	3fc68a28 	.word	0x3fc68a28
 800af48:	509f79fb 	.word	0x509f79fb
 800af4c:	3fd34413 	.word	0x3fd34413
 800af50:	0800d490 	.word	0x0800d490
 800af54:	0800d64e 	.word	0x0800d64e
 800af58:	7ff00000 	.word	0x7ff00000
 800af5c:	0800d64a 	.word	0x0800d64a
 800af60:	0800d641 	.word	0x0800d641
 800af64:	0800d46d 	.word	0x0800d46d
 800af68:	3ff80000 	.word	0x3ff80000
 800af6c:	0800d740 	.word	0x0800d740
 800af70:	0800d6a9 	.word	0x0800d6a9
 800af74:	2501      	movs	r5, #1
 800af76:	2300      	movs	r3, #0
 800af78:	9306      	str	r3, [sp, #24]
 800af7a:	9508      	str	r5, [sp, #32]
 800af7c:	f04f 33ff 	mov.w	r3, #4294967295
 800af80:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800af84:	2200      	movs	r2, #0
 800af86:	2312      	movs	r3, #18
 800af88:	e7b0      	b.n	800aeec <_dtoa_r+0x26c>
 800af8a:	2301      	movs	r3, #1
 800af8c:	9308      	str	r3, [sp, #32]
 800af8e:	e7f5      	b.n	800af7c <_dtoa_r+0x2fc>
 800af90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af92:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800af96:	e7b8      	b.n	800af0a <_dtoa_r+0x28a>
 800af98:	3101      	adds	r1, #1
 800af9a:	6041      	str	r1, [r0, #4]
 800af9c:	0052      	lsls	r2, r2, #1
 800af9e:	e7b8      	b.n	800af12 <_dtoa_r+0x292>
 800afa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afa2:	9a01      	ldr	r2, [sp, #4]
 800afa4:	601a      	str	r2, [r3, #0]
 800afa6:	9b03      	ldr	r3, [sp, #12]
 800afa8:	2b0e      	cmp	r3, #14
 800afaa:	f200 809d 	bhi.w	800b0e8 <_dtoa_r+0x468>
 800afae:	2d00      	cmp	r5, #0
 800afb0:	f000 809a 	beq.w	800b0e8 <_dtoa_r+0x468>
 800afb4:	9b00      	ldr	r3, [sp, #0]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	dd32      	ble.n	800b020 <_dtoa_r+0x3a0>
 800afba:	4ab7      	ldr	r2, [pc, #732]	; (800b298 <_dtoa_r+0x618>)
 800afbc:	f003 030f 	and.w	r3, r3, #15
 800afc0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800afc4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800afc8:	9b00      	ldr	r3, [sp, #0]
 800afca:	05d8      	lsls	r0, r3, #23
 800afcc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800afd0:	d516      	bpl.n	800b000 <_dtoa_r+0x380>
 800afd2:	4bb2      	ldr	r3, [pc, #712]	; (800b29c <_dtoa_r+0x61c>)
 800afd4:	ec51 0b19 	vmov	r0, r1, d9
 800afd8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800afdc:	f7f5 fc6e 	bl	80008bc <__aeabi_ddiv>
 800afe0:	f007 070f 	and.w	r7, r7, #15
 800afe4:	4682      	mov	sl, r0
 800afe6:	468b      	mov	fp, r1
 800afe8:	2503      	movs	r5, #3
 800afea:	4eac      	ldr	r6, [pc, #688]	; (800b29c <_dtoa_r+0x61c>)
 800afec:	b957      	cbnz	r7, 800b004 <_dtoa_r+0x384>
 800afee:	4642      	mov	r2, r8
 800aff0:	464b      	mov	r3, r9
 800aff2:	4650      	mov	r0, sl
 800aff4:	4659      	mov	r1, fp
 800aff6:	f7f5 fc61 	bl	80008bc <__aeabi_ddiv>
 800affa:	4682      	mov	sl, r0
 800affc:	468b      	mov	fp, r1
 800affe:	e028      	b.n	800b052 <_dtoa_r+0x3d2>
 800b000:	2502      	movs	r5, #2
 800b002:	e7f2      	b.n	800afea <_dtoa_r+0x36a>
 800b004:	07f9      	lsls	r1, r7, #31
 800b006:	d508      	bpl.n	800b01a <_dtoa_r+0x39a>
 800b008:	4640      	mov	r0, r8
 800b00a:	4649      	mov	r1, r9
 800b00c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b010:	f7f5 fb2a 	bl	8000668 <__aeabi_dmul>
 800b014:	3501      	adds	r5, #1
 800b016:	4680      	mov	r8, r0
 800b018:	4689      	mov	r9, r1
 800b01a:	107f      	asrs	r7, r7, #1
 800b01c:	3608      	adds	r6, #8
 800b01e:	e7e5      	b.n	800afec <_dtoa_r+0x36c>
 800b020:	f000 809b 	beq.w	800b15a <_dtoa_r+0x4da>
 800b024:	9b00      	ldr	r3, [sp, #0]
 800b026:	4f9d      	ldr	r7, [pc, #628]	; (800b29c <_dtoa_r+0x61c>)
 800b028:	425e      	negs	r6, r3
 800b02a:	4b9b      	ldr	r3, [pc, #620]	; (800b298 <_dtoa_r+0x618>)
 800b02c:	f006 020f 	and.w	r2, r6, #15
 800b030:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b034:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b038:	ec51 0b19 	vmov	r0, r1, d9
 800b03c:	f7f5 fb14 	bl	8000668 <__aeabi_dmul>
 800b040:	1136      	asrs	r6, r6, #4
 800b042:	4682      	mov	sl, r0
 800b044:	468b      	mov	fp, r1
 800b046:	2300      	movs	r3, #0
 800b048:	2502      	movs	r5, #2
 800b04a:	2e00      	cmp	r6, #0
 800b04c:	d17a      	bne.n	800b144 <_dtoa_r+0x4c4>
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d1d3      	bne.n	800affa <_dtoa_r+0x37a>
 800b052:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b054:	2b00      	cmp	r3, #0
 800b056:	f000 8082 	beq.w	800b15e <_dtoa_r+0x4de>
 800b05a:	4b91      	ldr	r3, [pc, #580]	; (800b2a0 <_dtoa_r+0x620>)
 800b05c:	2200      	movs	r2, #0
 800b05e:	4650      	mov	r0, sl
 800b060:	4659      	mov	r1, fp
 800b062:	f7f5 fd73 	bl	8000b4c <__aeabi_dcmplt>
 800b066:	2800      	cmp	r0, #0
 800b068:	d079      	beq.n	800b15e <_dtoa_r+0x4de>
 800b06a:	9b03      	ldr	r3, [sp, #12]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d076      	beq.n	800b15e <_dtoa_r+0x4de>
 800b070:	9b02      	ldr	r3, [sp, #8]
 800b072:	2b00      	cmp	r3, #0
 800b074:	dd36      	ble.n	800b0e4 <_dtoa_r+0x464>
 800b076:	9b00      	ldr	r3, [sp, #0]
 800b078:	4650      	mov	r0, sl
 800b07a:	4659      	mov	r1, fp
 800b07c:	1e5f      	subs	r7, r3, #1
 800b07e:	2200      	movs	r2, #0
 800b080:	4b88      	ldr	r3, [pc, #544]	; (800b2a4 <_dtoa_r+0x624>)
 800b082:	f7f5 faf1 	bl	8000668 <__aeabi_dmul>
 800b086:	9e02      	ldr	r6, [sp, #8]
 800b088:	4682      	mov	sl, r0
 800b08a:	468b      	mov	fp, r1
 800b08c:	3501      	adds	r5, #1
 800b08e:	4628      	mov	r0, r5
 800b090:	f7f5 fa80 	bl	8000594 <__aeabi_i2d>
 800b094:	4652      	mov	r2, sl
 800b096:	465b      	mov	r3, fp
 800b098:	f7f5 fae6 	bl	8000668 <__aeabi_dmul>
 800b09c:	4b82      	ldr	r3, [pc, #520]	; (800b2a8 <_dtoa_r+0x628>)
 800b09e:	2200      	movs	r2, #0
 800b0a0:	f7f5 f92c 	bl	80002fc <__adddf3>
 800b0a4:	46d0      	mov	r8, sl
 800b0a6:	46d9      	mov	r9, fp
 800b0a8:	4682      	mov	sl, r0
 800b0aa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b0ae:	2e00      	cmp	r6, #0
 800b0b0:	d158      	bne.n	800b164 <_dtoa_r+0x4e4>
 800b0b2:	4b7e      	ldr	r3, [pc, #504]	; (800b2ac <_dtoa_r+0x62c>)
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	4640      	mov	r0, r8
 800b0b8:	4649      	mov	r1, r9
 800b0ba:	f7f5 f91d 	bl	80002f8 <__aeabi_dsub>
 800b0be:	4652      	mov	r2, sl
 800b0c0:	465b      	mov	r3, fp
 800b0c2:	4680      	mov	r8, r0
 800b0c4:	4689      	mov	r9, r1
 800b0c6:	f7f5 fd5f 	bl	8000b88 <__aeabi_dcmpgt>
 800b0ca:	2800      	cmp	r0, #0
 800b0cc:	f040 8295 	bne.w	800b5fa <_dtoa_r+0x97a>
 800b0d0:	4652      	mov	r2, sl
 800b0d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b0d6:	4640      	mov	r0, r8
 800b0d8:	4649      	mov	r1, r9
 800b0da:	f7f5 fd37 	bl	8000b4c <__aeabi_dcmplt>
 800b0de:	2800      	cmp	r0, #0
 800b0e0:	f040 8289 	bne.w	800b5f6 <_dtoa_r+0x976>
 800b0e4:	ec5b ab19 	vmov	sl, fp, d9
 800b0e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	f2c0 8148 	blt.w	800b380 <_dtoa_r+0x700>
 800b0f0:	9a00      	ldr	r2, [sp, #0]
 800b0f2:	2a0e      	cmp	r2, #14
 800b0f4:	f300 8144 	bgt.w	800b380 <_dtoa_r+0x700>
 800b0f8:	4b67      	ldr	r3, [pc, #412]	; (800b298 <_dtoa_r+0x618>)
 800b0fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b0fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b102:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b104:	2b00      	cmp	r3, #0
 800b106:	f280 80d5 	bge.w	800b2b4 <_dtoa_r+0x634>
 800b10a:	9b03      	ldr	r3, [sp, #12]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	f300 80d1 	bgt.w	800b2b4 <_dtoa_r+0x634>
 800b112:	f040 826f 	bne.w	800b5f4 <_dtoa_r+0x974>
 800b116:	4b65      	ldr	r3, [pc, #404]	; (800b2ac <_dtoa_r+0x62c>)
 800b118:	2200      	movs	r2, #0
 800b11a:	4640      	mov	r0, r8
 800b11c:	4649      	mov	r1, r9
 800b11e:	f7f5 faa3 	bl	8000668 <__aeabi_dmul>
 800b122:	4652      	mov	r2, sl
 800b124:	465b      	mov	r3, fp
 800b126:	f7f5 fd25 	bl	8000b74 <__aeabi_dcmpge>
 800b12a:	9e03      	ldr	r6, [sp, #12]
 800b12c:	4637      	mov	r7, r6
 800b12e:	2800      	cmp	r0, #0
 800b130:	f040 8245 	bne.w	800b5be <_dtoa_r+0x93e>
 800b134:	9d01      	ldr	r5, [sp, #4]
 800b136:	2331      	movs	r3, #49	; 0x31
 800b138:	f805 3b01 	strb.w	r3, [r5], #1
 800b13c:	9b00      	ldr	r3, [sp, #0]
 800b13e:	3301      	adds	r3, #1
 800b140:	9300      	str	r3, [sp, #0]
 800b142:	e240      	b.n	800b5c6 <_dtoa_r+0x946>
 800b144:	07f2      	lsls	r2, r6, #31
 800b146:	d505      	bpl.n	800b154 <_dtoa_r+0x4d4>
 800b148:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b14c:	f7f5 fa8c 	bl	8000668 <__aeabi_dmul>
 800b150:	3501      	adds	r5, #1
 800b152:	2301      	movs	r3, #1
 800b154:	1076      	asrs	r6, r6, #1
 800b156:	3708      	adds	r7, #8
 800b158:	e777      	b.n	800b04a <_dtoa_r+0x3ca>
 800b15a:	2502      	movs	r5, #2
 800b15c:	e779      	b.n	800b052 <_dtoa_r+0x3d2>
 800b15e:	9f00      	ldr	r7, [sp, #0]
 800b160:	9e03      	ldr	r6, [sp, #12]
 800b162:	e794      	b.n	800b08e <_dtoa_r+0x40e>
 800b164:	9901      	ldr	r1, [sp, #4]
 800b166:	4b4c      	ldr	r3, [pc, #304]	; (800b298 <_dtoa_r+0x618>)
 800b168:	4431      	add	r1, r6
 800b16a:	910d      	str	r1, [sp, #52]	; 0x34
 800b16c:	9908      	ldr	r1, [sp, #32]
 800b16e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b172:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b176:	2900      	cmp	r1, #0
 800b178:	d043      	beq.n	800b202 <_dtoa_r+0x582>
 800b17a:	494d      	ldr	r1, [pc, #308]	; (800b2b0 <_dtoa_r+0x630>)
 800b17c:	2000      	movs	r0, #0
 800b17e:	f7f5 fb9d 	bl	80008bc <__aeabi_ddiv>
 800b182:	4652      	mov	r2, sl
 800b184:	465b      	mov	r3, fp
 800b186:	f7f5 f8b7 	bl	80002f8 <__aeabi_dsub>
 800b18a:	9d01      	ldr	r5, [sp, #4]
 800b18c:	4682      	mov	sl, r0
 800b18e:	468b      	mov	fp, r1
 800b190:	4649      	mov	r1, r9
 800b192:	4640      	mov	r0, r8
 800b194:	f7f5 fd18 	bl	8000bc8 <__aeabi_d2iz>
 800b198:	4606      	mov	r6, r0
 800b19a:	f7f5 f9fb 	bl	8000594 <__aeabi_i2d>
 800b19e:	4602      	mov	r2, r0
 800b1a0:	460b      	mov	r3, r1
 800b1a2:	4640      	mov	r0, r8
 800b1a4:	4649      	mov	r1, r9
 800b1a6:	f7f5 f8a7 	bl	80002f8 <__aeabi_dsub>
 800b1aa:	3630      	adds	r6, #48	; 0x30
 800b1ac:	f805 6b01 	strb.w	r6, [r5], #1
 800b1b0:	4652      	mov	r2, sl
 800b1b2:	465b      	mov	r3, fp
 800b1b4:	4680      	mov	r8, r0
 800b1b6:	4689      	mov	r9, r1
 800b1b8:	f7f5 fcc8 	bl	8000b4c <__aeabi_dcmplt>
 800b1bc:	2800      	cmp	r0, #0
 800b1be:	d163      	bne.n	800b288 <_dtoa_r+0x608>
 800b1c0:	4642      	mov	r2, r8
 800b1c2:	464b      	mov	r3, r9
 800b1c4:	4936      	ldr	r1, [pc, #216]	; (800b2a0 <_dtoa_r+0x620>)
 800b1c6:	2000      	movs	r0, #0
 800b1c8:	f7f5 f896 	bl	80002f8 <__aeabi_dsub>
 800b1cc:	4652      	mov	r2, sl
 800b1ce:	465b      	mov	r3, fp
 800b1d0:	f7f5 fcbc 	bl	8000b4c <__aeabi_dcmplt>
 800b1d4:	2800      	cmp	r0, #0
 800b1d6:	f040 80b5 	bne.w	800b344 <_dtoa_r+0x6c4>
 800b1da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1dc:	429d      	cmp	r5, r3
 800b1de:	d081      	beq.n	800b0e4 <_dtoa_r+0x464>
 800b1e0:	4b30      	ldr	r3, [pc, #192]	; (800b2a4 <_dtoa_r+0x624>)
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	4650      	mov	r0, sl
 800b1e6:	4659      	mov	r1, fp
 800b1e8:	f7f5 fa3e 	bl	8000668 <__aeabi_dmul>
 800b1ec:	4b2d      	ldr	r3, [pc, #180]	; (800b2a4 <_dtoa_r+0x624>)
 800b1ee:	4682      	mov	sl, r0
 800b1f0:	468b      	mov	fp, r1
 800b1f2:	4640      	mov	r0, r8
 800b1f4:	4649      	mov	r1, r9
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	f7f5 fa36 	bl	8000668 <__aeabi_dmul>
 800b1fc:	4680      	mov	r8, r0
 800b1fe:	4689      	mov	r9, r1
 800b200:	e7c6      	b.n	800b190 <_dtoa_r+0x510>
 800b202:	4650      	mov	r0, sl
 800b204:	4659      	mov	r1, fp
 800b206:	f7f5 fa2f 	bl	8000668 <__aeabi_dmul>
 800b20a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b20c:	9d01      	ldr	r5, [sp, #4]
 800b20e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b210:	4682      	mov	sl, r0
 800b212:	468b      	mov	fp, r1
 800b214:	4649      	mov	r1, r9
 800b216:	4640      	mov	r0, r8
 800b218:	f7f5 fcd6 	bl	8000bc8 <__aeabi_d2iz>
 800b21c:	4606      	mov	r6, r0
 800b21e:	f7f5 f9b9 	bl	8000594 <__aeabi_i2d>
 800b222:	3630      	adds	r6, #48	; 0x30
 800b224:	4602      	mov	r2, r0
 800b226:	460b      	mov	r3, r1
 800b228:	4640      	mov	r0, r8
 800b22a:	4649      	mov	r1, r9
 800b22c:	f7f5 f864 	bl	80002f8 <__aeabi_dsub>
 800b230:	f805 6b01 	strb.w	r6, [r5], #1
 800b234:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b236:	429d      	cmp	r5, r3
 800b238:	4680      	mov	r8, r0
 800b23a:	4689      	mov	r9, r1
 800b23c:	f04f 0200 	mov.w	r2, #0
 800b240:	d124      	bne.n	800b28c <_dtoa_r+0x60c>
 800b242:	4b1b      	ldr	r3, [pc, #108]	; (800b2b0 <_dtoa_r+0x630>)
 800b244:	4650      	mov	r0, sl
 800b246:	4659      	mov	r1, fp
 800b248:	f7f5 f858 	bl	80002fc <__adddf3>
 800b24c:	4602      	mov	r2, r0
 800b24e:	460b      	mov	r3, r1
 800b250:	4640      	mov	r0, r8
 800b252:	4649      	mov	r1, r9
 800b254:	f7f5 fc98 	bl	8000b88 <__aeabi_dcmpgt>
 800b258:	2800      	cmp	r0, #0
 800b25a:	d173      	bne.n	800b344 <_dtoa_r+0x6c4>
 800b25c:	4652      	mov	r2, sl
 800b25e:	465b      	mov	r3, fp
 800b260:	4913      	ldr	r1, [pc, #76]	; (800b2b0 <_dtoa_r+0x630>)
 800b262:	2000      	movs	r0, #0
 800b264:	f7f5 f848 	bl	80002f8 <__aeabi_dsub>
 800b268:	4602      	mov	r2, r0
 800b26a:	460b      	mov	r3, r1
 800b26c:	4640      	mov	r0, r8
 800b26e:	4649      	mov	r1, r9
 800b270:	f7f5 fc6c 	bl	8000b4c <__aeabi_dcmplt>
 800b274:	2800      	cmp	r0, #0
 800b276:	f43f af35 	beq.w	800b0e4 <_dtoa_r+0x464>
 800b27a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b27c:	1e6b      	subs	r3, r5, #1
 800b27e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b280:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b284:	2b30      	cmp	r3, #48	; 0x30
 800b286:	d0f8      	beq.n	800b27a <_dtoa_r+0x5fa>
 800b288:	9700      	str	r7, [sp, #0]
 800b28a:	e049      	b.n	800b320 <_dtoa_r+0x6a0>
 800b28c:	4b05      	ldr	r3, [pc, #20]	; (800b2a4 <_dtoa_r+0x624>)
 800b28e:	f7f5 f9eb 	bl	8000668 <__aeabi_dmul>
 800b292:	4680      	mov	r8, r0
 800b294:	4689      	mov	r9, r1
 800b296:	e7bd      	b.n	800b214 <_dtoa_r+0x594>
 800b298:	0800d740 	.word	0x0800d740
 800b29c:	0800d718 	.word	0x0800d718
 800b2a0:	3ff00000 	.word	0x3ff00000
 800b2a4:	40240000 	.word	0x40240000
 800b2a8:	401c0000 	.word	0x401c0000
 800b2ac:	40140000 	.word	0x40140000
 800b2b0:	3fe00000 	.word	0x3fe00000
 800b2b4:	9d01      	ldr	r5, [sp, #4]
 800b2b6:	4656      	mov	r6, sl
 800b2b8:	465f      	mov	r7, fp
 800b2ba:	4642      	mov	r2, r8
 800b2bc:	464b      	mov	r3, r9
 800b2be:	4630      	mov	r0, r6
 800b2c0:	4639      	mov	r1, r7
 800b2c2:	f7f5 fafb 	bl	80008bc <__aeabi_ddiv>
 800b2c6:	f7f5 fc7f 	bl	8000bc8 <__aeabi_d2iz>
 800b2ca:	4682      	mov	sl, r0
 800b2cc:	f7f5 f962 	bl	8000594 <__aeabi_i2d>
 800b2d0:	4642      	mov	r2, r8
 800b2d2:	464b      	mov	r3, r9
 800b2d4:	f7f5 f9c8 	bl	8000668 <__aeabi_dmul>
 800b2d8:	4602      	mov	r2, r0
 800b2da:	460b      	mov	r3, r1
 800b2dc:	4630      	mov	r0, r6
 800b2de:	4639      	mov	r1, r7
 800b2e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b2e4:	f7f5 f808 	bl	80002f8 <__aeabi_dsub>
 800b2e8:	f805 6b01 	strb.w	r6, [r5], #1
 800b2ec:	9e01      	ldr	r6, [sp, #4]
 800b2ee:	9f03      	ldr	r7, [sp, #12]
 800b2f0:	1bae      	subs	r6, r5, r6
 800b2f2:	42b7      	cmp	r7, r6
 800b2f4:	4602      	mov	r2, r0
 800b2f6:	460b      	mov	r3, r1
 800b2f8:	d135      	bne.n	800b366 <_dtoa_r+0x6e6>
 800b2fa:	f7f4 ffff 	bl	80002fc <__adddf3>
 800b2fe:	4642      	mov	r2, r8
 800b300:	464b      	mov	r3, r9
 800b302:	4606      	mov	r6, r0
 800b304:	460f      	mov	r7, r1
 800b306:	f7f5 fc3f 	bl	8000b88 <__aeabi_dcmpgt>
 800b30a:	b9d0      	cbnz	r0, 800b342 <_dtoa_r+0x6c2>
 800b30c:	4642      	mov	r2, r8
 800b30e:	464b      	mov	r3, r9
 800b310:	4630      	mov	r0, r6
 800b312:	4639      	mov	r1, r7
 800b314:	f7f5 fc10 	bl	8000b38 <__aeabi_dcmpeq>
 800b318:	b110      	cbz	r0, 800b320 <_dtoa_r+0x6a0>
 800b31a:	f01a 0f01 	tst.w	sl, #1
 800b31e:	d110      	bne.n	800b342 <_dtoa_r+0x6c2>
 800b320:	4620      	mov	r0, r4
 800b322:	ee18 1a10 	vmov	r1, s16
 800b326:	f000 fb05 	bl	800b934 <_Bfree>
 800b32a:	2300      	movs	r3, #0
 800b32c:	9800      	ldr	r0, [sp, #0]
 800b32e:	702b      	strb	r3, [r5, #0]
 800b330:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b332:	3001      	adds	r0, #1
 800b334:	6018      	str	r0, [r3, #0]
 800b336:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b338:	2b00      	cmp	r3, #0
 800b33a:	f43f acf1 	beq.w	800ad20 <_dtoa_r+0xa0>
 800b33e:	601d      	str	r5, [r3, #0]
 800b340:	e4ee      	b.n	800ad20 <_dtoa_r+0xa0>
 800b342:	9f00      	ldr	r7, [sp, #0]
 800b344:	462b      	mov	r3, r5
 800b346:	461d      	mov	r5, r3
 800b348:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b34c:	2a39      	cmp	r2, #57	; 0x39
 800b34e:	d106      	bne.n	800b35e <_dtoa_r+0x6de>
 800b350:	9a01      	ldr	r2, [sp, #4]
 800b352:	429a      	cmp	r2, r3
 800b354:	d1f7      	bne.n	800b346 <_dtoa_r+0x6c6>
 800b356:	9901      	ldr	r1, [sp, #4]
 800b358:	2230      	movs	r2, #48	; 0x30
 800b35a:	3701      	adds	r7, #1
 800b35c:	700a      	strb	r2, [r1, #0]
 800b35e:	781a      	ldrb	r2, [r3, #0]
 800b360:	3201      	adds	r2, #1
 800b362:	701a      	strb	r2, [r3, #0]
 800b364:	e790      	b.n	800b288 <_dtoa_r+0x608>
 800b366:	4ba6      	ldr	r3, [pc, #664]	; (800b600 <_dtoa_r+0x980>)
 800b368:	2200      	movs	r2, #0
 800b36a:	f7f5 f97d 	bl	8000668 <__aeabi_dmul>
 800b36e:	2200      	movs	r2, #0
 800b370:	2300      	movs	r3, #0
 800b372:	4606      	mov	r6, r0
 800b374:	460f      	mov	r7, r1
 800b376:	f7f5 fbdf 	bl	8000b38 <__aeabi_dcmpeq>
 800b37a:	2800      	cmp	r0, #0
 800b37c:	d09d      	beq.n	800b2ba <_dtoa_r+0x63a>
 800b37e:	e7cf      	b.n	800b320 <_dtoa_r+0x6a0>
 800b380:	9a08      	ldr	r2, [sp, #32]
 800b382:	2a00      	cmp	r2, #0
 800b384:	f000 80d7 	beq.w	800b536 <_dtoa_r+0x8b6>
 800b388:	9a06      	ldr	r2, [sp, #24]
 800b38a:	2a01      	cmp	r2, #1
 800b38c:	f300 80ba 	bgt.w	800b504 <_dtoa_r+0x884>
 800b390:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b392:	2a00      	cmp	r2, #0
 800b394:	f000 80b2 	beq.w	800b4fc <_dtoa_r+0x87c>
 800b398:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b39c:	9e07      	ldr	r6, [sp, #28]
 800b39e:	9d04      	ldr	r5, [sp, #16]
 800b3a0:	9a04      	ldr	r2, [sp, #16]
 800b3a2:	441a      	add	r2, r3
 800b3a4:	9204      	str	r2, [sp, #16]
 800b3a6:	9a05      	ldr	r2, [sp, #20]
 800b3a8:	2101      	movs	r1, #1
 800b3aa:	441a      	add	r2, r3
 800b3ac:	4620      	mov	r0, r4
 800b3ae:	9205      	str	r2, [sp, #20]
 800b3b0:	f000 fb78 	bl	800baa4 <__i2b>
 800b3b4:	4607      	mov	r7, r0
 800b3b6:	2d00      	cmp	r5, #0
 800b3b8:	dd0c      	ble.n	800b3d4 <_dtoa_r+0x754>
 800b3ba:	9b05      	ldr	r3, [sp, #20]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	dd09      	ble.n	800b3d4 <_dtoa_r+0x754>
 800b3c0:	42ab      	cmp	r3, r5
 800b3c2:	9a04      	ldr	r2, [sp, #16]
 800b3c4:	bfa8      	it	ge
 800b3c6:	462b      	movge	r3, r5
 800b3c8:	1ad2      	subs	r2, r2, r3
 800b3ca:	9204      	str	r2, [sp, #16]
 800b3cc:	9a05      	ldr	r2, [sp, #20]
 800b3ce:	1aed      	subs	r5, r5, r3
 800b3d0:	1ad3      	subs	r3, r2, r3
 800b3d2:	9305      	str	r3, [sp, #20]
 800b3d4:	9b07      	ldr	r3, [sp, #28]
 800b3d6:	b31b      	cbz	r3, 800b420 <_dtoa_r+0x7a0>
 800b3d8:	9b08      	ldr	r3, [sp, #32]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	f000 80af 	beq.w	800b53e <_dtoa_r+0x8be>
 800b3e0:	2e00      	cmp	r6, #0
 800b3e2:	dd13      	ble.n	800b40c <_dtoa_r+0x78c>
 800b3e4:	4639      	mov	r1, r7
 800b3e6:	4632      	mov	r2, r6
 800b3e8:	4620      	mov	r0, r4
 800b3ea:	f000 fc1b 	bl	800bc24 <__pow5mult>
 800b3ee:	ee18 2a10 	vmov	r2, s16
 800b3f2:	4601      	mov	r1, r0
 800b3f4:	4607      	mov	r7, r0
 800b3f6:	4620      	mov	r0, r4
 800b3f8:	f000 fb6a 	bl	800bad0 <__multiply>
 800b3fc:	ee18 1a10 	vmov	r1, s16
 800b400:	4680      	mov	r8, r0
 800b402:	4620      	mov	r0, r4
 800b404:	f000 fa96 	bl	800b934 <_Bfree>
 800b408:	ee08 8a10 	vmov	s16, r8
 800b40c:	9b07      	ldr	r3, [sp, #28]
 800b40e:	1b9a      	subs	r2, r3, r6
 800b410:	d006      	beq.n	800b420 <_dtoa_r+0x7a0>
 800b412:	ee18 1a10 	vmov	r1, s16
 800b416:	4620      	mov	r0, r4
 800b418:	f000 fc04 	bl	800bc24 <__pow5mult>
 800b41c:	ee08 0a10 	vmov	s16, r0
 800b420:	2101      	movs	r1, #1
 800b422:	4620      	mov	r0, r4
 800b424:	f000 fb3e 	bl	800baa4 <__i2b>
 800b428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	4606      	mov	r6, r0
 800b42e:	f340 8088 	ble.w	800b542 <_dtoa_r+0x8c2>
 800b432:	461a      	mov	r2, r3
 800b434:	4601      	mov	r1, r0
 800b436:	4620      	mov	r0, r4
 800b438:	f000 fbf4 	bl	800bc24 <__pow5mult>
 800b43c:	9b06      	ldr	r3, [sp, #24]
 800b43e:	2b01      	cmp	r3, #1
 800b440:	4606      	mov	r6, r0
 800b442:	f340 8081 	ble.w	800b548 <_dtoa_r+0x8c8>
 800b446:	f04f 0800 	mov.w	r8, #0
 800b44a:	6933      	ldr	r3, [r6, #16]
 800b44c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b450:	6918      	ldr	r0, [r3, #16]
 800b452:	f000 fad7 	bl	800ba04 <__hi0bits>
 800b456:	f1c0 0020 	rsb	r0, r0, #32
 800b45a:	9b05      	ldr	r3, [sp, #20]
 800b45c:	4418      	add	r0, r3
 800b45e:	f010 001f 	ands.w	r0, r0, #31
 800b462:	f000 8092 	beq.w	800b58a <_dtoa_r+0x90a>
 800b466:	f1c0 0320 	rsb	r3, r0, #32
 800b46a:	2b04      	cmp	r3, #4
 800b46c:	f340 808a 	ble.w	800b584 <_dtoa_r+0x904>
 800b470:	f1c0 001c 	rsb	r0, r0, #28
 800b474:	9b04      	ldr	r3, [sp, #16]
 800b476:	4403      	add	r3, r0
 800b478:	9304      	str	r3, [sp, #16]
 800b47a:	9b05      	ldr	r3, [sp, #20]
 800b47c:	4403      	add	r3, r0
 800b47e:	4405      	add	r5, r0
 800b480:	9305      	str	r3, [sp, #20]
 800b482:	9b04      	ldr	r3, [sp, #16]
 800b484:	2b00      	cmp	r3, #0
 800b486:	dd07      	ble.n	800b498 <_dtoa_r+0x818>
 800b488:	ee18 1a10 	vmov	r1, s16
 800b48c:	461a      	mov	r2, r3
 800b48e:	4620      	mov	r0, r4
 800b490:	f000 fc22 	bl	800bcd8 <__lshift>
 800b494:	ee08 0a10 	vmov	s16, r0
 800b498:	9b05      	ldr	r3, [sp, #20]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	dd05      	ble.n	800b4aa <_dtoa_r+0x82a>
 800b49e:	4631      	mov	r1, r6
 800b4a0:	461a      	mov	r2, r3
 800b4a2:	4620      	mov	r0, r4
 800b4a4:	f000 fc18 	bl	800bcd8 <__lshift>
 800b4a8:	4606      	mov	r6, r0
 800b4aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d06e      	beq.n	800b58e <_dtoa_r+0x90e>
 800b4b0:	ee18 0a10 	vmov	r0, s16
 800b4b4:	4631      	mov	r1, r6
 800b4b6:	f000 fc7f 	bl	800bdb8 <__mcmp>
 800b4ba:	2800      	cmp	r0, #0
 800b4bc:	da67      	bge.n	800b58e <_dtoa_r+0x90e>
 800b4be:	9b00      	ldr	r3, [sp, #0]
 800b4c0:	3b01      	subs	r3, #1
 800b4c2:	ee18 1a10 	vmov	r1, s16
 800b4c6:	9300      	str	r3, [sp, #0]
 800b4c8:	220a      	movs	r2, #10
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	4620      	mov	r0, r4
 800b4ce:	f000 fa53 	bl	800b978 <__multadd>
 800b4d2:	9b08      	ldr	r3, [sp, #32]
 800b4d4:	ee08 0a10 	vmov	s16, r0
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	f000 81b1 	beq.w	800b840 <_dtoa_r+0xbc0>
 800b4de:	2300      	movs	r3, #0
 800b4e0:	4639      	mov	r1, r7
 800b4e2:	220a      	movs	r2, #10
 800b4e4:	4620      	mov	r0, r4
 800b4e6:	f000 fa47 	bl	800b978 <__multadd>
 800b4ea:	9b02      	ldr	r3, [sp, #8]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	4607      	mov	r7, r0
 800b4f0:	f300 808e 	bgt.w	800b610 <_dtoa_r+0x990>
 800b4f4:	9b06      	ldr	r3, [sp, #24]
 800b4f6:	2b02      	cmp	r3, #2
 800b4f8:	dc51      	bgt.n	800b59e <_dtoa_r+0x91e>
 800b4fa:	e089      	b.n	800b610 <_dtoa_r+0x990>
 800b4fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b4fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b502:	e74b      	b.n	800b39c <_dtoa_r+0x71c>
 800b504:	9b03      	ldr	r3, [sp, #12]
 800b506:	1e5e      	subs	r6, r3, #1
 800b508:	9b07      	ldr	r3, [sp, #28]
 800b50a:	42b3      	cmp	r3, r6
 800b50c:	bfbf      	itttt	lt
 800b50e:	9b07      	ldrlt	r3, [sp, #28]
 800b510:	9607      	strlt	r6, [sp, #28]
 800b512:	1af2      	sublt	r2, r6, r3
 800b514:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b516:	bfb6      	itet	lt
 800b518:	189b      	addlt	r3, r3, r2
 800b51a:	1b9e      	subge	r6, r3, r6
 800b51c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b51e:	9b03      	ldr	r3, [sp, #12]
 800b520:	bfb8      	it	lt
 800b522:	2600      	movlt	r6, #0
 800b524:	2b00      	cmp	r3, #0
 800b526:	bfb7      	itett	lt
 800b528:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b52c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b530:	1a9d      	sublt	r5, r3, r2
 800b532:	2300      	movlt	r3, #0
 800b534:	e734      	b.n	800b3a0 <_dtoa_r+0x720>
 800b536:	9e07      	ldr	r6, [sp, #28]
 800b538:	9d04      	ldr	r5, [sp, #16]
 800b53a:	9f08      	ldr	r7, [sp, #32]
 800b53c:	e73b      	b.n	800b3b6 <_dtoa_r+0x736>
 800b53e:	9a07      	ldr	r2, [sp, #28]
 800b540:	e767      	b.n	800b412 <_dtoa_r+0x792>
 800b542:	9b06      	ldr	r3, [sp, #24]
 800b544:	2b01      	cmp	r3, #1
 800b546:	dc18      	bgt.n	800b57a <_dtoa_r+0x8fa>
 800b548:	f1ba 0f00 	cmp.w	sl, #0
 800b54c:	d115      	bne.n	800b57a <_dtoa_r+0x8fa>
 800b54e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b552:	b993      	cbnz	r3, 800b57a <_dtoa_r+0x8fa>
 800b554:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b558:	0d1b      	lsrs	r3, r3, #20
 800b55a:	051b      	lsls	r3, r3, #20
 800b55c:	b183      	cbz	r3, 800b580 <_dtoa_r+0x900>
 800b55e:	9b04      	ldr	r3, [sp, #16]
 800b560:	3301      	adds	r3, #1
 800b562:	9304      	str	r3, [sp, #16]
 800b564:	9b05      	ldr	r3, [sp, #20]
 800b566:	3301      	adds	r3, #1
 800b568:	9305      	str	r3, [sp, #20]
 800b56a:	f04f 0801 	mov.w	r8, #1
 800b56e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b570:	2b00      	cmp	r3, #0
 800b572:	f47f af6a 	bne.w	800b44a <_dtoa_r+0x7ca>
 800b576:	2001      	movs	r0, #1
 800b578:	e76f      	b.n	800b45a <_dtoa_r+0x7da>
 800b57a:	f04f 0800 	mov.w	r8, #0
 800b57e:	e7f6      	b.n	800b56e <_dtoa_r+0x8ee>
 800b580:	4698      	mov	r8, r3
 800b582:	e7f4      	b.n	800b56e <_dtoa_r+0x8ee>
 800b584:	f43f af7d 	beq.w	800b482 <_dtoa_r+0x802>
 800b588:	4618      	mov	r0, r3
 800b58a:	301c      	adds	r0, #28
 800b58c:	e772      	b.n	800b474 <_dtoa_r+0x7f4>
 800b58e:	9b03      	ldr	r3, [sp, #12]
 800b590:	2b00      	cmp	r3, #0
 800b592:	dc37      	bgt.n	800b604 <_dtoa_r+0x984>
 800b594:	9b06      	ldr	r3, [sp, #24]
 800b596:	2b02      	cmp	r3, #2
 800b598:	dd34      	ble.n	800b604 <_dtoa_r+0x984>
 800b59a:	9b03      	ldr	r3, [sp, #12]
 800b59c:	9302      	str	r3, [sp, #8]
 800b59e:	9b02      	ldr	r3, [sp, #8]
 800b5a0:	b96b      	cbnz	r3, 800b5be <_dtoa_r+0x93e>
 800b5a2:	4631      	mov	r1, r6
 800b5a4:	2205      	movs	r2, #5
 800b5a6:	4620      	mov	r0, r4
 800b5a8:	f000 f9e6 	bl	800b978 <__multadd>
 800b5ac:	4601      	mov	r1, r0
 800b5ae:	4606      	mov	r6, r0
 800b5b0:	ee18 0a10 	vmov	r0, s16
 800b5b4:	f000 fc00 	bl	800bdb8 <__mcmp>
 800b5b8:	2800      	cmp	r0, #0
 800b5ba:	f73f adbb 	bgt.w	800b134 <_dtoa_r+0x4b4>
 800b5be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5c0:	9d01      	ldr	r5, [sp, #4]
 800b5c2:	43db      	mvns	r3, r3
 800b5c4:	9300      	str	r3, [sp, #0]
 800b5c6:	f04f 0800 	mov.w	r8, #0
 800b5ca:	4631      	mov	r1, r6
 800b5cc:	4620      	mov	r0, r4
 800b5ce:	f000 f9b1 	bl	800b934 <_Bfree>
 800b5d2:	2f00      	cmp	r7, #0
 800b5d4:	f43f aea4 	beq.w	800b320 <_dtoa_r+0x6a0>
 800b5d8:	f1b8 0f00 	cmp.w	r8, #0
 800b5dc:	d005      	beq.n	800b5ea <_dtoa_r+0x96a>
 800b5de:	45b8      	cmp	r8, r7
 800b5e0:	d003      	beq.n	800b5ea <_dtoa_r+0x96a>
 800b5e2:	4641      	mov	r1, r8
 800b5e4:	4620      	mov	r0, r4
 800b5e6:	f000 f9a5 	bl	800b934 <_Bfree>
 800b5ea:	4639      	mov	r1, r7
 800b5ec:	4620      	mov	r0, r4
 800b5ee:	f000 f9a1 	bl	800b934 <_Bfree>
 800b5f2:	e695      	b.n	800b320 <_dtoa_r+0x6a0>
 800b5f4:	2600      	movs	r6, #0
 800b5f6:	4637      	mov	r7, r6
 800b5f8:	e7e1      	b.n	800b5be <_dtoa_r+0x93e>
 800b5fa:	9700      	str	r7, [sp, #0]
 800b5fc:	4637      	mov	r7, r6
 800b5fe:	e599      	b.n	800b134 <_dtoa_r+0x4b4>
 800b600:	40240000 	.word	0x40240000
 800b604:	9b08      	ldr	r3, [sp, #32]
 800b606:	2b00      	cmp	r3, #0
 800b608:	f000 80ca 	beq.w	800b7a0 <_dtoa_r+0xb20>
 800b60c:	9b03      	ldr	r3, [sp, #12]
 800b60e:	9302      	str	r3, [sp, #8]
 800b610:	2d00      	cmp	r5, #0
 800b612:	dd05      	ble.n	800b620 <_dtoa_r+0x9a0>
 800b614:	4639      	mov	r1, r7
 800b616:	462a      	mov	r2, r5
 800b618:	4620      	mov	r0, r4
 800b61a:	f000 fb5d 	bl	800bcd8 <__lshift>
 800b61e:	4607      	mov	r7, r0
 800b620:	f1b8 0f00 	cmp.w	r8, #0
 800b624:	d05b      	beq.n	800b6de <_dtoa_r+0xa5e>
 800b626:	6879      	ldr	r1, [r7, #4]
 800b628:	4620      	mov	r0, r4
 800b62a:	f000 f943 	bl	800b8b4 <_Balloc>
 800b62e:	4605      	mov	r5, r0
 800b630:	b928      	cbnz	r0, 800b63e <_dtoa_r+0x9be>
 800b632:	4b87      	ldr	r3, [pc, #540]	; (800b850 <_dtoa_r+0xbd0>)
 800b634:	4602      	mov	r2, r0
 800b636:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b63a:	f7ff bb3b 	b.w	800acb4 <_dtoa_r+0x34>
 800b63e:	693a      	ldr	r2, [r7, #16]
 800b640:	3202      	adds	r2, #2
 800b642:	0092      	lsls	r2, r2, #2
 800b644:	f107 010c 	add.w	r1, r7, #12
 800b648:	300c      	adds	r0, #12
 800b64a:	f000 f925 	bl	800b898 <memcpy>
 800b64e:	2201      	movs	r2, #1
 800b650:	4629      	mov	r1, r5
 800b652:	4620      	mov	r0, r4
 800b654:	f000 fb40 	bl	800bcd8 <__lshift>
 800b658:	9b01      	ldr	r3, [sp, #4]
 800b65a:	f103 0901 	add.w	r9, r3, #1
 800b65e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b662:	4413      	add	r3, r2
 800b664:	9305      	str	r3, [sp, #20]
 800b666:	f00a 0301 	and.w	r3, sl, #1
 800b66a:	46b8      	mov	r8, r7
 800b66c:	9304      	str	r3, [sp, #16]
 800b66e:	4607      	mov	r7, r0
 800b670:	4631      	mov	r1, r6
 800b672:	ee18 0a10 	vmov	r0, s16
 800b676:	f7ff fa77 	bl	800ab68 <quorem>
 800b67a:	4641      	mov	r1, r8
 800b67c:	9002      	str	r0, [sp, #8]
 800b67e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b682:	ee18 0a10 	vmov	r0, s16
 800b686:	f000 fb97 	bl	800bdb8 <__mcmp>
 800b68a:	463a      	mov	r2, r7
 800b68c:	9003      	str	r0, [sp, #12]
 800b68e:	4631      	mov	r1, r6
 800b690:	4620      	mov	r0, r4
 800b692:	f000 fbad 	bl	800bdf0 <__mdiff>
 800b696:	68c2      	ldr	r2, [r0, #12]
 800b698:	f109 3bff 	add.w	fp, r9, #4294967295
 800b69c:	4605      	mov	r5, r0
 800b69e:	bb02      	cbnz	r2, 800b6e2 <_dtoa_r+0xa62>
 800b6a0:	4601      	mov	r1, r0
 800b6a2:	ee18 0a10 	vmov	r0, s16
 800b6a6:	f000 fb87 	bl	800bdb8 <__mcmp>
 800b6aa:	4602      	mov	r2, r0
 800b6ac:	4629      	mov	r1, r5
 800b6ae:	4620      	mov	r0, r4
 800b6b0:	9207      	str	r2, [sp, #28]
 800b6b2:	f000 f93f 	bl	800b934 <_Bfree>
 800b6b6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b6ba:	ea43 0102 	orr.w	r1, r3, r2
 800b6be:	9b04      	ldr	r3, [sp, #16]
 800b6c0:	430b      	orrs	r3, r1
 800b6c2:	464d      	mov	r5, r9
 800b6c4:	d10f      	bne.n	800b6e6 <_dtoa_r+0xa66>
 800b6c6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b6ca:	d02a      	beq.n	800b722 <_dtoa_r+0xaa2>
 800b6cc:	9b03      	ldr	r3, [sp, #12]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	dd02      	ble.n	800b6d8 <_dtoa_r+0xa58>
 800b6d2:	9b02      	ldr	r3, [sp, #8]
 800b6d4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b6d8:	f88b a000 	strb.w	sl, [fp]
 800b6dc:	e775      	b.n	800b5ca <_dtoa_r+0x94a>
 800b6de:	4638      	mov	r0, r7
 800b6e0:	e7ba      	b.n	800b658 <_dtoa_r+0x9d8>
 800b6e2:	2201      	movs	r2, #1
 800b6e4:	e7e2      	b.n	800b6ac <_dtoa_r+0xa2c>
 800b6e6:	9b03      	ldr	r3, [sp, #12]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	db04      	blt.n	800b6f6 <_dtoa_r+0xa76>
 800b6ec:	9906      	ldr	r1, [sp, #24]
 800b6ee:	430b      	orrs	r3, r1
 800b6f0:	9904      	ldr	r1, [sp, #16]
 800b6f2:	430b      	orrs	r3, r1
 800b6f4:	d122      	bne.n	800b73c <_dtoa_r+0xabc>
 800b6f6:	2a00      	cmp	r2, #0
 800b6f8:	ddee      	ble.n	800b6d8 <_dtoa_r+0xa58>
 800b6fa:	ee18 1a10 	vmov	r1, s16
 800b6fe:	2201      	movs	r2, #1
 800b700:	4620      	mov	r0, r4
 800b702:	f000 fae9 	bl	800bcd8 <__lshift>
 800b706:	4631      	mov	r1, r6
 800b708:	ee08 0a10 	vmov	s16, r0
 800b70c:	f000 fb54 	bl	800bdb8 <__mcmp>
 800b710:	2800      	cmp	r0, #0
 800b712:	dc03      	bgt.n	800b71c <_dtoa_r+0xa9c>
 800b714:	d1e0      	bne.n	800b6d8 <_dtoa_r+0xa58>
 800b716:	f01a 0f01 	tst.w	sl, #1
 800b71a:	d0dd      	beq.n	800b6d8 <_dtoa_r+0xa58>
 800b71c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b720:	d1d7      	bne.n	800b6d2 <_dtoa_r+0xa52>
 800b722:	2339      	movs	r3, #57	; 0x39
 800b724:	f88b 3000 	strb.w	r3, [fp]
 800b728:	462b      	mov	r3, r5
 800b72a:	461d      	mov	r5, r3
 800b72c:	3b01      	subs	r3, #1
 800b72e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b732:	2a39      	cmp	r2, #57	; 0x39
 800b734:	d071      	beq.n	800b81a <_dtoa_r+0xb9a>
 800b736:	3201      	adds	r2, #1
 800b738:	701a      	strb	r2, [r3, #0]
 800b73a:	e746      	b.n	800b5ca <_dtoa_r+0x94a>
 800b73c:	2a00      	cmp	r2, #0
 800b73e:	dd07      	ble.n	800b750 <_dtoa_r+0xad0>
 800b740:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b744:	d0ed      	beq.n	800b722 <_dtoa_r+0xaa2>
 800b746:	f10a 0301 	add.w	r3, sl, #1
 800b74a:	f88b 3000 	strb.w	r3, [fp]
 800b74e:	e73c      	b.n	800b5ca <_dtoa_r+0x94a>
 800b750:	9b05      	ldr	r3, [sp, #20]
 800b752:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b756:	4599      	cmp	r9, r3
 800b758:	d047      	beq.n	800b7ea <_dtoa_r+0xb6a>
 800b75a:	ee18 1a10 	vmov	r1, s16
 800b75e:	2300      	movs	r3, #0
 800b760:	220a      	movs	r2, #10
 800b762:	4620      	mov	r0, r4
 800b764:	f000 f908 	bl	800b978 <__multadd>
 800b768:	45b8      	cmp	r8, r7
 800b76a:	ee08 0a10 	vmov	s16, r0
 800b76e:	f04f 0300 	mov.w	r3, #0
 800b772:	f04f 020a 	mov.w	r2, #10
 800b776:	4641      	mov	r1, r8
 800b778:	4620      	mov	r0, r4
 800b77a:	d106      	bne.n	800b78a <_dtoa_r+0xb0a>
 800b77c:	f000 f8fc 	bl	800b978 <__multadd>
 800b780:	4680      	mov	r8, r0
 800b782:	4607      	mov	r7, r0
 800b784:	f109 0901 	add.w	r9, r9, #1
 800b788:	e772      	b.n	800b670 <_dtoa_r+0x9f0>
 800b78a:	f000 f8f5 	bl	800b978 <__multadd>
 800b78e:	4639      	mov	r1, r7
 800b790:	4680      	mov	r8, r0
 800b792:	2300      	movs	r3, #0
 800b794:	220a      	movs	r2, #10
 800b796:	4620      	mov	r0, r4
 800b798:	f000 f8ee 	bl	800b978 <__multadd>
 800b79c:	4607      	mov	r7, r0
 800b79e:	e7f1      	b.n	800b784 <_dtoa_r+0xb04>
 800b7a0:	9b03      	ldr	r3, [sp, #12]
 800b7a2:	9302      	str	r3, [sp, #8]
 800b7a4:	9d01      	ldr	r5, [sp, #4]
 800b7a6:	ee18 0a10 	vmov	r0, s16
 800b7aa:	4631      	mov	r1, r6
 800b7ac:	f7ff f9dc 	bl	800ab68 <quorem>
 800b7b0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b7b4:	9b01      	ldr	r3, [sp, #4]
 800b7b6:	f805 ab01 	strb.w	sl, [r5], #1
 800b7ba:	1aea      	subs	r2, r5, r3
 800b7bc:	9b02      	ldr	r3, [sp, #8]
 800b7be:	4293      	cmp	r3, r2
 800b7c0:	dd09      	ble.n	800b7d6 <_dtoa_r+0xb56>
 800b7c2:	ee18 1a10 	vmov	r1, s16
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	220a      	movs	r2, #10
 800b7ca:	4620      	mov	r0, r4
 800b7cc:	f000 f8d4 	bl	800b978 <__multadd>
 800b7d0:	ee08 0a10 	vmov	s16, r0
 800b7d4:	e7e7      	b.n	800b7a6 <_dtoa_r+0xb26>
 800b7d6:	9b02      	ldr	r3, [sp, #8]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	bfc8      	it	gt
 800b7dc:	461d      	movgt	r5, r3
 800b7de:	9b01      	ldr	r3, [sp, #4]
 800b7e0:	bfd8      	it	le
 800b7e2:	2501      	movle	r5, #1
 800b7e4:	441d      	add	r5, r3
 800b7e6:	f04f 0800 	mov.w	r8, #0
 800b7ea:	ee18 1a10 	vmov	r1, s16
 800b7ee:	2201      	movs	r2, #1
 800b7f0:	4620      	mov	r0, r4
 800b7f2:	f000 fa71 	bl	800bcd8 <__lshift>
 800b7f6:	4631      	mov	r1, r6
 800b7f8:	ee08 0a10 	vmov	s16, r0
 800b7fc:	f000 fadc 	bl	800bdb8 <__mcmp>
 800b800:	2800      	cmp	r0, #0
 800b802:	dc91      	bgt.n	800b728 <_dtoa_r+0xaa8>
 800b804:	d102      	bne.n	800b80c <_dtoa_r+0xb8c>
 800b806:	f01a 0f01 	tst.w	sl, #1
 800b80a:	d18d      	bne.n	800b728 <_dtoa_r+0xaa8>
 800b80c:	462b      	mov	r3, r5
 800b80e:	461d      	mov	r5, r3
 800b810:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b814:	2a30      	cmp	r2, #48	; 0x30
 800b816:	d0fa      	beq.n	800b80e <_dtoa_r+0xb8e>
 800b818:	e6d7      	b.n	800b5ca <_dtoa_r+0x94a>
 800b81a:	9a01      	ldr	r2, [sp, #4]
 800b81c:	429a      	cmp	r2, r3
 800b81e:	d184      	bne.n	800b72a <_dtoa_r+0xaaa>
 800b820:	9b00      	ldr	r3, [sp, #0]
 800b822:	3301      	adds	r3, #1
 800b824:	9300      	str	r3, [sp, #0]
 800b826:	2331      	movs	r3, #49	; 0x31
 800b828:	7013      	strb	r3, [r2, #0]
 800b82a:	e6ce      	b.n	800b5ca <_dtoa_r+0x94a>
 800b82c:	4b09      	ldr	r3, [pc, #36]	; (800b854 <_dtoa_r+0xbd4>)
 800b82e:	f7ff ba95 	b.w	800ad5c <_dtoa_r+0xdc>
 800b832:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b834:	2b00      	cmp	r3, #0
 800b836:	f47f aa6e 	bne.w	800ad16 <_dtoa_r+0x96>
 800b83a:	4b07      	ldr	r3, [pc, #28]	; (800b858 <_dtoa_r+0xbd8>)
 800b83c:	f7ff ba8e 	b.w	800ad5c <_dtoa_r+0xdc>
 800b840:	9b02      	ldr	r3, [sp, #8]
 800b842:	2b00      	cmp	r3, #0
 800b844:	dcae      	bgt.n	800b7a4 <_dtoa_r+0xb24>
 800b846:	9b06      	ldr	r3, [sp, #24]
 800b848:	2b02      	cmp	r3, #2
 800b84a:	f73f aea8 	bgt.w	800b59e <_dtoa_r+0x91e>
 800b84e:	e7a9      	b.n	800b7a4 <_dtoa_r+0xb24>
 800b850:	0800d6a9 	.word	0x0800d6a9
 800b854:	0800d46c 	.word	0x0800d46c
 800b858:	0800d641 	.word	0x0800d641

0800b85c <fiprintf>:
 800b85c:	b40e      	push	{r1, r2, r3}
 800b85e:	b503      	push	{r0, r1, lr}
 800b860:	4601      	mov	r1, r0
 800b862:	ab03      	add	r3, sp, #12
 800b864:	4805      	ldr	r0, [pc, #20]	; (800b87c <fiprintf+0x20>)
 800b866:	f853 2b04 	ldr.w	r2, [r3], #4
 800b86a:	6800      	ldr	r0, [r0, #0]
 800b86c:	9301      	str	r3, [sp, #4]
 800b86e:	f000 fe21 	bl	800c4b4 <_vfiprintf_r>
 800b872:	b002      	add	sp, #8
 800b874:	f85d eb04 	ldr.w	lr, [sp], #4
 800b878:	b003      	add	sp, #12
 800b87a:	4770      	bx	lr
 800b87c:	2000000c 	.word	0x2000000c

0800b880 <_localeconv_r>:
 800b880:	4800      	ldr	r0, [pc, #0]	; (800b884 <_localeconv_r+0x4>)
 800b882:	4770      	bx	lr
 800b884:	20000160 	.word	0x20000160

0800b888 <malloc>:
 800b888:	4b02      	ldr	r3, [pc, #8]	; (800b894 <malloc+0xc>)
 800b88a:	4601      	mov	r1, r0
 800b88c:	6818      	ldr	r0, [r3, #0]
 800b88e:	f000 bc17 	b.w	800c0c0 <_malloc_r>
 800b892:	bf00      	nop
 800b894:	2000000c 	.word	0x2000000c

0800b898 <memcpy>:
 800b898:	440a      	add	r2, r1
 800b89a:	4291      	cmp	r1, r2
 800b89c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b8a0:	d100      	bne.n	800b8a4 <memcpy+0xc>
 800b8a2:	4770      	bx	lr
 800b8a4:	b510      	push	{r4, lr}
 800b8a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b8aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b8ae:	4291      	cmp	r1, r2
 800b8b0:	d1f9      	bne.n	800b8a6 <memcpy+0xe>
 800b8b2:	bd10      	pop	{r4, pc}

0800b8b4 <_Balloc>:
 800b8b4:	b570      	push	{r4, r5, r6, lr}
 800b8b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b8b8:	4604      	mov	r4, r0
 800b8ba:	460d      	mov	r5, r1
 800b8bc:	b976      	cbnz	r6, 800b8dc <_Balloc+0x28>
 800b8be:	2010      	movs	r0, #16
 800b8c0:	f7ff ffe2 	bl	800b888 <malloc>
 800b8c4:	4602      	mov	r2, r0
 800b8c6:	6260      	str	r0, [r4, #36]	; 0x24
 800b8c8:	b920      	cbnz	r0, 800b8d4 <_Balloc+0x20>
 800b8ca:	4b18      	ldr	r3, [pc, #96]	; (800b92c <_Balloc+0x78>)
 800b8cc:	4818      	ldr	r0, [pc, #96]	; (800b930 <_Balloc+0x7c>)
 800b8ce:	2166      	movs	r1, #102	; 0x66
 800b8d0:	f7ff f92c 	bl	800ab2c <__assert_func>
 800b8d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b8d8:	6006      	str	r6, [r0, #0]
 800b8da:	60c6      	str	r6, [r0, #12]
 800b8dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b8de:	68f3      	ldr	r3, [r6, #12]
 800b8e0:	b183      	cbz	r3, 800b904 <_Balloc+0x50>
 800b8e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8e4:	68db      	ldr	r3, [r3, #12]
 800b8e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b8ea:	b9b8      	cbnz	r0, 800b91c <_Balloc+0x68>
 800b8ec:	2101      	movs	r1, #1
 800b8ee:	fa01 f605 	lsl.w	r6, r1, r5
 800b8f2:	1d72      	adds	r2, r6, #5
 800b8f4:	0092      	lsls	r2, r2, #2
 800b8f6:	4620      	mov	r0, r4
 800b8f8:	f000 fb60 	bl	800bfbc <_calloc_r>
 800b8fc:	b160      	cbz	r0, 800b918 <_Balloc+0x64>
 800b8fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b902:	e00e      	b.n	800b922 <_Balloc+0x6e>
 800b904:	2221      	movs	r2, #33	; 0x21
 800b906:	2104      	movs	r1, #4
 800b908:	4620      	mov	r0, r4
 800b90a:	f000 fb57 	bl	800bfbc <_calloc_r>
 800b90e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b910:	60f0      	str	r0, [r6, #12]
 800b912:	68db      	ldr	r3, [r3, #12]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d1e4      	bne.n	800b8e2 <_Balloc+0x2e>
 800b918:	2000      	movs	r0, #0
 800b91a:	bd70      	pop	{r4, r5, r6, pc}
 800b91c:	6802      	ldr	r2, [r0, #0]
 800b91e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b922:	2300      	movs	r3, #0
 800b924:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b928:	e7f7      	b.n	800b91a <_Balloc+0x66>
 800b92a:	bf00      	nop
 800b92c:	0800d490 	.word	0x0800d490
 800b930:	0800d6ba 	.word	0x0800d6ba

0800b934 <_Bfree>:
 800b934:	b570      	push	{r4, r5, r6, lr}
 800b936:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b938:	4605      	mov	r5, r0
 800b93a:	460c      	mov	r4, r1
 800b93c:	b976      	cbnz	r6, 800b95c <_Bfree+0x28>
 800b93e:	2010      	movs	r0, #16
 800b940:	f7ff ffa2 	bl	800b888 <malloc>
 800b944:	4602      	mov	r2, r0
 800b946:	6268      	str	r0, [r5, #36]	; 0x24
 800b948:	b920      	cbnz	r0, 800b954 <_Bfree+0x20>
 800b94a:	4b09      	ldr	r3, [pc, #36]	; (800b970 <_Bfree+0x3c>)
 800b94c:	4809      	ldr	r0, [pc, #36]	; (800b974 <_Bfree+0x40>)
 800b94e:	218a      	movs	r1, #138	; 0x8a
 800b950:	f7ff f8ec 	bl	800ab2c <__assert_func>
 800b954:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b958:	6006      	str	r6, [r0, #0]
 800b95a:	60c6      	str	r6, [r0, #12]
 800b95c:	b13c      	cbz	r4, 800b96e <_Bfree+0x3a>
 800b95e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b960:	6862      	ldr	r2, [r4, #4]
 800b962:	68db      	ldr	r3, [r3, #12]
 800b964:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b968:	6021      	str	r1, [r4, #0]
 800b96a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b96e:	bd70      	pop	{r4, r5, r6, pc}
 800b970:	0800d490 	.word	0x0800d490
 800b974:	0800d6ba 	.word	0x0800d6ba

0800b978 <__multadd>:
 800b978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b97c:	690d      	ldr	r5, [r1, #16]
 800b97e:	4607      	mov	r7, r0
 800b980:	460c      	mov	r4, r1
 800b982:	461e      	mov	r6, r3
 800b984:	f101 0c14 	add.w	ip, r1, #20
 800b988:	2000      	movs	r0, #0
 800b98a:	f8dc 3000 	ldr.w	r3, [ip]
 800b98e:	b299      	uxth	r1, r3
 800b990:	fb02 6101 	mla	r1, r2, r1, r6
 800b994:	0c1e      	lsrs	r6, r3, #16
 800b996:	0c0b      	lsrs	r3, r1, #16
 800b998:	fb02 3306 	mla	r3, r2, r6, r3
 800b99c:	b289      	uxth	r1, r1
 800b99e:	3001      	adds	r0, #1
 800b9a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b9a4:	4285      	cmp	r5, r0
 800b9a6:	f84c 1b04 	str.w	r1, [ip], #4
 800b9aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b9ae:	dcec      	bgt.n	800b98a <__multadd+0x12>
 800b9b0:	b30e      	cbz	r6, 800b9f6 <__multadd+0x7e>
 800b9b2:	68a3      	ldr	r3, [r4, #8]
 800b9b4:	42ab      	cmp	r3, r5
 800b9b6:	dc19      	bgt.n	800b9ec <__multadd+0x74>
 800b9b8:	6861      	ldr	r1, [r4, #4]
 800b9ba:	4638      	mov	r0, r7
 800b9bc:	3101      	adds	r1, #1
 800b9be:	f7ff ff79 	bl	800b8b4 <_Balloc>
 800b9c2:	4680      	mov	r8, r0
 800b9c4:	b928      	cbnz	r0, 800b9d2 <__multadd+0x5a>
 800b9c6:	4602      	mov	r2, r0
 800b9c8:	4b0c      	ldr	r3, [pc, #48]	; (800b9fc <__multadd+0x84>)
 800b9ca:	480d      	ldr	r0, [pc, #52]	; (800ba00 <__multadd+0x88>)
 800b9cc:	21b5      	movs	r1, #181	; 0xb5
 800b9ce:	f7ff f8ad 	bl	800ab2c <__assert_func>
 800b9d2:	6922      	ldr	r2, [r4, #16]
 800b9d4:	3202      	adds	r2, #2
 800b9d6:	f104 010c 	add.w	r1, r4, #12
 800b9da:	0092      	lsls	r2, r2, #2
 800b9dc:	300c      	adds	r0, #12
 800b9de:	f7ff ff5b 	bl	800b898 <memcpy>
 800b9e2:	4621      	mov	r1, r4
 800b9e4:	4638      	mov	r0, r7
 800b9e6:	f7ff ffa5 	bl	800b934 <_Bfree>
 800b9ea:	4644      	mov	r4, r8
 800b9ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b9f0:	3501      	adds	r5, #1
 800b9f2:	615e      	str	r6, [r3, #20]
 800b9f4:	6125      	str	r5, [r4, #16]
 800b9f6:	4620      	mov	r0, r4
 800b9f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9fc:	0800d6a9 	.word	0x0800d6a9
 800ba00:	0800d6ba 	.word	0x0800d6ba

0800ba04 <__hi0bits>:
 800ba04:	0c03      	lsrs	r3, r0, #16
 800ba06:	041b      	lsls	r3, r3, #16
 800ba08:	b9d3      	cbnz	r3, 800ba40 <__hi0bits+0x3c>
 800ba0a:	0400      	lsls	r0, r0, #16
 800ba0c:	2310      	movs	r3, #16
 800ba0e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ba12:	bf04      	itt	eq
 800ba14:	0200      	lsleq	r0, r0, #8
 800ba16:	3308      	addeq	r3, #8
 800ba18:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ba1c:	bf04      	itt	eq
 800ba1e:	0100      	lsleq	r0, r0, #4
 800ba20:	3304      	addeq	r3, #4
 800ba22:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ba26:	bf04      	itt	eq
 800ba28:	0080      	lsleq	r0, r0, #2
 800ba2a:	3302      	addeq	r3, #2
 800ba2c:	2800      	cmp	r0, #0
 800ba2e:	db05      	blt.n	800ba3c <__hi0bits+0x38>
 800ba30:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ba34:	f103 0301 	add.w	r3, r3, #1
 800ba38:	bf08      	it	eq
 800ba3a:	2320      	moveq	r3, #32
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	4770      	bx	lr
 800ba40:	2300      	movs	r3, #0
 800ba42:	e7e4      	b.n	800ba0e <__hi0bits+0xa>

0800ba44 <__lo0bits>:
 800ba44:	6803      	ldr	r3, [r0, #0]
 800ba46:	f013 0207 	ands.w	r2, r3, #7
 800ba4a:	4601      	mov	r1, r0
 800ba4c:	d00b      	beq.n	800ba66 <__lo0bits+0x22>
 800ba4e:	07da      	lsls	r2, r3, #31
 800ba50:	d423      	bmi.n	800ba9a <__lo0bits+0x56>
 800ba52:	0798      	lsls	r0, r3, #30
 800ba54:	bf49      	itett	mi
 800ba56:	085b      	lsrmi	r3, r3, #1
 800ba58:	089b      	lsrpl	r3, r3, #2
 800ba5a:	2001      	movmi	r0, #1
 800ba5c:	600b      	strmi	r3, [r1, #0]
 800ba5e:	bf5c      	itt	pl
 800ba60:	600b      	strpl	r3, [r1, #0]
 800ba62:	2002      	movpl	r0, #2
 800ba64:	4770      	bx	lr
 800ba66:	b298      	uxth	r0, r3
 800ba68:	b9a8      	cbnz	r0, 800ba96 <__lo0bits+0x52>
 800ba6a:	0c1b      	lsrs	r3, r3, #16
 800ba6c:	2010      	movs	r0, #16
 800ba6e:	b2da      	uxtb	r2, r3
 800ba70:	b90a      	cbnz	r2, 800ba76 <__lo0bits+0x32>
 800ba72:	3008      	adds	r0, #8
 800ba74:	0a1b      	lsrs	r3, r3, #8
 800ba76:	071a      	lsls	r2, r3, #28
 800ba78:	bf04      	itt	eq
 800ba7a:	091b      	lsreq	r3, r3, #4
 800ba7c:	3004      	addeq	r0, #4
 800ba7e:	079a      	lsls	r2, r3, #30
 800ba80:	bf04      	itt	eq
 800ba82:	089b      	lsreq	r3, r3, #2
 800ba84:	3002      	addeq	r0, #2
 800ba86:	07da      	lsls	r2, r3, #31
 800ba88:	d403      	bmi.n	800ba92 <__lo0bits+0x4e>
 800ba8a:	085b      	lsrs	r3, r3, #1
 800ba8c:	f100 0001 	add.w	r0, r0, #1
 800ba90:	d005      	beq.n	800ba9e <__lo0bits+0x5a>
 800ba92:	600b      	str	r3, [r1, #0]
 800ba94:	4770      	bx	lr
 800ba96:	4610      	mov	r0, r2
 800ba98:	e7e9      	b.n	800ba6e <__lo0bits+0x2a>
 800ba9a:	2000      	movs	r0, #0
 800ba9c:	4770      	bx	lr
 800ba9e:	2020      	movs	r0, #32
 800baa0:	4770      	bx	lr
	...

0800baa4 <__i2b>:
 800baa4:	b510      	push	{r4, lr}
 800baa6:	460c      	mov	r4, r1
 800baa8:	2101      	movs	r1, #1
 800baaa:	f7ff ff03 	bl	800b8b4 <_Balloc>
 800baae:	4602      	mov	r2, r0
 800bab0:	b928      	cbnz	r0, 800babe <__i2b+0x1a>
 800bab2:	4b05      	ldr	r3, [pc, #20]	; (800bac8 <__i2b+0x24>)
 800bab4:	4805      	ldr	r0, [pc, #20]	; (800bacc <__i2b+0x28>)
 800bab6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800baba:	f7ff f837 	bl	800ab2c <__assert_func>
 800babe:	2301      	movs	r3, #1
 800bac0:	6144      	str	r4, [r0, #20]
 800bac2:	6103      	str	r3, [r0, #16]
 800bac4:	bd10      	pop	{r4, pc}
 800bac6:	bf00      	nop
 800bac8:	0800d6a9 	.word	0x0800d6a9
 800bacc:	0800d6ba 	.word	0x0800d6ba

0800bad0 <__multiply>:
 800bad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bad4:	4691      	mov	r9, r2
 800bad6:	690a      	ldr	r2, [r1, #16]
 800bad8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800badc:	429a      	cmp	r2, r3
 800bade:	bfb8      	it	lt
 800bae0:	460b      	movlt	r3, r1
 800bae2:	460c      	mov	r4, r1
 800bae4:	bfbc      	itt	lt
 800bae6:	464c      	movlt	r4, r9
 800bae8:	4699      	movlt	r9, r3
 800baea:	6927      	ldr	r7, [r4, #16]
 800baec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800baf0:	68a3      	ldr	r3, [r4, #8]
 800baf2:	6861      	ldr	r1, [r4, #4]
 800baf4:	eb07 060a 	add.w	r6, r7, sl
 800baf8:	42b3      	cmp	r3, r6
 800bafa:	b085      	sub	sp, #20
 800bafc:	bfb8      	it	lt
 800bafe:	3101      	addlt	r1, #1
 800bb00:	f7ff fed8 	bl	800b8b4 <_Balloc>
 800bb04:	b930      	cbnz	r0, 800bb14 <__multiply+0x44>
 800bb06:	4602      	mov	r2, r0
 800bb08:	4b44      	ldr	r3, [pc, #272]	; (800bc1c <__multiply+0x14c>)
 800bb0a:	4845      	ldr	r0, [pc, #276]	; (800bc20 <__multiply+0x150>)
 800bb0c:	f240 115d 	movw	r1, #349	; 0x15d
 800bb10:	f7ff f80c 	bl	800ab2c <__assert_func>
 800bb14:	f100 0514 	add.w	r5, r0, #20
 800bb18:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bb1c:	462b      	mov	r3, r5
 800bb1e:	2200      	movs	r2, #0
 800bb20:	4543      	cmp	r3, r8
 800bb22:	d321      	bcc.n	800bb68 <__multiply+0x98>
 800bb24:	f104 0314 	add.w	r3, r4, #20
 800bb28:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bb2c:	f109 0314 	add.w	r3, r9, #20
 800bb30:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bb34:	9202      	str	r2, [sp, #8]
 800bb36:	1b3a      	subs	r2, r7, r4
 800bb38:	3a15      	subs	r2, #21
 800bb3a:	f022 0203 	bic.w	r2, r2, #3
 800bb3e:	3204      	adds	r2, #4
 800bb40:	f104 0115 	add.w	r1, r4, #21
 800bb44:	428f      	cmp	r7, r1
 800bb46:	bf38      	it	cc
 800bb48:	2204      	movcc	r2, #4
 800bb4a:	9201      	str	r2, [sp, #4]
 800bb4c:	9a02      	ldr	r2, [sp, #8]
 800bb4e:	9303      	str	r3, [sp, #12]
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d80c      	bhi.n	800bb6e <__multiply+0x9e>
 800bb54:	2e00      	cmp	r6, #0
 800bb56:	dd03      	ble.n	800bb60 <__multiply+0x90>
 800bb58:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d05a      	beq.n	800bc16 <__multiply+0x146>
 800bb60:	6106      	str	r6, [r0, #16]
 800bb62:	b005      	add	sp, #20
 800bb64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb68:	f843 2b04 	str.w	r2, [r3], #4
 800bb6c:	e7d8      	b.n	800bb20 <__multiply+0x50>
 800bb6e:	f8b3 a000 	ldrh.w	sl, [r3]
 800bb72:	f1ba 0f00 	cmp.w	sl, #0
 800bb76:	d024      	beq.n	800bbc2 <__multiply+0xf2>
 800bb78:	f104 0e14 	add.w	lr, r4, #20
 800bb7c:	46a9      	mov	r9, r5
 800bb7e:	f04f 0c00 	mov.w	ip, #0
 800bb82:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bb86:	f8d9 1000 	ldr.w	r1, [r9]
 800bb8a:	fa1f fb82 	uxth.w	fp, r2
 800bb8e:	b289      	uxth	r1, r1
 800bb90:	fb0a 110b 	mla	r1, sl, fp, r1
 800bb94:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bb98:	f8d9 2000 	ldr.w	r2, [r9]
 800bb9c:	4461      	add	r1, ip
 800bb9e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bba2:	fb0a c20b 	mla	r2, sl, fp, ip
 800bba6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bbaa:	b289      	uxth	r1, r1
 800bbac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bbb0:	4577      	cmp	r7, lr
 800bbb2:	f849 1b04 	str.w	r1, [r9], #4
 800bbb6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bbba:	d8e2      	bhi.n	800bb82 <__multiply+0xb2>
 800bbbc:	9a01      	ldr	r2, [sp, #4]
 800bbbe:	f845 c002 	str.w	ip, [r5, r2]
 800bbc2:	9a03      	ldr	r2, [sp, #12]
 800bbc4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bbc8:	3304      	adds	r3, #4
 800bbca:	f1b9 0f00 	cmp.w	r9, #0
 800bbce:	d020      	beq.n	800bc12 <__multiply+0x142>
 800bbd0:	6829      	ldr	r1, [r5, #0]
 800bbd2:	f104 0c14 	add.w	ip, r4, #20
 800bbd6:	46ae      	mov	lr, r5
 800bbd8:	f04f 0a00 	mov.w	sl, #0
 800bbdc:	f8bc b000 	ldrh.w	fp, [ip]
 800bbe0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bbe4:	fb09 220b 	mla	r2, r9, fp, r2
 800bbe8:	4492      	add	sl, r2
 800bbea:	b289      	uxth	r1, r1
 800bbec:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bbf0:	f84e 1b04 	str.w	r1, [lr], #4
 800bbf4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bbf8:	f8be 1000 	ldrh.w	r1, [lr]
 800bbfc:	0c12      	lsrs	r2, r2, #16
 800bbfe:	fb09 1102 	mla	r1, r9, r2, r1
 800bc02:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bc06:	4567      	cmp	r7, ip
 800bc08:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bc0c:	d8e6      	bhi.n	800bbdc <__multiply+0x10c>
 800bc0e:	9a01      	ldr	r2, [sp, #4]
 800bc10:	50a9      	str	r1, [r5, r2]
 800bc12:	3504      	adds	r5, #4
 800bc14:	e79a      	b.n	800bb4c <__multiply+0x7c>
 800bc16:	3e01      	subs	r6, #1
 800bc18:	e79c      	b.n	800bb54 <__multiply+0x84>
 800bc1a:	bf00      	nop
 800bc1c:	0800d6a9 	.word	0x0800d6a9
 800bc20:	0800d6ba 	.word	0x0800d6ba

0800bc24 <__pow5mult>:
 800bc24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc28:	4615      	mov	r5, r2
 800bc2a:	f012 0203 	ands.w	r2, r2, #3
 800bc2e:	4606      	mov	r6, r0
 800bc30:	460f      	mov	r7, r1
 800bc32:	d007      	beq.n	800bc44 <__pow5mult+0x20>
 800bc34:	4c25      	ldr	r4, [pc, #148]	; (800bccc <__pow5mult+0xa8>)
 800bc36:	3a01      	subs	r2, #1
 800bc38:	2300      	movs	r3, #0
 800bc3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bc3e:	f7ff fe9b 	bl	800b978 <__multadd>
 800bc42:	4607      	mov	r7, r0
 800bc44:	10ad      	asrs	r5, r5, #2
 800bc46:	d03d      	beq.n	800bcc4 <__pow5mult+0xa0>
 800bc48:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bc4a:	b97c      	cbnz	r4, 800bc6c <__pow5mult+0x48>
 800bc4c:	2010      	movs	r0, #16
 800bc4e:	f7ff fe1b 	bl	800b888 <malloc>
 800bc52:	4602      	mov	r2, r0
 800bc54:	6270      	str	r0, [r6, #36]	; 0x24
 800bc56:	b928      	cbnz	r0, 800bc64 <__pow5mult+0x40>
 800bc58:	4b1d      	ldr	r3, [pc, #116]	; (800bcd0 <__pow5mult+0xac>)
 800bc5a:	481e      	ldr	r0, [pc, #120]	; (800bcd4 <__pow5mult+0xb0>)
 800bc5c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bc60:	f7fe ff64 	bl	800ab2c <__assert_func>
 800bc64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bc68:	6004      	str	r4, [r0, #0]
 800bc6a:	60c4      	str	r4, [r0, #12]
 800bc6c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bc70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bc74:	b94c      	cbnz	r4, 800bc8a <__pow5mult+0x66>
 800bc76:	f240 2171 	movw	r1, #625	; 0x271
 800bc7a:	4630      	mov	r0, r6
 800bc7c:	f7ff ff12 	bl	800baa4 <__i2b>
 800bc80:	2300      	movs	r3, #0
 800bc82:	f8c8 0008 	str.w	r0, [r8, #8]
 800bc86:	4604      	mov	r4, r0
 800bc88:	6003      	str	r3, [r0, #0]
 800bc8a:	f04f 0900 	mov.w	r9, #0
 800bc8e:	07eb      	lsls	r3, r5, #31
 800bc90:	d50a      	bpl.n	800bca8 <__pow5mult+0x84>
 800bc92:	4639      	mov	r1, r7
 800bc94:	4622      	mov	r2, r4
 800bc96:	4630      	mov	r0, r6
 800bc98:	f7ff ff1a 	bl	800bad0 <__multiply>
 800bc9c:	4639      	mov	r1, r7
 800bc9e:	4680      	mov	r8, r0
 800bca0:	4630      	mov	r0, r6
 800bca2:	f7ff fe47 	bl	800b934 <_Bfree>
 800bca6:	4647      	mov	r7, r8
 800bca8:	106d      	asrs	r5, r5, #1
 800bcaa:	d00b      	beq.n	800bcc4 <__pow5mult+0xa0>
 800bcac:	6820      	ldr	r0, [r4, #0]
 800bcae:	b938      	cbnz	r0, 800bcc0 <__pow5mult+0x9c>
 800bcb0:	4622      	mov	r2, r4
 800bcb2:	4621      	mov	r1, r4
 800bcb4:	4630      	mov	r0, r6
 800bcb6:	f7ff ff0b 	bl	800bad0 <__multiply>
 800bcba:	6020      	str	r0, [r4, #0]
 800bcbc:	f8c0 9000 	str.w	r9, [r0]
 800bcc0:	4604      	mov	r4, r0
 800bcc2:	e7e4      	b.n	800bc8e <__pow5mult+0x6a>
 800bcc4:	4638      	mov	r0, r7
 800bcc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcca:	bf00      	nop
 800bccc:	0800d808 	.word	0x0800d808
 800bcd0:	0800d490 	.word	0x0800d490
 800bcd4:	0800d6ba 	.word	0x0800d6ba

0800bcd8 <__lshift>:
 800bcd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcdc:	460c      	mov	r4, r1
 800bcde:	6849      	ldr	r1, [r1, #4]
 800bce0:	6923      	ldr	r3, [r4, #16]
 800bce2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bce6:	68a3      	ldr	r3, [r4, #8]
 800bce8:	4607      	mov	r7, r0
 800bcea:	4691      	mov	r9, r2
 800bcec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bcf0:	f108 0601 	add.w	r6, r8, #1
 800bcf4:	42b3      	cmp	r3, r6
 800bcf6:	db0b      	blt.n	800bd10 <__lshift+0x38>
 800bcf8:	4638      	mov	r0, r7
 800bcfa:	f7ff fddb 	bl	800b8b4 <_Balloc>
 800bcfe:	4605      	mov	r5, r0
 800bd00:	b948      	cbnz	r0, 800bd16 <__lshift+0x3e>
 800bd02:	4602      	mov	r2, r0
 800bd04:	4b2a      	ldr	r3, [pc, #168]	; (800bdb0 <__lshift+0xd8>)
 800bd06:	482b      	ldr	r0, [pc, #172]	; (800bdb4 <__lshift+0xdc>)
 800bd08:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bd0c:	f7fe ff0e 	bl	800ab2c <__assert_func>
 800bd10:	3101      	adds	r1, #1
 800bd12:	005b      	lsls	r3, r3, #1
 800bd14:	e7ee      	b.n	800bcf4 <__lshift+0x1c>
 800bd16:	2300      	movs	r3, #0
 800bd18:	f100 0114 	add.w	r1, r0, #20
 800bd1c:	f100 0210 	add.w	r2, r0, #16
 800bd20:	4618      	mov	r0, r3
 800bd22:	4553      	cmp	r3, sl
 800bd24:	db37      	blt.n	800bd96 <__lshift+0xbe>
 800bd26:	6920      	ldr	r0, [r4, #16]
 800bd28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bd2c:	f104 0314 	add.w	r3, r4, #20
 800bd30:	f019 091f 	ands.w	r9, r9, #31
 800bd34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bd38:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bd3c:	d02f      	beq.n	800bd9e <__lshift+0xc6>
 800bd3e:	f1c9 0e20 	rsb	lr, r9, #32
 800bd42:	468a      	mov	sl, r1
 800bd44:	f04f 0c00 	mov.w	ip, #0
 800bd48:	681a      	ldr	r2, [r3, #0]
 800bd4a:	fa02 f209 	lsl.w	r2, r2, r9
 800bd4e:	ea42 020c 	orr.w	r2, r2, ip
 800bd52:	f84a 2b04 	str.w	r2, [sl], #4
 800bd56:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd5a:	4298      	cmp	r0, r3
 800bd5c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bd60:	d8f2      	bhi.n	800bd48 <__lshift+0x70>
 800bd62:	1b03      	subs	r3, r0, r4
 800bd64:	3b15      	subs	r3, #21
 800bd66:	f023 0303 	bic.w	r3, r3, #3
 800bd6a:	3304      	adds	r3, #4
 800bd6c:	f104 0215 	add.w	r2, r4, #21
 800bd70:	4290      	cmp	r0, r2
 800bd72:	bf38      	it	cc
 800bd74:	2304      	movcc	r3, #4
 800bd76:	f841 c003 	str.w	ip, [r1, r3]
 800bd7a:	f1bc 0f00 	cmp.w	ip, #0
 800bd7e:	d001      	beq.n	800bd84 <__lshift+0xac>
 800bd80:	f108 0602 	add.w	r6, r8, #2
 800bd84:	3e01      	subs	r6, #1
 800bd86:	4638      	mov	r0, r7
 800bd88:	612e      	str	r6, [r5, #16]
 800bd8a:	4621      	mov	r1, r4
 800bd8c:	f7ff fdd2 	bl	800b934 <_Bfree>
 800bd90:	4628      	mov	r0, r5
 800bd92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd96:	f842 0f04 	str.w	r0, [r2, #4]!
 800bd9a:	3301      	adds	r3, #1
 800bd9c:	e7c1      	b.n	800bd22 <__lshift+0x4a>
 800bd9e:	3904      	subs	r1, #4
 800bda0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bda4:	f841 2f04 	str.w	r2, [r1, #4]!
 800bda8:	4298      	cmp	r0, r3
 800bdaa:	d8f9      	bhi.n	800bda0 <__lshift+0xc8>
 800bdac:	e7ea      	b.n	800bd84 <__lshift+0xac>
 800bdae:	bf00      	nop
 800bdb0:	0800d6a9 	.word	0x0800d6a9
 800bdb4:	0800d6ba 	.word	0x0800d6ba

0800bdb8 <__mcmp>:
 800bdb8:	b530      	push	{r4, r5, lr}
 800bdba:	6902      	ldr	r2, [r0, #16]
 800bdbc:	690c      	ldr	r4, [r1, #16]
 800bdbe:	1b12      	subs	r2, r2, r4
 800bdc0:	d10e      	bne.n	800bde0 <__mcmp+0x28>
 800bdc2:	f100 0314 	add.w	r3, r0, #20
 800bdc6:	3114      	adds	r1, #20
 800bdc8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bdcc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bdd0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bdd4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bdd8:	42a5      	cmp	r5, r4
 800bdda:	d003      	beq.n	800bde4 <__mcmp+0x2c>
 800bddc:	d305      	bcc.n	800bdea <__mcmp+0x32>
 800bdde:	2201      	movs	r2, #1
 800bde0:	4610      	mov	r0, r2
 800bde2:	bd30      	pop	{r4, r5, pc}
 800bde4:	4283      	cmp	r3, r0
 800bde6:	d3f3      	bcc.n	800bdd0 <__mcmp+0x18>
 800bde8:	e7fa      	b.n	800bde0 <__mcmp+0x28>
 800bdea:	f04f 32ff 	mov.w	r2, #4294967295
 800bdee:	e7f7      	b.n	800bde0 <__mcmp+0x28>

0800bdf0 <__mdiff>:
 800bdf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdf4:	460c      	mov	r4, r1
 800bdf6:	4606      	mov	r6, r0
 800bdf8:	4611      	mov	r1, r2
 800bdfa:	4620      	mov	r0, r4
 800bdfc:	4690      	mov	r8, r2
 800bdfe:	f7ff ffdb 	bl	800bdb8 <__mcmp>
 800be02:	1e05      	subs	r5, r0, #0
 800be04:	d110      	bne.n	800be28 <__mdiff+0x38>
 800be06:	4629      	mov	r1, r5
 800be08:	4630      	mov	r0, r6
 800be0a:	f7ff fd53 	bl	800b8b4 <_Balloc>
 800be0e:	b930      	cbnz	r0, 800be1e <__mdiff+0x2e>
 800be10:	4b3a      	ldr	r3, [pc, #232]	; (800befc <__mdiff+0x10c>)
 800be12:	4602      	mov	r2, r0
 800be14:	f240 2132 	movw	r1, #562	; 0x232
 800be18:	4839      	ldr	r0, [pc, #228]	; (800bf00 <__mdiff+0x110>)
 800be1a:	f7fe fe87 	bl	800ab2c <__assert_func>
 800be1e:	2301      	movs	r3, #1
 800be20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800be24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be28:	bfa4      	itt	ge
 800be2a:	4643      	movge	r3, r8
 800be2c:	46a0      	movge	r8, r4
 800be2e:	4630      	mov	r0, r6
 800be30:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800be34:	bfa6      	itte	ge
 800be36:	461c      	movge	r4, r3
 800be38:	2500      	movge	r5, #0
 800be3a:	2501      	movlt	r5, #1
 800be3c:	f7ff fd3a 	bl	800b8b4 <_Balloc>
 800be40:	b920      	cbnz	r0, 800be4c <__mdiff+0x5c>
 800be42:	4b2e      	ldr	r3, [pc, #184]	; (800befc <__mdiff+0x10c>)
 800be44:	4602      	mov	r2, r0
 800be46:	f44f 7110 	mov.w	r1, #576	; 0x240
 800be4a:	e7e5      	b.n	800be18 <__mdiff+0x28>
 800be4c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800be50:	6926      	ldr	r6, [r4, #16]
 800be52:	60c5      	str	r5, [r0, #12]
 800be54:	f104 0914 	add.w	r9, r4, #20
 800be58:	f108 0514 	add.w	r5, r8, #20
 800be5c:	f100 0e14 	add.w	lr, r0, #20
 800be60:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800be64:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800be68:	f108 0210 	add.w	r2, r8, #16
 800be6c:	46f2      	mov	sl, lr
 800be6e:	2100      	movs	r1, #0
 800be70:	f859 3b04 	ldr.w	r3, [r9], #4
 800be74:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800be78:	fa1f f883 	uxth.w	r8, r3
 800be7c:	fa11 f18b 	uxtah	r1, r1, fp
 800be80:	0c1b      	lsrs	r3, r3, #16
 800be82:	eba1 0808 	sub.w	r8, r1, r8
 800be86:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800be8a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800be8e:	fa1f f888 	uxth.w	r8, r8
 800be92:	1419      	asrs	r1, r3, #16
 800be94:	454e      	cmp	r6, r9
 800be96:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800be9a:	f84a 3b04 	str.w	r3, [sl], #4
 800be9e:	d8e7      	bhi.n	800be70 <__mdiff+0x80>
 800bea0:	1b33      	subs	r3, r6, r4
 800bea2:	3b15      	subs	r3, #21
 800bea4:	f023 0303 	bic.w	r3, r3, #3
 800bea8:	3304      	adds	r3, #4
 800beaa:	3415      	adds	r4, #21
 800beac:	42a6      	cmp	r6, r4
 800beae:	bf38      	it	cc
 800beb0:	2304      	movcc	r3, #4
 800beb2:	441d      	add	r5, r3
 800beb4:	4473      	add	r3, lr
 800beb6:	469e      	mov	lr, r3
 800beb8:	462e      	mov	r6, r5
 800beba:	4566      	cmp	r6, ip
 800bebc:	d30e      	bcc.n	800bedc <__mdiff+0xec>
 800bebe:	f10c 0203 	add.w	r2, ip, #3
 800bec2:	1b52      	subs	r2, r2, r5
 800bec4:	f022 0203 	bic.w	r2, r2, #3
 800bec8:	3d03      	subs	r5, #3
 800beca:	45ac      	cmp	ip, r5
 800becc:	bf38      	it	cc
 800bece:	2200      	movcc	r2, #0
 800bed0:	441a      	add	r2, r3
 800bed2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bed6:	b17b      	cbz	r3, 800bef8 <__mdiff+0x108>
 800bed8:	6107      	str	r7, [r0, #16]
 800beda:	e7a3      	b.n	800be24 <__mdiff+0x34>
 800bedc:	f856 8b04 	ldr.w	r8, [r6], #4
 800bee0:	fa11 f288 	uxtah	r2, r1, r8
 800bee4:	1414      	asrs	r4, r2, #16
 800bee6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800beea:	b292      	uxth	r2, r2
 800beec:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bef0:	f84e 2b04 	str.w	r2, [lr], #4
 800bef4:	1421      	asrs	r1, r4, #16
 800bef6:	e7e0      	b.n	800beba <__mdiff+0xca>
 800bef8:	3f01      	subs	r7, #1
 800befa:	e7ea      	b.n	800bed2 <__mdiff+0xe2>
 800befc:	0800d6a9 	.word	0x0800d6a9
 800bf00:	0800d6ba 	.word	0x0800d6ba

0800bf04 <__d2b>:
 800bf04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bf08:	4689      	mov	r9, r1
 800bf0a:	2101      	movs	r1, #1
 800bf0c:	ec57 6b10 	vmov	r6, r7, d0
 800bf10:	4690      	mov	r8, r2
 800bf12:	f7ff fccf 	bl	800b8b4 <_Balloc>
 800bf16:	4604      	mov	r4, r0
 800bf18:	b930      	cbnz	r0, 800bf28 <__d2b+0x24>
 800bf1a:	4602      	mov	r2, r0
 800bf1c:	4b25      	ldr	r3, [pc, #148]	; (800bfb4 <__d2b+0xb0>)
 800bf1e:	4826      	ldr	r0, [pc, #152]	; (800bfb8 <__d2b+0xb4>)
 800bf20:	f240 310a 	movw	r1, #778	; 0x30a
 800bf24:	f7fe fe02 	bl	800ab2c <__assert_func>
 800bf28:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bf2c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bf30:	bb35      	cbnz	r5, 800bf80 <__d2b+0x7c>
 800bf32:	2e00      	cmp	r6, #0
 800bf34:	9301      	str	r3, [sp, #4]
 800bf36:	d028      	beq.n	800bf8a <__d2b+0x86>
 800bf38:	4668      	mov	r0, sp
 800bf3a:	9600      	str	r6, [sp, #0]
 800bf3c:	f7ff fd82 	bl	800ba44 <__lo0bits>
 800bf40:	9900      	ldr	r1, [sp, #0]
 800bf42:	b300      	cbz	r0, 800bf86 <__d2b+0x82>
 800bf44:	9a01      	ldr	r2, [sp, #4]
 800bf46:	f1c0 0320 	rsb	r3, r0, #32
 800bf4a:	fa02 f303 	lsl.w	r3, r2, r3
 800bf4e:	430b      	orrs	r3, r1
 800bf50:	40c2      	lsrs	r2, r0
 800bf52:	6163      	str	r3, [r4, #20]
 800bf54:	9201      	str	r2, [sp, #4]
 800bf56:	9b01      	ldr	r3, [sp, #4]
 800bf58:	61a3      	str	r3, [r4, #24]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	bf14      	ite	ne
 800bf5e:	2202      	movne	r2, #2
 800bf60:	2201      	moveq	r2, #1
 800bf62:	6122      	str	r2, [r4, #16]
 800bf64:	b1d5      	cbz	r5, 800bf9c <__d2b+0x98>
 800bf66:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bf6a:	4405      	add	r5, r0
 800bf6c:	f8c9 5000 	str.w	r5, [r9]
 800bf70:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bf74:	f8c8 0000 	str.w	r0, [r8]
 800bf78:	4620      	mov	r0, r4
 800bf7a:	b003      	add	sp, #12
 800bf7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf84:	e7d5      	b.n	800bf32 <__d2b+0x2e>
 800bf86:	6161      	str	r1, [r4, #20]
 800bf88:	e7e5      	b.n	800bf56 <__d2b+0x52>
 800bf8a:	a801      	add	r0, sp, #4
 800bf8c:	f7ff fd5a 	bl	800ba44 <__lo0bits>
 800bf90:	9b01      	ldr	r3, [sp, #4]
 800bf92:	6163      	str	r3, [r4, #20]
 800bf94:	2201      	movs	r2, #1
 800bf96:	6122      	str	r2, [r4, #16]
 800bf98:	3020      	adds	r0, #32
 800bf9a:	e7e3      	b.n	800bf64 <__d2b+0x60>
 800bf9c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bfa0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bfa4:	f8c9 0000 	str.w	r0, [r9]
 800bfa8:	6918      	ldr	r0, [r3, #16]
 800bfaa:	f7ff fd2b 	bl	800ba04 <__hi0bits>
 800bfae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bfb2:	e7df      	b.n	800bf74 <__d2b+0x70>
 800bfb4:	0800d6a9 	.word	0x0800d6a9
 800bfb8:	0800d6ba 	.word	0x0800d6ba

0800bfbc <_calloc_r>:
 800bfbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bfbe:	fba1 2402 	umull	r2, r4, r1, r2
 800bfc2:	b94c      	cbnz	r4, 800bfd8 <_calloc_r+0x1c>
 800bfc4:	4611      	mov	r1, r2
 800bfc6:	9201      	str	r2, [sp, #4]
 800bfc8:	f000 f87a 	bl	800c0c0 <_malloc_r>
 800bfcc:	9a01      	ldr	r2, [sp, #4]
 800bfce:	4605      	mov	r5, r0
 800bfd0:	b930      	cbnz	r0, 800bfe0 <_calloc_r+0x24>
 800bfd2:	4628      	mov	r0, r5
 800bfd4:	b003      	add	sp, #12
 800bfd6:	bd30      	pop	{r4, r5, pc}
 800bfd8:	220c      	movs	r2, #12
 800bfda:	6002      	str	r2, [r0, #0]
 800bfdc:	2500      	movs	r5, #0
 800bfde:	e7f8      	b.n	800bfd2 <_calloc_r+0x16>
 800bfe0:	4621      	mov	r1, r4
 800bfe2:	f7fd fff5 	bl	8009fd0 <memset>
 800bfe6:	e7f4      	b.n	800bfd2 <_calloc_r+0x16>

0800bfe8 <_free_r>:
 800bfe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bfea:	2900      	cmp	r1, #0
 800bfec:	d044      	beq.n	800c078 <_free_r+0x90>
 800bfee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bff2:	9001      	str	r0, [sp, #4]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	f1a1 0404 	sub.w	r4, r1, #4
 800bffa:	bfb8      	it	lt
 800bffc:	18e4      	addlt	r4, r4, r3
 800bffe:	f000 fead 	bl	800cd5c <__malloc_lock>
 800c002:	4a1e      	ldr	r2, [pc, #120]	; (800c07c <_free_r+0x94>)
 800c004:	9801      	ldr	r0, [sp, #4]
 800c006:	6813      	ldr	r3, [r2, #0]
 800c008:	b933      	cbnz	r3, 800c018 <_free_r+0x30>
 800c00a:	6063      	str	r3, [r4, #4]
 800c00c:	6014      	str	r4, [r2, #0]
 800c00e:	b003      	add	sp, #12
 800c010:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c014:	f000 bea8 	b.w	800cd68 <__malloc_unlock>
 800c018:	42a3      	cmp	r3, r4
 800c01a:	d908      	bls.n	800c02e <_free_r+0x46>
 800c01c:	6825      	ldr	r5, [r4, #0]
 800c01e:	1961      	adds	r1, r4, r5
 800c020:	428b      	cmp	r3, r1
 800c022:	bf01      	itttt	eq
 800c024:	6819      	ldreq	r1, [r3, #0]
 800c026:	685b      	ldreq	r3, [r3, #4]
 800c028:	1949      	addeq	r1, r1, r5
 800c02a:	6021      	streq	r1, [r4, #0]
 800c02c:	e7ed      	b.n	800c00a <_free_r+0x22>
 800c02e:	461a      	mov	r2, r3
 800c030:	685b      	ldr	r3, [r3, #4]
 800c032:	b10b      	cbz	r3, 800c038 <_free_r+0x50>
 800c034:	42a3      	cmp	r3, r4
 800c036:	d9fa      	bls.n	800c02e <_free_r+0x46>
 800c038:	6811      	ldr	r1, [r2, #0]
 800c03a:	1855      	adds	r5, r2, r1
 800c03c:	42a5      	cmp	r5, r4
 800c03e:	d10b      	bne.n	800c058 <_free_r+0x70>
 800c040:	6824      	ldr	r4, [r4, #0]
 800c042:	4421      	add	r1, r4
 800c044:	1854      	adds	r4, r2, r1
 800c046:	42a3      	cmp	r3, r4
 800c048:	6011      	str	r1, [r2, #0]
 800c04a:	d1e0      	bne.n	800c00e <_free_r+0x26>
 800c04c:	681c      	ldr	r4, [r3, #0]
 800c04e:	685b      	ldr	r3, [r3, #4]
 800c050:	6053      	str	r3, [r2, #4]
 800c052:	4421      	add	r1, r4
 800c054:	6011      	str	r1, [r2, #0]
 800c056:	e7da      	b.n	800c00e <_free_r+0x26>
 800c058:	d902      	bls.n	800c060 <_free_r+0x78>
 800c05a:	230c      	movs	r3, #12
 800c05c:	6003      	str	r3, [r0, #0]
 800c05e:	e7d6      	b.n	800c00e <_free_r+0x26>
 800c060:	6825      	ldr	r5, [r4, #0]
 800c062:	1961      	adds	r1, r4, r5
 800c064:	428b      	cmp	r3, r1
 800c066:	bf04      	itt	eq
 800c068:	6819      	ldreq	r1, [r3, #0]
 800c06a:	685b      	ldreq	r3, [r3, #4]
 800c06c:	6063      	str	r3, [r4, #4]
 800c06e:	bf04      	itt	eq
 800c070:	1949      	addeq	r1, r1, r5
 800c072:	6021      	streq	r1, [r4, #0]
 800c074:	6054      	str	r4, [r2, #4]
 800c076:	e7ca      	b.n	800c00e <_free_r+0x26>
 800c078:	b003      	add	sp, #12
 800c07a:	bd30      	pop	{r4, r5, pc}
 800c07c:	200006a8 	.word	0x200006a8

0800c080 <sbrk_aligned>:
 800c080:	b570      	push	{r4, r5, r6, lr}
 800c082:	4e0e      	ldr	r6, [pc, #56]	; (800c0bc <sbrk_aligned+0x3c>)
 800c084:	460c      	mov	r4, r1
 800c086:	6831      	ldr	r1, [r6, #0]
 800c088:	4605      	mov	r5, r0
 800c08a:	b911      	cbnz	r1, 800c092 <sbrk_aligned+0x12>
 800c08c:	f000 fb42 	bl	800c714 <_sbrk_r>
 800c090:	6030      	str	r0, [r6, #0]
 800c092:	4621      	mov	r1, r4
 800c094:	4628      	mov	r0, r5
 800c096:	f000 fb3d 	bl	800c714 <_sbrk_r>
 800c09a:	1c43      	adds	r3, r0, #1
 800c09c:	d00a      	beq.n	800c0b4 <sbrk_aligned+0x34>
 800c09e:	1cc4      	adds	r4, r0, #3
 800c0a0:	f024 0403 	bic.w	r4, r4, #3
 800c0a4:	42a0      	cmp	r0, r4
 800c0a6:	d007      	beq.n	800c0b8 <sbrk_aligned+0x38>
 800c0a8:	1a21      	subs	r1, r4, r0
 800c0aa:	4628      	mov	r0, r5
 800c0ac:	f000 fb32 	bl	800c714 <_sbrk_r>
 800c0b0:	3001      	adds	r0, #1
 800c0b2:	d101      	bne.n	800c0b8 <sbrk_aligned+0x38>
 800c0b4:	f04f 34ff 	mov.w	r4, #4294967295
 800c0b8:	4620      	mov	r0, r4
 800c0ba:	bd70      	pop	{r4, r5, r6, pc}
 800c0bc:	200006ac 	.word	0x200006ac

0800c0c0 <_malloc_r>:
 800c0c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0c4:	1ccd      	adds	r5, r1, #3
 800c0c6:	f025 0503 	bic.w	r5, r5, #3
 800c0ca:	3508      	adds	r5, #8
 800c0cc:	2d0c      	cmp	r5, #12
 800c0ce:	bf38      	it	cc
 800c0d0:	250c      	movcc	r5, #12
 800c0d2:	2d00      	cmp	r5, #0
 800c0d4:	4607      	mov	r7, r0
 800c0d6:	db01      	blt.n	800c0dc <_malloc_r+0x1c>
 800c0d8:	42a9      	cmp	r1, r5
 800c0da:	d905      	bls.n	800c0e8 <_malloc_r+0x28>
 800c0dc:	230c      	movs	r3, #12
 800c0de:	603b      	str	r3, [r7, #0]
 800c0e0:	2600      	movs	r6, #0
 800c0e2:	4630      	mov	r0, r6
 800c0e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0e8:	4e2e      	ldr	r6, [pc, #184]	; (800c1a4 <_malloc_r+0xe4>)
 800c0ea:	f000 fe37 	bl	800cd5c <__malloc_lock>
 800c0ee:	6833      	ldr	r3, [r6, #0]
 800c0f0:	461c      	mov	r4, r3
 800c0f2:	bb34      	cbnz	r4, 800c142 <_malloc_r+0x82>
 800c0f4:	4629      	mov	r1, r5
 800c0f6:	4638      	mov	r0, r7
 800c0f8:	f7ff ffc2 	bl	800c080 <sbrk_aligned>
 800c0fc:	1c43      	adds	r3, r0, #1
 800c0fe:	4604      	mov	r4, r0
 800c100:	d14d      	bne.n	800c19e <_malloc_r+0xde>
 800c102:	6834      	ldr	r4, [r6, #0]
 800c104:	4626      	mov	r6, r4
 800c106:	2e00      	cmp	r6, #0
 800c108:	d140      	bne.n	800c18c <_malloc_r+0xcc>
 800c10a:	6823      	ldr	r3, [r4, #0]
 800c10c:	4631      	mov	r1, r6
 800c10e:	4638      	mov	r0, r7
 800c110:	eb04 0803 	add.w	r8, r4, r3
 800c114:	f000 fafe 	bl	800c714 <_sbrk_r>
 800c118:	4580      	cmp	r8, r0
 800c11a:	d13a      	bne.n	800c192 <_malloc_r+0xd2>
 800c11c:	6821      	ldr	r1, [r4, #0]
 800c11e:	3503      	adds	r5, #3
 800c120:	1a6d      	subs	r5, r5, r1
 800c122:	f025 0503 	bic.w	r5, r5, #3
 800c126:	3508      	adds	r5, #8
 800c128:	2d0c      	cmp	r5, #12
 800c12a:	bf38      	it	cc
 800c12c:	250c      	movcc	r5, #12
 800c12e:	4629      	mov	r1, r5
 800c130:	4638      	mov	r0, r7
 800c132:	f7ff ffa5 	bl	800c080 <sbrk_aligned>
 800c136:	3001      	adds	r0, #1
 800c138:	d02b      	beq.n	800c192 <_malloc_r+0xd2>
 800c13a:	6823      	ldr	r3, [r4, #0]
 800c13c:	442b      	add	r3, r5
 800c13e:	6023      	str	r3, [r4, #0]
 800c140:	e00e      	b.n	800c160 <_malloc_r+0xa0>
 800c142:	6822      	ldr	r2, [r4, #0]
 800c144:	1b52      	subs	r2, r2, r5
 800c146:	d41e      	bmi.n	800c186 <_malloc_r+0xc6>
 800c148:	2a0b      	cmp	r2, #11
 800c14a:	d916      	bls.n	800c17a <_malloc_r+0xba>
 800c14c:	1961      	adds	r1, r4, r5
 800c14e:	42a3      	cmp	r3, r4
 800c150:	6025      	str	r5, [r4, #0]
 800c152:	bf18      	it	ne
 800c154:	6059      	strne	r1, [r3, #4]
 800c156:	6863      	ldr	r3, [r4, #4]
 800c158:	bf08      	it	eq
 800c15a:	6031      	streq	r1, [r6, #0]
 800c15c:	5162      	str	r2, [r4, r5]
 800c15e:	604b      	str	r3, [r1, #4]
 800c160:	4638      	mov	r0, r7
 800c162:	f104 060b 	add.w	r6, r4, #11
 800c166:	f000 fdff 	bl	800cd68 <__malloc_unlock>
 800c16a:	f026 0607 	bic.w	r6, r6, #7
 800c16e:	1d23      	adds	r3, r4, #4
 800c170:	1af2      	subs	r2, r6, r3
 800c172:	d0b6      	beq.n	800c0e2 <_malloc_r+0x22>
 800c174:	1b9b      	subs	r3, r3, r6
 800c176:	50a3      	str	r3, [r4, r2]
 800c178:	e7b3      	b.n	800c0e2 <_malloc_r+0x22>
 800c17a:	6862      	ldr	r2, [r4, #4]
 800c17c:	42a3      	cmp	r3, r4
 800c17e:	bf0c      	ite	eq
 800c180:	6032      	streq	r2, [r6, #0]
 800c182:	605a      	strne	r2, [r3, #4]
 800c184:	e7ec      	b.n	800c160 <_malloc_r+0xa0>
 800c186:	4623      	mov	r3, r4
 800c188:	6864      	ldr	r4, [r4, #4]
 800c18a:	e7b2      	b.n	800c0f2 <_malloc_r+0x32>
 800c18c:	4634      	mov	r4, r6
 800c18e:	6876      	ldr	r6, [r6, #4]
 800c190:	e7b9      	b.n	800c106 <_malloc_r+0x46>
 800c192:	230c      	movs	r3, #12
 800c194:	603b      	str	r3, [r7, #0]
 800c196:	4638      	mov	r0, r7
 800c198:	f000 fde6 	bl	800cd68 <__malloc_unlock>
 800c19c:	e7a1      	b.n	800c0e2 <_malloc_r+0x22>
 800c19e:	6025      	str	r5, [r4, #0]
 800c1a0:	e7de      	b.n	800c160 <_malloc_r+0xa0>
 800c1a2:	bf00      	nop
 800c1a4:	200006a8 	.word	0x200006a8

0800c1a8 <__ssputs_r>:
 800c1a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1ac:	688e      	ldr	r6, [r1, #8]
 800c1ae:	429e      	cmp	r6, r3
 800c1b0:	4682      	mov	sl, r0
 800c1b2:	460c      	mov	r4, r1
 800c1b4:	4690      	mov	r8, r2
 800c1b6:	461f      	mov	r7, r3
 800c1b8:	d838      	bhi.n	800c22c <__ssputs_r+0x84>
 800c1ba:	898a      	ldrh	r2, [r1, #12]
 800c1bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c1c0:	d032      	beq.n	800c228 <__ssputs_r+0x80>
 800c1c2:	6825      	ldr	r5, [r4, #0]
 800c1c4:	6909      	ldr	r1, [r1, #16]
 800c1c6:	eba5 0901 	sub.w	r9, r5, r1
 800c1ca:	6965      	ldr	r5, [r4, #20]
 800c1cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c1d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c1d4:	3301      	adds	r3, #1
 800c1d6:	444b      	add	r3, r9
 800c1d8:	106d      	asrs	r5, r5, #1
 800c1da:	429d      	cmp	r5, r3
 800c1dc:	bf38      	it	cc
 800c1de:	461d      	movcc	r5, r3
 800c1e0:	0553      	lsls	r3, r2, #21
 800c1e2:	d531      	bpl.n	800c248 <__ssputs_r+0xa0>
 800c1e4:	4629      	mov	r1, r5
 800c1e6:	f7ff ff6b 	bl	800c0c0 <_malloc_r>
 800c1ea:	4606      	mov	r6, r0
 800c1ec:	b950      	cbnz	r0, 800c204 <__ssputs_r+0x5c>
 800c1ee:	230c      	movs	r3, #12
 800c1f0:	f8ca 3000 	str.w	r3, [sl]
 800c1f4:	89a3      	ldrh	r3, [r4, #12]
 800c1f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1fa:	81a3      	strh	r3, [r4, #12]
 800c1fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c204:	6921      	ldr	r1, [r4, #16]
 800c206:	464a      	mov	r2, r9
 800c208:	f7ff fb46 	bl	800b898 <memcpy>
 800c20c:	89a3      	ldrh	r3, [r4, #12]
 800c20e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c216:	81a3      	strh	r3, [r4, #12]
 800c218:	6126      	str	r6, [r4, #16]
 800c21a:	6165      	str	r5, [r4, #20]
 800c21c:	444e      	add	r6, r9
 800c21e:	eba5 0509 	sub.w	r5, r5, r9
 800c222:	6026      	str	r6, [r4, #0]
 800c224:	60a5      	str	r5, [r4, #8]
 800c226:	463e      	mov	r6, r7
 800c228:	42be      	cmp	r6, r7
 800c22a:	d900      	bls.n	800c22e <__ssputs_r+0x86>
 800c22c:	463e      	mov	r6, r7
 800c22e:	6820      	ldr	r0, [r4, #0]
 800c230:	4632      	mov	r2, r6
 800c232:	4641      	mov	r1, r8
 800c234:	f000 fd78 	bl	800cd28 <memmove>
 800c238:	68a3      	ldr	r3, [r4, #8]
 800c23a:	1b9b      	subs	r3, r3, r6
 800c23c:	60a3      	str	r3, [r4, #8]
 800c23e:	6823      	ldr	r3, [r4, #0]
 800c240:	4433      	add	r3, r6
 800c242:	6023      	str	r3, [r4, #0]
 800c244:	2000      	movs	r0, #0
 800c246:	e7db      	b.n	800c200 <__ssputs_r+0x58>
 800c248:	462a      	mov	r2, r5
 800c24a:	f000 fd93 	bl	800cd74 <_realloc_r>
 800c24e:	4606      	mov	r6, r0
 800c250:	2800      	cmp	r0, #0
 800c252:	d1e1      	bne.n	800c218 <__ssputs_r+0x70>
 800c254:	6921      	ldr	r1, [r4, #16]
 800c256:	4650      	mov	r0, sl
 800c258:	f7ff fec6 	bl	800bfe8 <_free_r>
 800c25c:	e7c7      	b.n	800c1ee <__ssputs_r+0x46>
	...

0800c260 <_svfiprintf_r>:
 800c260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c264:	4698      	mov	r8, r3
 800c266:	898b      	ldrh	r3, [r1, #12]
 800c268:	061b      	lsls	r3, r3, #24
 800c26a:	b09d      	sub	sp, #116	; 0x74
 800c26c:	4607      	mov	r7, r0
 800c26e:	460d      	mov	r5, r1
 800c270:	4614      	mov	r4, r2
 800c272:	d50e      	bpl.n	800c292 <_svfiprintf_r+0x32>
 800c274:	690b      	ldr	r3, [r1, #16]
 800c276:	b963      	cbnz	r3, 800c292 <_svfiprintf_r+0x32>
 800c278:	2140      	movs	r1, #64	; 0x40
 800c27a:	f7ff ff21 	bl	800c0c0 <_malloc_r>
 800c27e:	6028      	str	r0, [r5, #0]
 800c280:	6128      	str	r0, [r5, #16]
 800c282:	b920      	cbnz	r0, 800c28e <_svfiprintf_r+0x2e>
 800c284:	230c      	movs	r3, #12
 800c286:	603b      	str	r3, [r7, #0]
 800c288:	f04f 30ff 	mov.w	r0, #4294967295
 800c28c:	e0d1      	b.n	800c432 <_svfiprintf_r+0x1d2>
 800c28e:	2340      	movs	r3, #64	; 0x40
 800c290:	616b      	str	r3, [r5, #20]
 800c292:	2300      	movs	r3, #0
 800c294:	9309      	str	r3, [sp, #36]	; 0x24
 800c296:	2320      	movs	r3, #32
 800c298:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c29c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2a0:	2330      	movs	r3, #48	; 0x30
 800c2a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c44c <_svfiprintf_r+0x1ec>
 800c2a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c2aa:	f04f 0901 	mov.w	r9, #1
 800c2ae:	4623      	mov	r3, r4
 800c2b0:	469a      	mov	sl, r3
 800c2b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2b6:	b10a      	cbz	r2, 800c2bc <_svfiprintf_r+0x5c>
 800c2b8:	2a25      	cmp	r2, #37	; 0x25
 800c2ba:	d1f9      	bne.n	800c2b0 <_svfiprintf_r+0x50>
 800c2bc:	ebba 0b04 	subs.w	fp, sl, r4
 800c2c0:	d00b      	beq.n	800c2da <_svfiprintf_r+0x7a>
 800c2c2:	465b      	mov	r3, fp
 800c2c4:	4622      	mov	r2, r4
 800c2c6:	4629      	mov	r1, r5
 800c2c8:	4638      	mov	r0, r7
 800c2ca:	f7ff ff6d 	bl	800c1a8 <__ssputs_r>
 800c2ce:	3001      	adds	r0, #1
 800c2d0:	f000 80aa 	beq.w	800c428 <_svfiprintf_r+0x1c8>
 800c2d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2d6:	445a      	add	r2, fp
 800c2d8:	9209      	str	r2, [sp, #36]	; 0x24
 800c2da:	f89a 3000 	ldrb.w	r3, [sl]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	f000 80a2 	beq.w	800c428 <_svfiprintf_r+0x1c8>
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	f04f 32ff 	mov.w	r2, #4294967295
 800c2ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2ee:	f10a 0a01 	add.w	sl, sl, #1
 800c2f2:	9304      	str	r3, [sp, #16]
 800c2f4:	9307      	str	r3, [sp, #28]
 800c2f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c2fa:	931a      	str	r3, [sp, #104]	; 0x68
 800c2fc:	4654      	mov	r4, sl
 800c2fe:	2205      	movs	r2, #5
 800c300:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c304:	4851      	ldr	r0, [pc, #324]	; (800c44c <_svfiprintf_r+0x1ec>)
 800c306:	f7f3 ffa3 	bl	8000250 <memchr>
 800c30a:	9a04      	ldr	r2, [sp, #16]
 800c30c:	b9d8      	cbnz	r0, 800c346 <_svfiprintf_r+0xe6>
 800c30e:	06d0      	lsls	r0, r2, #27
 800c310:	bf44      	itt	mi
 800c312:	2320      	movmi	r3, #32
 800c314:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c318:	0711      	lsls	r1, r2, #28
 800c31a:	bf44      	itt	mi
 800c31c:	232b      	movmi	r3, #43	; 0x2b
 800c31e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c322:	f89a 3000 	ldrb.w	r3, [sl]
 800c326:	2b2a      	cmp	r3, #42	; 0x2a
 800c328:	d015      	beq.n	800c356 <_svfiprintf_r+0xf6>
 800c32a:	9a07      	ldr	r2, [sp, #28]
 800c32c:	4654      	mov	r4, sl
 800c32e:	2000      	movs	r0, #0
 800c330:	f04f 0c0a 	mov.w	ip, #10
 800c334:	4621      	mov	r1, r4
 800c336:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c33a:	3b30      	subs	r3, #48	; 0x30
 800c33c:	2b09      	cmp	r3, #9
 800c33e:	d94e      	bls.n	800c3de <_svfiprintf_r+0x17e>
 800c340:	b1b0      	cbz	r0, 800c370 <_svfiprintf_r+0x110>
 800c342:	9207      	str	r2, [sp, #28]
 800c344:	e014      	b.n	800c370 <_svfiprintf_r+0x110>
 800c346:	eba0 0308 	sub.w	r3, r0, r8
 800c34a:	fa09 f303 	lsl.w	r3, r9, r3
 800c34e:	4313      	orrs	r3, r2
 800c350:	9304      	str	r3, [sp, #16]
 800c352:	46a2      	mov	sl, r4
 800c354:	e7d2      	b.n	800c2fc <_svfiprintf_r+0x9c>
 800c356:	9b03      	ldr	r3, [sp, #12]
 800c358:	1d19      	adds	r1, r3, #4
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	9103      	str	r1, [sp, #12]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	bfbb      	ittet	lt
 800c362:	425b      	neglt	r3, r3
 800c364:	f042 0202 	orrlt.w	r2, r2, #2
 800c368:	9307      	strge	r3, [sp, #28]
 800c36a:	9307      	strlt	r3, [sp, #28]
 800c36c:	bfb8      	it	lt
 800c36e:	9204      	strlt	r2, [sp, #16]
 800c370:	7823      	ldrb	r3, [r4, #0]
 800c372:	2b2e      	cmp	r3, #46	; 0x2e
 800c374:	d10c      	bne.n	800c390 <_svfiprintf_r+0x130>
 800c376:	7863      	ldrb	r3, [r4, #1]
 800c378:	2b2a      	cmp	r3, #42	; 0x2a
 800c37a:	d135      	bne.n	800c3e8 <_svfiprintf_r+0x188>
 800c37c:	9b03      	ldr	r3, [sp, #12]
 800c37e:	1d1a      	adds	r2, r3, #4
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	9203      	str	r2, [sp, #12]
 800c384:	2b00      	cmp	r3, #0
 800c386:	bfb8      	it	lt
 800c388:	f04f 33ff 	movlt.w	r3, #4294967295
 800c38c:	3402      	adds	r4, #2
 800c38e:	9305      	str	r3, [sp, #20]
 800c390:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c45c <_svfiprintf_r+0x1fc>
 800c394:	7821      	ldrb	r1, [r4, #0]
 800c396:	2203      	movs	r2, #3
 800c398:	4650      	mov	r0, sl
 800c39a:	f7f3 ff59 	bl	8000250 <memchr>
 800c39e:	b140      	cbz	r0, 800c3b2 <_svfiprintf_r+0x152>
 800c3a0:	2340      	movs	r3, #64	; 0x40
 800c3a2:	eba0 000a 	sub.w	r0, r0, sl
 800c3a6:	fa03 f000 	lsl.w	r0, r3, r0
 800c3aa:	9b04      	ldr	r3, [sp, #16]
 800c3ac:	4303      	orrs	r3, r0
 800c3ae:	3401      	adds	r4, #1
 800c3b0:	9304      	str	r3, [sp, #16]
 800c3b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3b6:	4826      	ldr	r0, [pc, #152]	; (800c450 <_svfiprintf_r+0x1f0>)
 800c3b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c3bc:	2206      	movs	r2, #6
 800c3be:	f7f3 ff47 	bl	8000250 <memchr>
 800c3c2:	2800      	cmp	r0, #0
 800c3c4:	d038      	beq.n	800c438 <_svfiprintf_r+0x1d8>
 800c3c6:	4b23      	ldr	r3, [pc, #140]	; (800c454 <_svfiprintf_r+0x1f4>)
 800c3c8:	bb1b      	cbnz	r3, 800c412 <_svfiprintf_r+0x1b2>
 800c3ca:	9b03      	ldr	r3, [sp, #12]
 800c3cc:	3307      	adds	r3, #7
 800c3ce:	f023 0307 	bic.w	r3, r3, #7
 800c3d2:	3308      	adds	r3, #8
 800c3d4:	9303      	str	r3, [sp, #12]
 800c3d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3d8:	4433      	add	r3, r6
 800c3da:	9309      	str	r3, [sp, #36]	; 0x24
 800c3dc:	e767      	b.n	800c2ae <_svfiprintf_r+0x4e>
 800c3de:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3e2:	460c      	mov	r4, r1
 800c3e4:	2001      	movs	r0, #1
 800c3e6:	e7a5      	b.n	800c334 <_svfiprintf_r+0xd4>
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	3401      	adds	r4, #1
 800c3ec:	9305      	str	r3, [sp, #20]
 800c3ee:	4619      	mov	r1, r3
 800c3f0:	f04f 0c0a 	mov.w	ip, #10
 800c3f4:	4620      	mov	r0, r4
 800c3f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3fa:	3a30      	subs	r2, #48	; 0x30
 800c3fc:	2a09      	cmp	r2, #9
 800c3fe:	d903      	bls.n	800c408 <_svfiprintf_r+0x1a8>
 800c400:	2b00      	cmp	r3, #0
 800c402:	d0c5      	beq.n	800c390 <_svfiprintf_r+0x130>
 800c404:	9105      	str	r1, [sp, #20]
 800c406:	e7c3      	b.n	800c390 <_svfiprintf_r+0x130>
 800c408:	fb0c 2101 	mla	r1, ip, r1, r2
 800c40c:	4604      	mov	r4, r0
 800c40e:	2301      	movs	r3, #1
 800c410:	e7f0      	b.n	800c3f4 <_svfiprintf_r+0x194>
 800c412:	ab03      	add	r3, sp, #12
 800c414:	9300      	str	r3, [sp, #0]
 800c416:	462a      	mov	r2, r5
 800c418:	4b0f      	ldr	r3, [pc, #60]	; (800c458 <_svfiprintf_r+0x1f8>)
 800c41a:	a904      	add	r1, sp, #16
 800c41c:	4638      	mov	r0, r7
 800c41e:	f7fd fe7f 	bl	800a120 <_printf_float>
 800c422:	1c42      	adds	r2, r0, #1
 800c424:	4606      	mov	r6, r0
 800c426:	d1d6      	bne.n	800c3d6 <_svfiprintf_r+0x176>
 800c428:	89ab      	ldrh	r3, [r5, #12]
 800c42a:	065b      	lsls	r3, r3, #25
 800c42c:	f53f af2c 	bmi.w	800c288 <_svfiprintf_r+0x28>
 800c430:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c432:	b01d      	add	sp, #116	; 0x74
 800c434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c438:	ab03      	add	r3, sp, #12
 800c43a:	9300      	str	r3, [sp, #0]
 800c43c:	462a      	mov	r2, r5
 800c43e:	4b06      	ldr	r3, [pc, #24]	; (800c458 <_svfiprintf_r+0x1f8>)
 800c440:	a904      	add	r1, sp, #16
 800c442:	4638      	mov	r0, r7
 800c444:	f7fe f910 	bl	800a668 <_printf_i>
 800c448:	e7eb      	b.n	800c422 <_svfiprintf_r+0x1c2>
 800c44a:	bf00      	nop
 800c44c:	0800d814 	.word	0x0800d814
 800c450:	0800d81e 	.word	0x0800d81e
 800c454:	0800a121 	.word	0x0800a121
 800c458:	0800c1a9 	.word	0x0800c1a9
 800c45c:	0800d81a 	.word	0x0800d81a

0800c460 <__sfputc_r>:
 800c460:	6893      	ldr	r3, [r2, #8]
 800c462:	3b01      	subs	r3, #1
 800c464:	2b00      	cmp	r3, #0
 800c466:	b410      	push	{r4}
 800c468:	6093      	str	r3, [r2, #8]
 800c46a:	da08      	bge.n	800c47e <__sfputc_r+0x1e>
 800c46c:	6994      	ldr	r4, [r2, #24]
 800c46e:	42a3      	cmp	r3, r4
 800c470:	db01      	blt.n	800c476 <__sfputc_r+0x16>
 800c472:	290a      	cmp	r1, #10
 800c474:	d103      	bne.n	800c47e <__sfputc_r+0x1e>
 800c476:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c47a:	f000 b95b 	b.w	800c734 <__swbuf_r>
 800c47e:	6813      	ldr	r3, [r2, #0]
 800c480:	1c58      	adds	r0, r3, #1
 800c482:	6010      	str	r0, [r2, #0]
 800c484:	7019      	strb	r1, [r3, #0]
 800c486:	4608      	mov	r0, r1
 800c488:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c48c:	4770      	bx	lr

0800c48e <__sfputs_r>:
 800c48e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c490:	4606      	mov	r6, r0
 800c492:	460f      	mov	r7, r1
 800c494:	4614      	mov	r4, r2
 800c496:	18d5      	adds	r5, r2, r3
 800c498:	42ac      	cmp	r4, r5
 800c49a:	d101      	bne.n	800c4a0 <__sfputs_r+0x12>
 800c49c:	2000      	movs	r0, #0
 800c49e:	e007      	b.n	800c4b0 <__sfputs_r+0x22>
 800c4a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4a4:	463a      	mov	r2, r7
 800c4a6:	4630      	mov	r0, r6
 800c4a8:	f7ff ffda 	bl	800c460 <__sfputc_r>
 800c4ac:	1c43      	adds	r3, r0, #1
 800c4ae:	d1f3      	bne.n	800c498 <__sfputs_r+0xa>
 800c4b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c4b4 <_vfiprintf_r>:
 800c4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4b8:	460d      	mov	r5, r1
 800c4ba:	b09d      	sub	sp, #116	; 0x74
 800c4bc:	4614      	mov	r4, r2
 800c4be:	4698      	mov	r8, r3
 800c4c0:	4606      	mov	r6, r0
 800c4c2:	b118      	cbz	r0, 800c4cc <_vfiprintf_r+0x18>
 800c4c4:	6983      	ldr	r3, [r0, #24]
 800c4c6:	b90b      	cbnz	r3, 800c4cc <_vfiprintf_r+0x18>
 800c4c8:	f000 fb16 	bl	800caf8 <__sinit>
 800c4cc:	4b89      	ldr	r3, [pc, #548]	; (800c6f4 <_vfiprintf_r+0x240>)
 800c4ce:	429d      	cmp	r5, r3
 800c4d0:	d11b      	bne.n	800c50a <_vfiprintf_r+0x56>
 800c4d2:	6875      	ldr	r5, [r6, #4]
 800c4d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c4d6:	07d9      	lsls	r1, r3, #31
 800c4d8:	d405      	bmi.n	800c4e6 <_vfiprintf_r+0x32>
 800c4da:	89ab      	ldrh	r3, [r5, #12]
 800c4dc:	059a      	lsls	r2, r3, #22
 800c4de:	d402      	bmi.n	800c4e6 <_vfiprintf_r+0x32>
 800c4e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c4e2:	f000 fba7 	bl	800cc34 <__retarget_lock_acquire_recursive>
 800c4e6:	89ab      	ldrh	r3, [r5, #12]
 800c4e8:	071b      	lsls	r3, r3, #28
 800c4ea:	d501      	bpl.n	800c4f0 <_vfiprintf_r+0x3c>
 800c4ec:	692b      	ldr	r3, [r5, #16]
 800c4ee:	b9eb      	cbnz	r3, 800c52c <_vfiprintf_r+0x78>
 800c4f0:	4629      	mov	r1, r5
 800c4f2:	4630      	mov	r0, r6
 800c4f4:	f000 f970 	bl	800c7d8 <__swsetup_r>
 800c4f8:	b1c0      	cbz	r0, 800c52c <_vfiprintf_r+0x78>
 800c4fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c4fc:	07dc      	lsls	r4, r3, #31
 800c4fe:	d50e      	bpl.n	800c51e <_vfiprintf_r+0x6a>
 800c500:	f04f 30ff 	mov.w	r0, #4294967295
 800c504:	b01d      	add	sp, #116	; 0x74
 800c506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c50a:	4b7b      	ldr	r3, [pc, #492]	; (800c6f8 <_vfiprintf_r+0x244>)
 800c50c:	429d      	cmp	r5, r3
 800c50e:	d101      	bne.n	800c514 <_vfiprintf_r+0x60>
 800c510:	68b5      	ldr	r5, [r6, #8]
 800c512:	e7df      	b.n	800c4d4 <_vfiprintf_r+0x20>
 800c514:	4b79      	ldr	r3, [pc, #484]	; (800c6fc <_vfiprintf_r+0x248>)
 800c516:	429d      	cmp	r5, r3
 800c518:	bf08      	it	eq
 800c51a:	68f5      	ldreq	r5, [r6, #12]
 800c51c:	e7da      	b.n	800c4d4 <_vfiprintf_r+0x20>
 800c51e:	89ab      	ldrh	r3, [r5, #12]
 800c520:	0598      	lsls	r0, r3, #22
 800c522:	d4ed      	bmi.n	800c500 <_vfiprintf_r+0x4c>
 800c524:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c526:	f000 fb86 	bl	800cc36 <__retarget_lock_release_recursive>
 800c52a:	e7e9      	b.n	800c500 <_vfiprintf_r+0x4c>
 800c52c:	2300      	movs	r3, #0
 800c52e:	9309      	str	r3, [sp, #36]	; 0x24
 800c530:	2320      	movs	r3, #32
 800c532:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c536:	f8cd 800c 	str.w	r8, [sp, #12]
 800c53a:	2330      	movs	r3, #48	; 0x30
 800c53c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c700 <_vfiprintf_r+0x24c>
 800c540:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c544:	f04f 0901 	mov.w	r9, #1
 800c548:	4623      	mov	r3, r4
 800c54a:	469a      	mov	sl, r3
 800c54c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c550:	b10a      	cbz	r2, 800c556 <_vfiprintf_r+0xa2>
 800c552:	2a25      	cmp	r2, #37	; 0x25
 800c554:	d1f9      	bne.n	800c54a <_vfiprintf_r+0x96>
 800c556:	ebba 0b04 	subs.w	fp, sl, r4
 800c55a:	d00b      	beq.n	800c574 <_vfiprintf_r+0xc0>
 800c55c:	465b      	mov	r3, fp
 800c55e:	4622      	mov	r2, r4
 800c560:	4629      	mov	r1, r5
 800c562:	4630      	mov	r0, r6
 800c564:	f7ff ff93 	bl	800c48e <__sfputs_r>
 800c568:	3001      	adds	r0, #1
 800c56a:	f000 80aa 	beq.w	800c6c2 <_vfiprintf_r+0x20e>
 800c56e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c570:	445a      	add	r2, fp
 800c572:	9209      	str	r2, [sp, #36]	; 0x24
 800c574:	f89a 3000 	ldrb.w	r3, [sl]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	f000 80a2 	beq.w	800c6c2 <_vfiprintf_r+0x20e>
 800c57e:	2300      	movs	r3, #0
 800c580:	f04f 32ff 	mov.w	r2, #4294967295
 800c584:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c588:	f10a 0a01 	add.w	sl, sl, #1
 800c58c:	9304      	str	r3, [sp, #16]
 800c58e:	9307      	str	r3, [sp, #28]
 800c590:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c594:	931a      	str	r3, [sp, #104]	; 0x68
 800c596:	4654      	mov	r4, sl
 800c598:	2205      	movs	r2, #5
 800c59a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c59e:	4858      	ldr	r0, [pc, #352]	; (800c700 <_vfiprintf_r+0x24c>)
 800c5a0:	f7f3 fe56 	bl	8000250 <memchr>
 800c5a4:	9a04      	ldr	r2, [sp, #16]
 800c5a6:	b9d8      	cbnz	r0, 800c5e0 <_vfiprintf_r+0x12c>
 800c5a8:	06d1      	lsls	r1, r2, #27
 800c5aa:	bf44      	itt	mi
 800c5ac:	2320      	movmi	r3, #32
 800c5ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5b2:	0713      	lsls	r3, r2, #28
 800c5b4:	bf44      	itt	mi
 800c5b6:	232b      	movmi	r3, #43	; 0x2b
 800c5b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5bc:	f89a 3000 	ldrb.w	r3, [sl]
 800c5c0:	2b2a      	cmp	r3, #42	; 0x2a
 800c5c2:	d015      	beq.n	800c5f0 <_vfiprintf_r+0x13c>
 800c5c4:	9a07      	ldr	r2, [sp, #28]
 800c5c6:	4654      	mov	r4, sl
 800c5c8:	2000      	movs	r0, #0
 800c5ca:	f04f 0c0a 	mov.w	ip, #10
 800c5ce:	4621      	mov	r1, r4
 800c5d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5d4:	3b30      	subs	r3, #48	; 0x30
 800c5d6:	2b09      	cmp	r3, #9
 800c5d8:	d94e      	bls.n	800c678 <_vfiprintf_r+0x1c4>
 800c5da:	b1b0      	cbz	r0, 800c60a <_vfiprintf_r+0x156>
 800c5dc:	9207      	str	r2, [sp, #28]
 800c5de:	e014      	b.n	800c60a <_vfiprintf_r+0x156>
 800c5e0:	eba0 0308 	sub.w	r3, r0, r8
 800c5e4:	fa09 f303 	lsl.w	r3, r9, r3
 800c5e8:	4313      	orrs	r3, r2
 800c5ea:	9304      	str	r3, [sp, #16]
 800c5ec:	46a2      	mov	sl, r4
 800c5ee:	e7d2      	b.n	800c596 <_vfiprintf_r+0xe2>
 800c5f0:	9b03      	ldr	r3, [sp, #12]
 800c5f2:	1d19      	adds	r1, r3, #4
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	9103      	str	r1, [sp, #12]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	bfbb      	ittet	lt
 800c5fc:	425b      	neglt	r3, r3
 800c5fe:	f042 0202 	orrlt.w	r2, r2, #2
 800c602:	9307      	strge	r3, [sp, #28]
 800c604:	9307      	strlt	r3, [sp, #28]
 800c606:	bfb8      	it	lt
 800c608:	9204      	strlt	r2, [sp, #16]
 800c60a:	7823      	ldrb	r3, [r4, #0]
 800c60c:	2b2e      	cmp	r3, #46	; 0x2e
 800c60e:	d10c      	bne.n	800c62a <_vfiprintf_r+0x176>
 800c610:	7863      	ldrb	r3, [r4, #1]
 800c612:	2b2a      	cmp	r3, #42	; 0x2a
 800c614:	d135      	bne.n	800c682 <_vfiprintf_r+0x1ce>
 800c616:	9b03      	ldr	r3, [sp, #12]
 800c618:	1d1a      	adds	r2, r3, #4
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	9203      	str	r2, [sp, #12]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	bfb8      	it	lt
 800c622:	f04f 33ff 	movlt.w	r3, #4294967295
 800c626:	3402      	adds	r4, #2
 800c628:	9305      	str	r3, [sp, #20]
 800c62a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c710 <_vfiprintf_r+0x25c>
 800c62e:	7821      	ldrb	r1, [r4, #0]
 800c630:	2203      	movs	r2, #3
 800c632:	4650      	mov	r0, sl
 800c634:	f7f3 fe0c 	bl	8000250 <memchr>
 800c638:	b140      	cbz	r0, 800c64c <_vfiprintf_r+0x198>
 800c63a:	2340      	movs	r3, #64	; 0x40
 800c63c:	eba0 000a 	sub.w	r0, r0, sl
 800c640:	fa03 f000 	lsl.w	r0, r3, r0
 800c644:	9b04      	ldr	r3, [sp, #16]
 800c646:	4303      	orrs	r3, r0
 800c648:	3401      	adds	r4, #1
 800c64a:	9304      	str	r3, [sp, #16]
 800c64c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c650:	482c      	ldr	r0, [pc, #176]	; (800c704 <_vfiprintf_r+0x250>)
 800c652:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c656:	2206      	movs	r2, #6
 800c658:	f7f3 fdfa 	bl	8000250 <memchr>
 800c65c:	2800      	cmp	r0, #0
 800c65e:	d03f      	beq.n	800c6e0 <_vfiprintf_r+0x22c>
 800c660:	4b29      	ldr	r3, [pc, #164]	; (800c708 <_vfiprintf_r+0x254>)
 800c662:	bb1b      	cbnz	r3, 800c6ac <_vfiprintf_r+0x1f8>
 800c664:	9b03      	ldr	r3, [sp, #12]
 800c666:	3307      	adds	r3, #7
 800c668:	f023 0307 	bic.w	r3, r3, #7
 800c66c:	3308      	adds	r3, #8
 800c66e:	9303      	str	r3, [sp, #12]
 800c670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c672:	443b      	add	r3, r7
 800c674:	9309      	str	r3, [sp, #36]	; 0x24
 800c676:	e767      	b.n	800c548 <_vfiprintf_r+0x94>
 800c678:	fb0c 3202 	mla	r2, ip, r2, r3
 800c67c:	460c      	mov	r4, r1
 800c67e:	2001      	movs	r0, #1
 800c680:	e7a5      	b.n	800c5ce <_vfiprintf_r+0x11a>
 800c682:	2300      	movs	r3, #0
 800c684:	3401      	adds	r4, #1
 800c686:	9305      	str	r3, [sp, #20]
 800c688:	4619      	mov	r1, r3
 800c68a:	f04f 0c0a 	mov.w	ip, #10
 800c68e:	4620      	mov	r0, r4
 800c690:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c694:	3a30      	subs	r2, #48	; 0x30
 800c696:	2a09      	cmp	r2, #9
 800c698:	d903      	bls.n	800c6a2 <_vfiprintf_r+0x1ee>
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d0c5      	beq.n	800c62a <_vfiprintf_r+0x176>
 800c69e:	9105      	str	r1, [sp, #20]
 800c6a0:	e7c3      	b.n	800c62a <_vfiprintf_r+0x176>
 800c6a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6a6:	4604      	mov	r4, r0
 800c6a8:	2301      	movs	r3, #1
 800c6aa:	e7f0      	b.n	800c68e <_vfiprintf_r+0x1da>
 800c6ac:	ab03      	add	r3, sp, #12
 800c6ae:	9300      	str	r3, [sp, #0]
 800c6b0:	462a      	mov	r2, r5
 800c6b2:	4b16      	ldr	r3, [pc, #88]	; (800c70c <_vfiprintf_r+0x258>)
 800c6b4:	a904      	add	r1, sp, #16
 800c6b6:	4630      	mov	r0, r6
 800c6b8:	f7fd fd32 	bl	800a120 <_printf_float>
 800c6bc:	4607      	mov	r7, r0
 800c6be:	1c78      	adds	r0, r7, #1
 800c6c0:	d1d6      	bne.n	800c670 <_vfiprintf_r+0x1bc>
 800c6c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6c4:	07d9      	lsls	r1, r3, #31
 800c6c6:	d405      	bmi.n	800c6d4 <_vfiprintf_r+0x220>
 800c6c8:	89ab      	ldrh	r3, [r5, #12]
 800c6ca:	059a      	lsls	r2, r3, #22
 800c6cc:	d402      	bmi.n	800c6d4 <_vfiprintf_r+0x220>
 800c6ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6d0:	f000 fab1 	bl	800cc36 <__retarget_lock_release_recursive>
 800c6d4:	89ab      	ldrh	r3, [r5, #12]
 800c6d6:	065b      	lsls	r3, r3, #25
 800c6d8:	f53f af12 	bmi.w	800c500 <_vfiprintf_r+0x4c>
 800c6dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c6de:	e711      	b.n	800c504 <_vfiprintf_r+0x50>
 800c6e0:	ab03      	add	r3, sp, #12
 800c6e2:	9300      	str	r3, [sp, #0]
 800c6e4:	462a      	mov	r2, r5
 800c6e6:	4b09      	ldr	r3, [pc, #36]	; (800c70c <_vfiprintf_r+0x258>)
 800c6e8:	a904      	add	r1, sp, #16
 800c6ea:	4630      	mov	r0, r6
 800c6ec:	f7fd ffbc 	bl	800a668 <_printf_i>
 800c6f0:	e7e4      	b.n	800c6bc <_vfiprintf_r+0x208>
 800c6f2:	bf00      	nop
 800c6f4:	0800d848 	.word	0x0800d848
 800c6f8:	0800d868 	.word	0x0800d868
 800c6fc:	0800d828 	.word	0x0800d828
 800c700:	0800d814 	.word	0x0800d814
 800c704:	0800d81e 	.word	0x0800d81e
 800c708:	0800a121 	.word	0x0800a121
 800c70c:	0800c48f 	.word	0x0800c48f
 800c710:	0800d81a 	.word	0x0800d81a

0800c714 <_sbrk_r>:
 800c714:	b538      	push	{r3, r4, r5, lr}
 800c716:	4d06      	ldr	r5, [pc, #24]	; (800c730 <_sbrk_r+0x1c>)
 800c718:	2300      	movs	r3, #0
 800c71a:	4604      	mov	r4, r0
 800c71c:	4608      	mov	r0, r1
 800c71e:	602b      	str	r3, [r5, #0]
 800c720:	f7f5 fe60 	bl	80023e4 <_sbrk>
 800c724:	1c43      	adds	r3, r0, #1
 800c726:	d102      	bne.n	800c72e <_sbrk_r+0x1a>
 800c728:	682b      	ldr	r3, [r5, #0]
 800c72a:	b103      	cbz	r3, 800c72e <_sbrk_r+0x1a>
 800c72c:	6023      	str	r3, [r4, #0]
 800c72e:	bd38      	pop	{r3, r4, r5, pc}
 800c730:	200006b4 	.word	0x200006b4

0800c734 <__swbuf_r>:
 800c734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c736:	460e      	mov	r6, r1
 800c738:	4614      	mov	r4, r2
 800c73a:	4605      	mov	r5, r0
 800c73c:	b118      	cbz	r0, 800c746 <__swbuf_r+0x12>
 800c73e:	6983      	ldr	r3, [r0, #24]
 800c740:	b90b      	cbnz	r3, 800c746 <__swbuf_r+0x12>
 800c742:	f000 f9d9 	bl	800caf8 <__sinit>
 800c746:	4b21      	ldr	r3, [pc, #132]	; (800c7cc <__swbuf_r+0x98>)
 800c748:	429c      	cmp	r4, r3
 800c74a:	d12b      	bne.n	800c7a4 <__swbuf_r+0x70>
 800c74c:	686c      	ldr	r4, [r5, #4]
 800c74e:	69a3      	ldr	r3, [r4, #24]
 800c750:	60a3      	str	r3, [r4, #8]
 800c752:	89a3      	ldrh	r3, [r4, #12]
 800c754:	071a      	lsls	r2, r3, #28
 800c756:	d52f      	bpl.n	800c7b8 <__swbuf_r+0x84>
 800c758:	6923      	ldr	r3, [r4, #16]
 800c75a:	b36b      	cbz	r3, 800c7b8 <__swbuf_r+0x84>
 800c75c:	6923      	ldr	r3, [r4, #16]
 800c75e:	6820      	ldr	r0, [r4, #0]
 800c760:	1ac0      	subs	r0, r0, r3
 800c762:	6963      	ldr	r3, [r4, #20]
 800c764:	b2f6      	uxtb	r6, r6
 800c766:	4283      	cmp	r3, r0
 800c768:	4637      	mov	r7, r6
 800c76a:	dc04      	bgt.n	800c776 <__swbuf_r+0x42>
 800c76c:	4621      	mov	r1, r4
 800c76e:	4628      	mov	r0, r5
 800c770:	f000 f92e 	bl	800c9d0 <_fflush_r>
 800c774:	bb30      	cbnz	r0, 800c7c4 <__swbuf_r+0x90>
 800c776:	68a3      	ldr	r3, [r4, #8]
 800c778:	3b01      	subs	r3, #1
 800c77a:	60a3      	str	r3, [r4, #8]
 800c77c:	6823      	ldr	r3, [r4, #0]
 800c77e:	1c5a      	adds	r2, r3, #1
 800c780:	6022      	str	r2, [r4, #0]
 800c782:	701e      	strb	r6, [r3, #0]
 800c784:	6963      	ldr	r3, [r4, #20]
 800c786:	3001      	adds	r0, #1
 800c788:	4283      	cmp	r3, r0
 800c78a:	d004      	beq.n	800c796 <__swbuf_r+0x62>
 800c78c:	89a3      	ldrh	r3, [r4, #12]
 800c78e:	07db      	lsls	r3, r3, #31
 800c790:	d506      	bpl.n	800c7a0 <__swbuf_r+0x6c>
 800c792:	2e0a      	cmp	r6, #10
 800c794:	d104      	bne.n	800c7a0 <__swbuf_r+0x6c>
 800c796:	4621      	mov	r1, r4
 800c798:	4628      	mov	r0, r5
 800c79a:	f000 f919 	bl	800c9d0 <_fflush_r>
 800c79e:	b988      	cbnz	r0, 800c7c4 <__swbuf_r+0x90>
 800c7a0:	4638      	mov	r0, r7
 800c7a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7a4:	4b0a      	ldr	r3, [pc, #40]	; (800c7d0 <__swbuf_r+0x9c>)
 800c7a6:	429c      	cmp	r4, r3
 800c7a8:	d101      	bne.n	800c7ae <__swbuf_r+0x7a>
 800c7aa:	68ac      	ldr	r4, [r5, #8]
 800c7ac:	e7cf      	b.n	800c74e <__swbuf_r+0x1a>
 800c7ae:	4b09      	ldr	r3, [pc, #36]	; (800c7d4 <__swbuf_r+0xa0>)
 800c7b0:	429c      	cmp	r4, r3
 800c7b2:	bf08      	it	eq
 800c7b4:	68ec      	ldreq	r4, [r5, #12]
 800c7b6:	e7ca      	b.n	800c74e <__swbuf_r+0x1a>
 800c7b8:	4621      	mov	r1, r4
 800c7ba:	4628      	mov	r0, r5
 800c7bc:	f000 f80c 	bl	800c7d8 <__swsetup_r>
 800c7c0:	2800      	cmp	r0, #0
 800c7c2:	d0cb      	beq.n	800c75c <__swbuf_r+0x28>
 800c7c4:	f04f 37ff 	mov.w	r7, #4294967295
 800c7c8:	e7ea      	b.n	800c7a0 <__swbuf_r+0x6c>
 800c7ca:	bf00      	nop
 800c7cc:	0800d848 	.word	0x0800d848
 800c7d0:	0800d868 	.word	0x0800d868
 800c7d4:	0800d828 	.word	0x0800d828

0800c7d8 <__swsetup_r>:
 800c7d8:	4b32      	ldr	r3, [pc, #200]	; (800c8a4 <__swsetup_r+0xcc>)
 800c7da:	b570      	push	{r4, r5, r6, lr}
 800c7dc:	681d      	ldr	r5, [r3, #0]
 800c7de:	4606      	mov	r6, r0
 800c7e0:	460c      	mov	r4, r1
 800c7e2:	b125      	cbz	r5, 800c7ee <__swsetup_r+0x16>
 800c7e4:	69ab      	ldr	r3, [r5, #24]
 800c7e6:	b913      	cbnz	r3, 800c7ee <__swsetup_r+0x16>
 800c7e8:	4628      	mov	r0, r5
 800c7ea:	f000 f985 	bl	800caf8 <__sinit>
 800c7ee:	4b2e      	ldr	r3, [pc, #184]	; (800c8a8 <__swsetup_r+0xd0>)
 800c7f0:	429c      	cmp	r4, r3
 800c7f2:	d10f      	bne.n	800c814 <__swsetup_r+0x3c>
 800c7f4:	686c      	ldr	r4, [r5, #4]
 800c7f6:	89a3      	ldrh	r3, [r4, #12]
 800c7f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c7fc:	0719      	lsls	r1, r3, #28
 800c7fe:	d42c      	bmi.n	800c85a <__swsetup_r+0x82>
 800c800:	06dd      	lsls	r5, r3, #27
 800c802:	d411      	bmi.n	800c828 <__swsetup_r+0x50>
 800c804:	2309      	movs	r3, #9
 800c806:	6033      	str	r3, [r6, #0]
 800c808:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c80c:	81a3      	strh	r3, [r4, #12]
 800c80e:	f04f 30ff 	mov.w	r0, #4294967295
 800c812:	e03e      	b.n	800c892 <__swsetup_r+0xba>
 800c814:	4b25      	ldr	r3, [pc, #148]	; (800c8ac <__swsetup_r+0xd4>)
 800c816:	429c      	cmp	r4, r3
 800c818:	d101      	bne.n	800c81e <__swsetup_r+0x46>
 800c81a:	68ac      	ldr	r4, [r5, #8]
 800c81c:	e7eb      	b.n	800c7f6 <__swsetup_r+0x1e>
 800c81e:	4b24      	ldr	r3, [pc, #144]	; (800c8b0 <__swsetup_r+0xd8>)
 800c820:	429c      	cmp	r4, r3
 800c822:	bf08      	it	eq
 800c824:	68ec      	ldreq	r4, [r5, #12]
 800c826:	e7e6      	b.n	800c7f6 <__swsetup_r+0x1e>
 800c828:	0758      	lsls	r0, r3, #29
 800c82a:	d512      	bpl.n	800c852 <__swsetup_r+0x7a>
 800c82c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c82e:	b141      	cbz	r1, 800c842 <__swsetup_r+0x6a>
 800c830:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c834:	4299      	cmp	r1, r3
 800c836:	d002      	beq.n	800c83e <__swsetup_r+0x66>
 800c838:	4630      	mov	r0, r6
 800c83a:	f7ff fbd5 	bl	800bfe8 <_free_r>
 800c83e:	2300      	movs	r3, #0
 800c840:	6363      	str	r3, [r4, #52]	; 0x34
 800c842:	89a3      	ldrh	r3, [r4, #12]
 800c844:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c848:	81a3      	strh	r3, [r4, #12]
 800c84a:	2300      	movs	r3, #0
 800c84c:	6063      	str	r3, [r4, #4]
 800c84e:	6923      	ldr	r3, [r4, #16]
 800c850:	6023      	str	r3, [r4, #0]
 800c852:	89a3      	ldrh	r3, [r4, #12]
 800c854:	f043 0308 	orr.w	r3, r3, #8
 800c858:	81a3      	strh	r3, [r4, #12]
 800c85a:	6923      	ldr	r3, [r4, #16]
 800c85c:	b94b      	cbnz	r3, 800c872 <__swsetup_r+0x9a>
 800c85e:	89a3      	ldrh	r3, [r4, #12]
 800c860:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c868:	d003      	beq.n	800c872 <__swsetup_r+0x9a>
 800c86a:	4621      	mov	r1, r4
 800c86c:	4630      	mov	r0, r6
 800c86e:	f000 fa09 	bl	800cc84 <__smakebuf_r>
 800c872:	89a0      	ldrh	r0, [r4, #12]
 800c874:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c878:	f010 0301 	ands.w	r3, r0, #1
 800c87c:	d00a      	beq.n	800c894 <__swsetup_r+0xbc>
 800c87e:	2300      	movs	r3, #0
 800c880:	60a3      	str	r3, [r4, #8]
 800c882:	6963      	ldr	r3, [r4, #20]
 800c884:	425b      	negs	r3, r3
 800c886:	61a3      	str	r3, [r4, #24]
 800c888:	6923      	ldr	r3, [r4, #16]
 800c88a:	b943      	cbnz	r3, 800c89e <__swsetup_r+0xc6>
 800c88c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c890:	d1ba      	bne.n	800c808 <__swsetup_r+0x30>
 800c892:	bd70      	pop	{r4, r5, r6, pc}
 800c894:	0781      	lsls	r1, r0, #30
 800c896:	bf58      	it	pl
 800c898:	6963      	ldrpl	r3, [r4, #20]
 800c89a:	60a3      	str	r3, [r4, #8]
 800c89c:	e7f4      	b.n	800c888 <__swsetup_r+0xb0>
 800c89e:	2000      	movs	r0, #0
 800c8a0:	e7f7      	b.n	800c892 <__swsetup_r+0xba>
 800c8a2:	bf00      	nop
 800c8a4:	2000000c 	.word	0x2000000c
 800c8a8:	0800d848 	.word	0x0800d848
 800c8ac:	0800d868 	.word	0x0800d868
 800c8b0:	0800d828 	.word	0x0800d828

0800c8b4 <abort>:
 800c8b4:	b508      	push	{r3, lr}
 800c8b6:	2006      	movs	r0, #6
 800c8b8:	f000 fab4 	bl	800ce24 <raise>
 800c8bc:	2001      	movs	r0, #1
 800c8be:	f7f5 fd19 	bl	80022f4 <_exit>
	...

0800c8c4 <__sflush_r>:
 800c8c4:	898a      	ldrh	r2, [r1, #12]
 800c8c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8ca:	4605      	mov	r5, r0
 800c8cc:	0710      	lsls	r0, r2, #28
 800c8ce:	460c      	mov	r4, r1
 800c8d0:	d458      	bmi.n	800c984 <__sflush_r+0xc0>
 800c8d2:	684b      	ldr	r3, [r1, #4]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	dc05      	bgt.n	800c8e4 <__sflush_r+0x20>
 800c8d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	dc02      	bgt.n	800c8e4 <__sflush_r+0x20>
 800c8de:	2000      	movs	r0, #0
 800c8e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c8e6:	2e00      	cmp	r6, #0
 800c8e8:	d0f9      	beq.n	800c8de <__sflush_r+0x1a>
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c8f0:	682f      	ldr	r7, [r5, #0]
 800c8f2:	602b      	str	r3, [r5, #0]
 800c8f4:	d032      	beq.n	800c95c <__sflush_r+0x98>
 800c8f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c8f8:	89a3      	ldrh	r3, [r4, #12]
 800c8fa:	075a      	lsls	r2, r3, #29
 800c8fc:	d505      	bpl.n	800c90a <__sflush_r+0x46>
 800c8fe:	6863      	ldr	r3, [r4, #4]
 800c900:	1ac0      	subs	r0, r0, r3
 800c902:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c904:	b10b      	cbz	r3, 800c90a <__sflush_r+0x46>
 800c906:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c908:	1ac0      	subs	r0, r0, r3
 800c90a:	2300      	movs	r3, #0
 800c90c:	4602      	mov	r2, r0
 800c90e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c910:	6a21      	ldr	r1, [r4, #32]
 800c912:	4628      	mov	r0, r5
 800c914:	47b0      	blx	r6
 800c916:	1c43      	adds	r3, r0, #1
 800c918:	89a3      	ldrh	r3, [r4, #12]
 800c91a:	d106      	bne.n	800c92a <__sflush_r+0x66>
 800c91c:	6829      	ldr	r1, [r5, #0]
 800c91e:	291d      	cmp	r1, #29
 800c920:	d82c      	bhi.n	800c97c <__sflush_r+0xb8>
 800c922:	4a2a      	ldr	r2, [pc, #168]	; (800c9cc <__sflush_r+0x108>)
 800c924:	40ca      	lsrs	r2, r1
 800c926:	07d6      	lsls	r6, r2, #31
 800c928:	d528      	bpl.n	800c97c <__sflush_r+0xb8>
 800c92a:	2200      	movs	r2, #0
 800c92c:	6062      	str	r2, [r4, #4]
 800c92e:	04d9      	lsls	r1, r3, #19
 800c930:	6922      	ldr	r2, [r4, #16]
 800c932:	6022      	str	r2, [r4, #0]
 800c934:	d504      	bpl.n	800c940 <__sflush_r+0x7c>
 800c936:	1c42      	adds	r2, r0, #1
 800c938:	d101      	bne.n	800c93e <__sflush_r+0x7a>
 800c93a:	682b      	ldr	r3, [r5, #0]
 800c93c:	b903      	cbnz	r3, 800c940 <__sflush_r+0x7c>
 800c93e:	6560      	str	r0, [r4, #84]	; 0x54
 800c940:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c942:	602f      	str	r7, [r5, #0]
 800c944:	2900      	cmp	r1, #0
 800c946:	d0ca      	beq.n	800c8de <__sflush_r+0x1a>
 800c948:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c94c:	4299      	cmp	r1, r3
 800c94e:	d002      	beq.n	800c956 <__sflush_r+0x92>
 800c950:	4628      	mov	r0, r5
 800c952:	f7ff fb49 	bl	800bfe8 <_free_r>
 800c956:	2000      	movs	r0, #0
 800c958:	6360      	str	r0, [r4, #52]	; 0x34
 800c95a:	e7c1      	b.n	800c8e0 <__sflush_r+0x1c>
 800c95c:	6a21      	ldr	r1, [r4, #32]
 800c95e:	2301      	movs	r3, #1
 800c960:	4628      	mov	r0, r5
 800c962:	47b0      	blx	r6
 800c964:	1c41      	adds	r1, r0, #1
 800c966:	d1c7      	bne.n	800c8f8 <__sflush_r+0x34>
 800c968:	682b      	ldr	r3, [r5, #0]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d0c4      	beq.n	800c8f8 <__sflush_r+0x34>
 800c96e:	2b1d      	cmp	r3, #29
 800c970:	d001      	beq.n	800c976 <__sflush_r+0xb2>
 800c972:	2b16      	cmp	r3, #22
 800c974:	d101      	bne.n	800c97a <__sflush_r+0xb6>
 800c976:	602f      	str	r7, [r5, #0]
 800c978:	e7b1      	b.n	800c8de <__sflush_r+0x1a>
 800c97a:	89a3      	ldrh	r3, [r4, #12]
 800c97c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c980:	81a3      	strh	r3, [r4, #12]
 800c982:	e7ad      	b.n	800c8e0 <__sflush_r+0x1c>
 800c984:	690f      	ldr	r7, [r1, #16]
 800c986:	2f00      	cmp	r7, #0
 800c988:	d0a9      	beq.n	800c8de <__sflush_r+0x1a>
 800c98a:	0793      	lsls	r3, r2, #30
 800c98c:	680e      	ldr	r6, [r1, #0]
 800c98e:	bf08      	it	eq
 800c990:	694b      	ldreq	r3, [r1, #20]
 800c992:	600f      	str	r7, [r1, #0]
 800c994:	bf18      	it	ne
 800c996:	2300      	movne	r3, #0
 800c998:	eba6 0807 	sub.w	r8, r6, r7
 800c99c:	608b      	str	r3, [r1, #8]
 800c99e:	f1b8 0f00 	cmp.w	r8, #0
 800c9a2:	dd9c      	ble.n	800c8de <__sflush_r+0x1a>
 800c9a4:	6a21      	ldr	r1, [r4, #32]
 800c9a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c9a8:	4643      	mov	r3, r8
 800c9aa:	463a      	mov	r2, r7
 800c9ac:	4628      	mov	r0, r5
 800c9ae:	47b0      	blx	r6
 800c9b0:	2800      	cmp	r0, #0
 800c9b2:	dc06      	bgt.n	800c9c2 <__sflush_r+0xfe>
 800c9b4:	89a3      	ldrh	r3, [r4, #12]
 800c9b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9ba:	81a3      	strh	r3, [r4, #12]
 800c9bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c9c0:	e78e      	b.n	800c8e0 <__sflush_r+0x1c>
 800c9c2:	4407      	add	r7, r0
 800c9c4:	eba8 0800 	sub.w	r8, r8, r0
 800c9c8:	e7e9      	b.n	800c99e <__sflush_r+0xda>
 800c9ca:	bf00      	nop
 800c9cc:	20400001 	.word	0x20400001

0800c9d0 <_fflush_r>:
 800c9d0:	b538      	push	{r3, r4, r5, lr}
 800c9d2:	690b      	ldr	r3, [r1, #16]
 800c9d4:	4605      	mov	r5, r0
 800c9d6:	460c      	mov	r4, r1
 800c9d8:	b913      	cbnz	r3, 800c9e0 <_fflush_r+0x10>
 800c9da:	2500      	movs	r5, #0
 800c9dc:	4628      	mov	r0, r5
 800c9de:	bd38      	pop	{r3, r4, r5, pc}
 800c9e0:	b118      	cbz	r0, 800c9ea <_fflush_r+0x1a>
 800c9e2:	6983      	ldr	r3, [r0, #24]
 800c9e4:	b90b      	cbnz	r3, 800c9ea <_fflush_r+0x1a>
 800c9e6:	f000 f887 	bl	800caf8 <__sinit>
 800c9ea:	4b14      	ldr	r3, [pc, #80]	; (800ca3c <_fflush_r+0x6c>)
 800c9ec:	429c      	cmp	r4, r3
 800c9ee:	d11b      	bne.n	800ca28 <_fflush_r+0x58>
 800c9f0:	686c      	ldr	r4, [r5, #4]
 800c9f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d0ef      	beq.n	800c9da <_fflush_r+0xa>
 800c9fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c9fc:	07d0      	lsls	r0, r2, #31
 800c9fe:	d404      	bmi.n	800ca0a <_fflush_r+0x3a>
 800ca00:	0599      	lsls	r1, r3, #22
 800ca02:	d402      	bmi.n	800ca0a <_fflush_r+0x3a>
 800ca04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca06:	f000 f915 	bl	800cc34 <__retarget_lock_acquire_recursive>
 800ca0a:	4628      	mov	r0, r5
 800ca0c:	4621      	mov	r1, r4
 800ca0e:	f7ff ff59 	bl	800c8c4 <__sflush_r>
 800ca12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca14:	07da      	lsls	r2, r3, #31
 800ca16:	4605      	mov	r5, r0
 800ca18:	d4e0      	bmi.n	800c9dc <_fflush_r+0xc>
 800ca1a:	89a3      	ldrh	r3, [r4, #12]
 800ca1c:	059b      	lsls	r3, r3, #22
 800ca1e:	d4dd      	bmi.n	800c9dc <_fflush_r+0xc>
 800ca20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca22:	f000 f908 	bl	800cc36 <__retarget_lock_release_recursive>
 800ca26:	e7d9      	b.n	800c9dc <_fflush_r+0xc>
 800ca28:	4b05      	ldr	r3, [pc, #20]	; (800ca40 <_fflush_r+0x70>)
 800ca2a:	429c      	cmp	r4, r3
 800ca2c:	d101      	bne.n	800ca32 <_fflush_r+0x62>
 800ca2e:	68ac      	ldr	r4, [r5, #8]
 800ca30:	e7df      	b.n	800c9f2 <_fflush_r+0x22>
 800ca32:	4b04      	ldr	r3, [pc, #16]	; (800ca44 <_fflush_r+0x74>)
 800ca34:	429c      	cmp	r4, r3
 800ca36:	bf08      	it	eq
 800ca38:	68ec      	ldreq	r4, [r5, #12]
 800ca3a:	e7da      	b.n	800c9f2 <_fflush_r+0x22>
 800ca3c:	0800d848 	.word	0x0800d848
 800ca40:	0800d868 	.word	0x0800d868
 800ca44:	0800d828 	.word	0x0800d828

0800ca48 <std>:
 800ca48:	2300      	movs	r3, #0
 800ca4a:	b510      	push	{r4, lr}
 800ca4c:	4604      	mov	r4, r0
 800ca4e:	e9c0 3300 	strd	r3, r3, [r0]
 800ca52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ca56:	6083      	str	r3, [r0, #8]
 800ca58:	8181      	strh	r1, [r0, #12]
 800ca5a:	6643      	str	r3, [r0, #100]	; 0x64
 800ca5c:	81c2      	strh	r2, [r0, #14]
 800ca5e:	6183      	str	r3, [r0, #24]
 800ca60:	4619      	mov	r1, r3
 800ca62:	2208      	movs	r2, #8
 800ca64:	305c      	adds	r0, #92	; 0x5c
 800ca66:	f7fd fab3 	bl	8009fd0 <memset>
 800ca6a:	4b05      	ldr	r3, [pc, #20]	; (800ca80 <std+0x38>)
 800ca6c:	6263      	str	r3, [r4, #36]	; 0x24
 800ca6e:	4b05      	ldr	r3, [pc, #20]	; (800ca84 <std+0x3c>)
 800ca70:	62a3      	str	r3, [r4, #40]	; 0x28
 800ca72:	4b05      	ldr	r3, [pc, #20]	; (800ca88 <std+0x40>)
 800ca74:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ca76:	4b05      	ldr	r3, [pc, #20]	; (800ca8c <std+0x44>)
 800ca78:	6224      	str	r4, [r4, #32]
 800ca7a:	6323      	str	r3, [r4, #48]	; 0x30
 800ca7c:	bd10      	pop	{r4, pc}
 800ca7e:	bf00      	nop
 800ca80:	0800ce5d 	.word	0x0800ce5d
 800ca84:	0800ce7f 	.word	0x0800ce7f
 800ca88:	0800ceb7 	.word	0x0800ceb7
 800ca8c:	0800cedb 	.word	0x0800cedb

0800ca90 <_cleanup_r>:
 800ca90:	4901      	ldr	r1, [pc, #4]	; (800ca98 <_cleanup_r+0x8>)
 800ca92:	f000 b8af 	b.w	800cbf4 <_fwalk_reent>
 800ca96:	bf00      	nop
 800ca98:	0800c9d1 	.word	0x0800c9d1

0800ca9c <__sfmoreglue>:
 800ca9c:	b570      	push	{r4, r5, r6, lr}
 800ca9e:	2268      	movs	r2, #104	; 0x68
 800caa0:	1e4d      	subs	r5, r1, #1
 800caa2:	4355      	muls	r5, r2
 800caa4:	460e      	mov	r6, r1
 800caa6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800caaa:	f7ff fb09 	bl	800c0c0 <_malloc_r>
 800caae:	4604      	mov	r4, r0
 800cab0:	b140      	cbz	r0, 800cac4 <__sfmoreglue+0x28>
 800cab2:	2100      	movs	r1, #0
 800cab4:	e9c0 1600 	strd	r1, r6, [r0]
 800cab8:	300c      	adds	r0, #12
 800caba:	60a0      	str	r0, [r4, #8]
 800cabc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cac0:	f7fd fa86 	bl	8009fd0 <memset>
 800cac4:	4620      	mov	r0, r4
 800cac6:	bd70      	pop	{r4, r5, r6, pc}

0800cac8 <__sfp_lock_acquire>:
 800cac8:	4801      	ldr	r0, [pc, #4]	; (800cad0 <__sfp_lock_acquire+0x8>)
 800caca:	f000 b8b3 	b.w	800cc34 <__retarget_lock_acquire_recursive>
 800cace:	bf00      	nop
 800cad0:	200006b1 	.word	0x200006b1

0800cad4 <__sfp_lock_release>:
 800cad4:	4801      	ldr	r0, [pc, #4]	; (800cadc <__sfp_lock_release+0x8>)
 800cad6:	f000 b8ae 	b.w	800cc36 <__retarget_lock_release_recursive>
 800cada:	bf00      	nop
 800cadc:	200006b1 	.word	0x200006b1

0800cae0 <__sinit_lock_acquire>:
 800cae0:	4801      	ldr	r0, [pc, #4]	; (800cae8 <__sinit_lock_acquire+0x8>)
 800cae2:	f000 b8a7 	b.w	800cc34 <__retarget_lock_acquire_recursive>
 800cae6:	bf00      	nop
 800cae8:	200006b2 	.word	0x200006b2

0800caec <__sinit_lock_release>:
 800caec:	4801      	ldr	r0, [pc, #4]	; (800caf4 <__sinit_lock_release+0x8>)
 800caee:	f000 b8a2 	b.w	800cc36 <__retarget_lock_release_recursive>
 800caf2:	bf00      	nop
 800caf4:	200006b2 	.word	0x200006b2

0800caf8 <__sinit>:
 800caf8:	b510      	push	{r4, lr}
 800cafa:	4604      	mov	r4, r0
 800cafc:	f7ff fff0 	bl	800cae0 <__sinit_lock_acquire>
 800cb00:	69a3      	ldr	r3, [r4, #24]
 800cb02:	b11b      	cbz	r3, 800cb0c <__sinit+0x14>
 800cb04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb08:	f7ff bff0 	b.w	800caec <__sinit_lock_release>
 800cb0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cb10:	6523      	str	r3, [r4, #80]	; 0x50
 800cb12:	4b13      	ldr	r3, [pc, #76]	; (800cb60 <__sinit+0x68>)
 800cb14:	4a13      	ldr	r2, [pc, #76]	; (800cb64 <__sinit+0x6c>)
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	62a2      	str	r2, [r4, #40]	; 0x28
 800cb1a:	42a3      	cmp	r3, r4
 800cb1c:	bf04      	itt	eq
 800cb1e:	2301      	moveq	r3, #1
 800cb20:	61a3      	streq	r3, [r4, #24]
 800cb22:	4620      	mov	r0, r4
 800cb24:	f000 f820 	bl	800cb68 <__sfp>
 800cb28:	6060      	str	r0, [r4, #4]
 800cb2a:	4620      	mov	r0, r4
 800cb2c:	f000 f81c 	bl	800cb68 <__sfp>
 800cb30:	60a0      	str	r0, [r4, #8]
 800cb32:	4620      	mov	r0, r4
 800cb34:	f000 f818 	bl	800cb68 <__sfp>
 800cb38:	2200      	movs	r2, #0
 800cb3a:	60e0      	str	r0, [r4, #12]
 800cb3c:	2104      	movs	r1, #4
 800cb3e:	6860      	ldr	r0, [r4, #4]
 800cb40:	f7ff ff82 	bl	800ca48 <std>
 800cb44:	68a0      	ldr	r0, [r4, #8]
 800cb46:	2201      	movs	r2, #1
 800cb48:	2109      	movs	r1, #9
 800cb4a:	f7ff ff7d 	bl	800ca48 <std>
 800cb4e:	68e0      	ldr	r0, [r4, #12]
 800cb50:	2202      	movs	r2, #2
 800cb52:	2112      	movs	r1, #18
 800cb54:	f7ff ff78 	bl	800ca48 <std>
 800cb58:	2301      	movs	r3, #1
 800cb5a:	61a3      	str	r3, [r4, #24]
 800cb5c:	e7d2      	b.n	800cb04 <__sinit+0xc>
 800cb5e:	bf00      	nop
 800cb60:	0800d458 	.word	0x0800d458
 800cb64:	0800ca91 	.word	0x0800ca91

0800cb68 <__sfp>:
 800cb68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb6a:	4607      	mov	r7, r0
 800cb6c:	f7ff ffac 	bl	800cac8 <__sfp_lock_acquire>
 800cb70:	4b1e      	ldr	r3, [pc, #120]	; (800cbec <__sfp+0x84>)
 800cb72:	681e      	ldr	r6, [r3, #0]
 800cb74:	69b3      	ldr	r3, [r6, #24]
 800cb76:	b913      	cbnz	r3, 800cb7e <__sfp+0x16>
 800cb78:	4630      	mov	r0, r6
 800cb7a:	f7ff ffbd 	bl	800caf8 <__sinit>
 800cb7e:	3648      	adds	r6, #72	; 0x48
 800cb80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cb84:	3b01      	subs	r3, #1
 800cb86:	d503      	bpl.n	800cb90 <__sfp+0x28>
 800cb88:	6833      	ldr	r3, [r6, #0]
 800cb8a:	b30b      	cbz	r3, 800cbd0 <__sfp+0x68>
 800cb8c:	6836      	ldr	r6, [r6, #0]
 800cb8e:	e7f7      	b.n	800cb80 <__sfp+0x18>
 800cb90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cb94:	b9d5      	cbnz	r5, 800cbcc <__sfp+0x64>
 800cb96:	4b16      	ldr	r3, [pc, #88]	; (800cbf0 <__sfp+0x88>)
 800cb98:	60e3      	str	r3, [r4, #12]
 800cb9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cb9e:	6665      	str	r5, [r4, #100]	; 0x64
 800cba0:	f000 f847 	bl	800cc32 <__retarget_lock_init_recursive>
 800cba4:	f7ff ff96 	bl	800cad4 <__sfp_lock_release>
 800cba8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cbac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cbb0:	6025      	str	r5, [r4, #0]
 800cbb2:	61a5      	str	r5, [r4, #24]
 800cbb4:	2208      	movs	r2, #8
 800cbb6:	4629      	mov	r1, r5
 800cbb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cbbc:	f7fd fa08 	bl	8009fd0 <memset>
 800cbc0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cbc4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cbc8:	4620      	mov	r0, r4
 800cbca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbcc:	3468      	adds	r4, #104	; 0x68
 800cbce:	e7d9      	b.n	800cb84 <__sfp+0x1c>
 800cbd0:	2104      	movs	r1, #4
 800cbd2:	4638      	mov	r0, r7
 800cbd4:	f7ff ff62 	bl	800ca9c <__sfmoreglue>
 800cbd8:	4604      	mov	r4, r0
 800cbda:	6030      	str	r0, [r6, #0]
 800cbdc:	2800      	cmp	r0, #0
 800cbde:	d1d5      	bne.n	800cb8c <__sfp+0x24>
 800cbe0:	f7ff ff78 	bl	800cad4 <__sfp_lock_release>
 800cbe4:	230c      	movs	r3, #12
 800cbe6:	603b      	str	r3, [r7, #0]
 800cbe8:	e7ee      	b.n	800cbc8 <__sfp+0x60>
 800cbea:	bf00      	nop
 800cbec:	0800d458 	.word	0x0800d458
 800cbf0:	ffff0001 	.word	0xffff0001

0800cbf4 <_fwalk_reent>:
 800cbf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbf8:	4606      	mov	r6, r0
 800cbfa:	4688      	mov	r8, r1
 800cbfc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cc00:	2700      	movs	r7, #0
 800cc02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cc06:	f1b9 0901 	subs.w	r9, r9, #1
 800cc0a:	d505      	bpl.n	800cc18 <_fwalk_reent+0x24>
 800cc0c:	6824      	ldr	r4, [r4, #0]
 800cc0e:	2c00      	cmp	r4, #0
 800cc10:	d1f7      	bne.n	800cc02 <_fwalk_reent+0xe>
 800cc12:	4638      	mov	r0, r7
 800cc14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc18:	89ab      	ldrh	r3, [r5, #12]
 800cc1a:	2b01      	cmp	r3, #1
 800cc1c:	d907      	bls.n	800cc2e <_fwalk_reent+0x3a>
 800cc1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cc22:	3301      	adds	r3, #1
 800cc24:	d003      	beq.n	800cc2e <_fwalk_reent+0x3a>
 800cc26:	4629      	mov	r1, r5
 800cc28:	4630      	mov	r0, r6
 800cc2a:	47c0      	blx	r8
 800cc2c:	4307      	orrs	r7, r0
 800cc2e:	3568      	adds	r5, #104	; 0x68
 800cc30:	e7e9      	b.n	800cc06 <_fwalk_reent+0x12>

0800cc32 <__retarget_lock_init_recursive>:
 800cc32:	4770      	bx	lr

0800cc34 <__retarget_lock_acquire_recursive>:
 800cc34:	4770      	bx	lr

0800cc36 <__retarget_lock_release_recursive>:
 800cc36:	4770      	bx	lr

0800cc38 <__swhatbuf_r>:
 800cc38:	b570      	push	{r4, r5, r6, lr}
 800cc3a:	460e      	mov	r6, r1
 800cc3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc40:	2900      	cmp	r1, #0
 800cc42:	b096      	sub	sp, #88	; 0x58
 800cc44:	4614      	mov	r4, r2
 800cc46:	461d      	mov	r5, r3
 800cc48:	da08      	bge.n	800cc5c <__swhatbuf_r+0x24>
 800cc4a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cc4e:	2200      	movs	r2, #0
 800cc50:	602a      	str	r2, [r5, #0]
 800cc52:	061a      	lsls	r2, r3, #24
 800cc54:	d410      	bmi.n	800cc78 <__swhatbuf_r+0x40>
 800cc56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc5a:	e00e      	b.n	800cc7a <__swhatbuf_r+0x42>
 800cc5c:	466a      	mov	r2, sp
 800cc5e:	f000 f96f 	bl	800cf40 <_fstat_r>
 800cc62:	2800      	cmp	r0, #0
 800cc64:	dbf1      	blt.n	800cc4a <__swhatbuf_r+0x12>
 800cc66:	9a01      	ldr	r2, [sp, #4]
 800cc68:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cc6c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cc70:	425a      	negs	r2, r3
 800cc72:	415a      	adcs	r2, r3
 800cc74:	602a      	str	r2, [r5, #0]
 800cc76:	e7ee      	b.n	800cc56 <__swhatbuf_r+0x1e>
 800cc78:	2340      	movs	r3, #64	; 0x40
 800cc7a:	2000      	movs	r0, #0
 800cc7c:	6023      	str	r3, [r4, #0]
 800cc7e:	b016      	add	sp, #88	; 0x58
 800cc80:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cc84 <__smakebuf_r>:
 800cc84:	898b      	ldrh	r3, [r1, #12]
 800cc86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cc88:	079d      	lsls	r5, r3, #30
 800cc8a:	4606      	mov	r6, r0
 800cc8c:	460c      	mov	r4, r1
 800cc8e:	d507      	bpl.n	800cca0 <__smakebuf_r+0x1c>
 800cc90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cc94:	6023      	str	r3, [r4, #0]
 800cc96:	6123      	str	r3, [r4, #16]
 800cc98:	2301      	movs	r3, #1
 800cc9a:	6163      	str	r3, [r4, #20]
 800cc9c:	b002      	add	sp, #8
 800cc9e:	bd70      	pop	{r4, r5, r6, pc}
 800cca0:	ab01      	add	r3, sp, #4
 800cca2:	466a      	mov	r2, sp
 800cca4:	f7ff ffc8 	bl	800cc38 <__swhatbuf_r>
 800cca8:	9900      	ldr	r1, [sp, #0]
 800ccaa:	4605      	mov	r5, r0
 800ccac:	4630      	mov	r0, r6
 800ccae:	f7ff fa07 	bl	800c0c0 <_malloc_r>
 800ccb2:	b948      	cbnz	r0, 800ccc8 <__smakebuf_r+0x44>
 800ccb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccb8:	059a      	lsls	r2, r3, #22
 800ccba:	d4ef      	bmi.n	800cc9c <__smakebuf_r+0x18>
 800ccbc:	f023 0303 	bic.w	r3, r3, #3
 800ccc0:	f043 0302 	orr.w	r3, r3, #2
 800ccc4:	81a3      	strh	r3, [r4, #12]
 800ccc6:	e7e3      	b.n	800cc90 <__smakebuf_r+0xc>
 800ccc8:	4b0d      	ldr	r3, [pc, #52]	; (800cd00 <__smakebuf_r+0x7c>)
 800ccca:	62b3      	str	r3, [r6, #40]	; 0x28
 800cccc:	89a3      	ldrh	r3, [r4, #12]
 800ccce:	6020      	str	r0, [r4, #0]
 800ccd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ccd4:	81a3      	strh	r3, [r4, #12]
 800ccd6:	9b00      	ldr	r3, [sp, #0]
 800ccd8:	6163      	str	r3, [r4, #20]
 800ccda:	9b01      	ldr	r3, [sp, #4]
 800ccdc:	6120      	str	r0, [r4, #16]
 800ccde:	b15b      	cbz	r3, 800ccf8 <__smakebuf_r+0x74>
 800cce0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cce4:	4630      	mov	r0, r6
 800cce6:	f000 f93d 	bl	800cf64 <_isatty_r>
 800ccea:	b128      	cbz	r0, 800ccf8 <__smakebuf_r+0x74>
 800ccec:	89a3      	ldrh	r3, [r4, #12]
 800ccee:	f023 0303 	bic.w	r3, r3, #3
 800ccf2:	f043 0301 	orr.w	r3, r3, #1
 800ccf6:	81a3      	strh	r3, [r4, #12]
 800ccf8:	89a0      	ldrh	r0, [r4, #12]
 800ccfa:	4305      	orrs	r5, r0
 800ccfc:	81a5      	strh	r5, [r4, #12]
 800ccfe:	e7cd      	b.n	800cc9c <__smakebuf_r+0x18>
 800cd00:	0800ca91 	.word	0x0800ca91

0800cd04 <__ascii_mbtowc>:
 800cd04:	b082      	sub	sp, #8
 800cd06:	b901      	cbnz	r1, 800cd0a <__ascii_mbtowc+0x6>
 800cd08:	a901      	add	r1, sp, #4
 800cd0a:	b142      	cbz	r2, 800cd1e <__ascii_mbtowc+0x1a>
 800cd0c:	b14b      	cbz	r3, 800cd22 <__ascii_mbtowc+0x1e>
 800cd0e:	7813      	ldrb	r3, [r2, #0]
 800cd10:	600b      	str	r3, [r1, #0]
 800cd12:	7812      	ldrb	r2, [r2, #0]
 800cd14:	1e10      	subs	r0, r2, #0
 800cd16:	bf18      	it	ne
 800cd18:	2001      	movne	r0, #1
 800cd1a:	b002      	add	sp, #8
 800cd1c:	4770      	bx	lr
 800cd1e:	4610      	mov	r0, r2
 800cd20:	e7fb      	b.n	800cd1a <__ascii_mbtowc+0x16>
 800cd22:	f06f 0001 	mvn.w	r0, #1
 800cd26:	e7f8      	b.n	800cd1a <__ascii_mbtowc+0x16>

0800cd28 <memmove>:
 800cd28:	4288      	cmp	r0, r1
 800cd2a:	b510      	push	{r4, lr}
 800cd2c:	eb01 0402 	add.w	r4, r1, r2
 800cd30:	d902      	bls.n	800cd38 <memmove+0x10>
 800cd32:	4284      	cmp	r4, r0
 800cd34:	4623      	mov	r3, r4
 800cd36:	d807      	bhi.n	800cd48 <memmove+0x20>
 800cd38:	1e43      	subs	r3, r0, #1
 800cd3a:	42a1      	cmp	r1, r4
 800cd3c:	d008      	beq.n	800cd50 <memmove+0x28>
 800cd3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd42:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd46:	e7f8      	b.n	800cd3a <memmove+0x12>
 800cd48:	4402      	add	r2, r0
 800cd4a:	4601      	mov	r1, r0
 800cd4c:	428a      	cmp	r2, r1
 800cd4e:	d100      	bne.n	800cd52 <memmove+0x2a>
 800cd50:	bd10      	pop	{r4, pc}
 800cd52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cd5a:	e7f7      	b.n	800cd4c <memmove+0x24>

0800cd5c <__malloc_lock>:
 800cd5c:	4801      	ldr	r0, [pc, #4]	; (800cd64 <__malloc_lock+0x8>)
 800cd5e:	f7ff bf69 	b.w	800cc34 <__retarget_lock_acquire_recursive>
 800cd62:	bf00      	nop
 800cd64:	200006b0 	.word	0x200006b0

0800cd68 <__malloc_unlock>:
 800cd68:	4801      	ldr	r0, [pc, #4]	; (800cd70 <__malloc_unlock+0x8>)
 800cd6a:	f7ff bf64 	b.w	800cc36 <__retarget_lock_release_recursive>
 800cd6e:	bf00      	nop
 800cd70:	200006b0 	.word	0x200006b0

0800cd74 <_realloc_r>:
 800cd74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd78:	4680      	mov	r8, r0
 800cd7a:	4614      	mov	r4, r2
 800cd7c:	460e      	mov	r6, r1
 800cd7e:	b921      	cbnz	r1, 800cd8a <_realloc_r+0x16>
 800cd80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd84:	4611      	mov	r1, r2
 800cd86:	f7ff b99b 	b.w	800c0c0 <_malloc_r>
 800cd8a:	b92a      	cbnz	r2, 800cd98 <_realloc_r+0x24>
 800cd8c:	f7ff f92c 	bl	800bfe8 <_free_r>
 800cd90:	4625      	mov	r5, r4
 800cd92:	4628      	mov	r0, r5
 800cd94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd98:	f000 f906 	bl	800cfa8 <_malloc_usable_size_r>
 800cd9c:	4284      	cmp	r4, r0
 800cd9e:	4607      	mov	r7, r0
 800cda0:	d802      	bhi.n	800cda8 <_realloc_r+0x34>
 800cda2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cda6:	d812      	bhi.n	800cdce <_realloc_r+0x5a>
 800cda8:	4621      	mov	r1, r4
 800cdaa:	4640      	mov	r0, r8
 800cdac:	f7ff f988 	bl	800c0c0 <_malloc_r>
 800cdb0:	4605      	mov	r5, r0
 800cdb2:	2800      	cmp	r0, #0
 800cdb4:	d0ed      	beq.n	800cd92 <_realloc_r+0x1e>
 800cdb6:	42bc      	cmp	r4, r7
 800cdb8:	4622      	mov	r2, r4
 800cdba:	4631      	mov	r1, r6
 800cdbc:	bf28      	it	cs
 800cdbe:	463a      	movcs	r2, r7
 800cdc0:	f7fe fd6a 	bl	800b898 <memcpy>
 800cdc4:	4631      	mov	r1, r6
 800cdc6:	4640      	mov	r0, r8
 800cdc8:	f7ff f90e 	bl	800bfe8 <_free_r>
 800cdcc:	e7e1      	b.n	800cd92 <_realloc_r+0x1e>
 800cdce:	4635      	mov	r5, r6
 800cdd0:	e7df      	b.n	800cd92 <_realloc_r+0x1e>

0800cdd2 <_raise_r>:
 800cdd2:	291f      	cmp	r1, #31
 800cdd4:	b538      	push	{r3, r4, r5, lr}
 800cdd6:	4604      	mov	r4, r0
 800cdd8:	460d      	mov	r5, r1
 800cdda:	d904      	bls.n	800cde6 <_raise_r+0x14>
 800cddc:	2316      	movs	r3, #22
 800cdde:	6003      	str	r3, [r0, #0]
 800cde0:	f04f 30ff 	mov.w	r0, #4294967295
 800cde4:	bd38      	pop	{r3, r4, r5, pc}
 800cde6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cde8:	b112      	cbz	r2, 800cdf0 <_raise_r+0x1e>
 800cdea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cdee:	b94b      	cbnz	r3, 800ce04 <_raise_r+0x32>
 800cdf0:	4620      	mov	r0, r4
 800cdf2:	f000 f831 	bl	800ce58 <_getpid_r>
 800cdf6:	462a      	mov	r2, r5
 800cdf8:	4601      	mov	r1, r0
 800cdfa:	4620      	mov	r0, r4
 800cdfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce00:	f000 b818 	b.w	800ce34 <_kill_r>
 800ce04:	2b01      	cmp	r3, #1
 800ce06:	d00a      	beq.n	800ce1e <_raise_r+0x4c>
 800ce08:	1c59      	adds	r1, r3, #1
 800ce0a:	d103      	bne.n	800ce14 <_raise_r+0x42>
 800ce0c:	2316      	movs	r3, #22
 800ce0e:	6003      	str	r3, [r0, #0]
 800ce10:	2001      	movs	r0, #1
 800ce12:	e7e7      	b.n	800cde4 <_raise_r+0x12>
 800ce14:	2400      	movs	r4, #0
 800ce16:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ce1a:	4628      	mov	r0, r5
 800ce1c:	4798      	blx	r3
 800ce1e:	2000      	movs	r0, #0
 800ce20:	e7e0      	b.n	800cde4 <_raise_r+0x12>
	...

0800ce24 <raise>:
 800ce24:	4b02      	ldr	r3, [pc, #8]	; (800ce30 <raise+0xc>)
 800ce26:	4601      	mov	r1, r0
 800ce28:	6818      	ldr	r0, [r3, #0]
 800ce2a:	f7ff bfd2 	b.w	800cdd2 <_raise_r>
 800ce2e:	bf00      	nop
 800ce30:	2000000c 	.word	0x2000000c

0800ce34 <_kill_r>:
 800ce34:	b538      	push	{r3, r4, r5, lr}
 800ce36:	4d07      	ldr	r5, [pc, #28]	; (800ce54 <_kill_r+0x20>)
 800ce38:	2300      	movs	r3, #0
 800ce3a:	4604      	mov	r4, r0
 800ce3c:	4608      	mov	r0, r1
 800ce3e:	4611      	mov	r1, r2
 800ce40:	602b      	str	r3, [r5, #0]
 800ce42:	f7f5 fa47 	bl	80022d4 <_kill>
 800ce46:	1c43      	adds	r3, r0, #1
 800ce48:	d102      	bne.n	800ce50 <_kill_r+0x1c>
 800ce4a:	682b      	ldr	r3, [r5, #0]
 800ce4c:	b103      	cbz	r3, 800ce50 <_kill_r+0x1c>
 800ce4e:	6023      	str	r3, [r4, #0]
 800ce50:	bd38      	pop	{r3, r4, r5, pc}
 800ce52:	bf00      	nop
 800ce54:	200006b4 	.word	0x200006b4

0800ce58 <_getpid_r>:
 800ce58:	f7f5 ba34 	b.w	80022c4 <_getpid>

0800ce5c <__sread>:
 800ce5c:	b510      	push	{r4, lr}
 800ce5e:	460c      	mov	r4, r1
 800ce60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce64:	f000 f8a8 	bl	800cfb8 <_read_r>
 800ce68:	2800      	cmp	r0, #0
 800ce6a:	bfab      	itete	ge
 800ce6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ce6e:	89a3      	ldrhlt	r3, [r4, #12]
 800ce70:	181b      	addge	r3, r3, r0
 800ce72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ce76:	bfac      	ite	ge
 800ce78:	6563      	strge	r3, [r4, #84]	; 0x54
 800ce7a:	81a3      	strhlt	r3, [r4, #12]
 800ce7c:	bd10      	pop	{r4, pc}

0800ce7e <__swrite>:
 800ce7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce82:	461f      	mov	r7, r3
 800ce84:	898b      	ldrh	r3, [r1, #12]
 800ce86:	05db      	lsls	r3, r3, #23
 800ce88:	4605      	mov	r5, r0
 800ce8a:	460c      	mov	r4, r1
 800ce8c:	4616      	mov	r6, r2
 800ce8e:	d505      	bpl.n	800ce9c <__swrite+0x1e>
 800ce90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce94:	2302      	movs	r3, #2
 800ce96:	2200      	movs	r2, #0
 800ce98:	f000 f874 	bl	800cf84 <_lseek_r>
 800ce9c:	89a3      	ldrh	r3, [r4, #12]
 800ce9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cea2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cea6:	81a3      	strh	r3, [r4, #12]
 800cea8:	4632      	mov	r2, r6
 800ceaa:	463b      	mov	r3, r7
 800ceac:	4628      	mov	r0, r5
 800ceae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ceb2:	f000 b823 	b.w	800cefc <_write_r>

0800ceb6 <__sseek>:
 800ceb6:	b510      	push	{r4, lr}
 800ceb8:	460c      	mov	r4, r1
 800ceba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cebe:	f000 f861 	bl	800cf84 <_lseek_r>
 800cec2:	1c43      	adds	r3, r0, #1
 800cec4:	89a3      	ldrh	r3, [r4, #12]
 800cec6:	bf15      	itete	ne
 800cec8:	6560      	strne	r0, [r4, #84]	; 0x54
 800ceca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cece:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ced2:	81a3      	strheq	r3, [r4, #12]
 800ced4:	bf18      	it	ne
 800ced6:	81a3      	strhne	r3, [r4, #12]
 800ced8:	bd10      	pop	{r4, pc}

0800ceda <__sclose>:
 800ceda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cede:	f000 b81f 	b.w	800cf20 <_close_r>

0800cee2 <__ascii_wctomb>:
 800cee2:	b149      	cbz	r1, 800cef8 <__ascii_wctomb+0x16>
 800cee4:	2aff      	cmp	r2, #255	; 0xff
 800cee6:	bf85      	ittet	hi
 800cee8:	238a      	movhi	r3, #138	; 0x8a
 800ceea:	6003      	strhi	r3, [r0, #0]
 800ceec:	700a      	strbls	r2, [r1, #0]
 800ceee:	f04f 30ff 	movhi.w	r0, #4294967295
 800cef2:	bf98      	it	ls
 800cef4:	2001      	movls	r0, #1
 800cef6:	4770      	bx	lr
 800cef8:	4608      	mov	r0, r1
 800cefa:	4770      	bx	lr

0800cefc <_write_r>:
 800cefc:	b538      	push	{r3, r4, r5, lr}
 800cefe:	4d07      	ldr	r5, [pc, #28]	; (800cf1c <_write_r+0x20>)
 800cf00:	4604      	mov	r4, r0
 800cf02:	4608      	mov	r0, r1
 800cf04:	4611      	mov	r1, r2
 800cf06:	2200      	movs	r2, #0
 800cf08:	602a      	str	r2, [r5, #0]
 800cf0a:	461a      	mov	r2, r3
 800cf0c:	f7f5 fa19 	bl	8002342 <_write>
 800cf10:	1c43      	adds	r3, r0, #1
 800cf12:	d102      	bne.n	800cf1a <_write_r+0x1e>
 800cf14:	682b      	ldr	r3, [r5, #0]
 800cf16:	b103      	cbz	r3, 800cf1a <_write_r+0x1e>
 800cf18:	6023      	str	r3, [r4, #0]
 800cf1a:	bd38      	pop	{r3, r4, r5, pc}
 800cf1c:	200006b4 	.word	0x200006b4

0800cf20 <_close_r>:
 800cf20:	b538      	push	{r3, r4, r5, lr}
 800cf22:	4d06      	ldr	r5, [pc, #24]	; (800cf3c <_close_r+0x1c>)
 800cf24:	2300      	movs	r3, #0
 800cf26:	4604      	mov	r4, r0
 800cf28:	4608      	mov	r0, r1
 800cf2a:	602b      	str	r3, [r5, #0]
 800cf2c:	f7f5 fa25 	bl	800237a <_close>
 800cf30:	1c43      	adds	r3, r0, #1
 800cf32:	d102      	bne.n	800cf3a <_close_r+0x1a>
 800cf34:	682b      	ldr	r3, [r5, #0]
 800cf36:	b103      	cbz	r3, 800cf3a <_close_r+0x1a>
 800cf38:	6023      	str	r3, [r4, #0]
 800cf3a:	bd38      	pop	{r3, r4, r5, pc}
 800cf3c:	200006b4 	.word	0x200006b4

0800cf40 <_fstat_r>:
 800cf40:	b538      	push	{r3, r4, r5, lr}
 800cf42:	4d07      	ldr	r5, [pc, #28]	; (800cf60 <_fstat_r+0x20>)
 800cf44:	2300      	movs	r3, #0
 800cf46:	4604      	mov	r4, r0
 800cf48:	4608      	mov	r0, r1
 800cf4a:	4611      	mov	r1, r2
 800cf4c:	602b      	str	r3, [r5, #0]
 800cf4e:	f7f5 fa20 	bl	8002392 <_fstat>
 800cf52:	1c43      	adds	r3, r0, #1
 800cf54:	d102      	bne.n	800cf5c <_fstat_r+0x1c>
 800cf56:	682b      	ldr	r3, [r5, #0]
 800cf58:	b103      	cbz	r3, 800cf5c <_fstat_r+0x1c>
 800cf5a:	6023      	str	r3, [r4, #0]
 800cf5c:	bd38      	pop	{r3, r4, r5, pc}
 800cf5e:	bf00      	nop
 800cf60:	200006b4 	.word	0x200006b4

0800cf64 <_isatty_r>:
 800cf64:	b538      	push	{r3, r4, r5, lr}
 800cf66:	4d06      	ldr	r5, [pc, #24]	; (800cf80 <_isatty_r+0x1c>)
 800cf68:	2300      	movs	r3, #0
 800cf6a:	4604      	mov	r4, r0
 800cf6c:	4608      	mov	r0, r1
 800cf6e:	602b      	str	r3, [r5, #0]
 800cf70:	f7f5 fa1f 	bl	80023b2 <_isatty>
 800cf74:	1c43      	adds	r3, r0, #1
 800cf76:	d102      	bne.n	800cf7e <_isatty_r+0x1a>
 800cf78:	682b      	ldr	r3, [r5, #0]
 800cf7a:	b103      	cbz	r3, 800cf7e <_isatty_r+0x1a>
 800cf7c:	6023      	str	r3, [r4, #0]
 800cf7e:	bd38      	pop	{r3, r4, r5, pc}
 800cf80:	200006b4 	.word	0x200006b4

0800cf84 <_lseek_r>:
 800cf84:	b538      	push	{r3, r4, r5, lr}
 800cf86:	4d07      	ldr	r5, [pc, #28]	; (800cfa4 <_lseek_r+0x20>)
 800cf88:	4604      	mov	r4, r0
 800cf8a:	4608      	mov	r0, r1
 800cf8c:	4611      	mov	r1, r2
 800cf8e:	2200      	movs	r2, #0
 800cf90:	602a      	str	r2, [r5, #0]
 800cf92:	461a      	mov	r2, r3
 800cf94:	f7f5 fa18 	bl	80023c8 <_lseek>
 800cf98:	1c43      	adds	r3, r0, #1
 800cf9a:	d102      	bne.n	800cfa2 <_lseek_r+0x1e>
 800cf9c:	682b      	ldr	r3, [r5, #0]
 800cf9e:	b103      	cbz	r3, 800cfa2 <_lseek_r+0x1e>
 800cfa0:	6023      	str	r3, [r4, #0]
 800cfa2:	bd38      	pop	{r3, r4, r5, pc}
 800cfa4:	200006b4 	.word	0x200006b4

0800cfa8 <_malloc_usable_size_r>:
 800cfa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfac:	1f18      	subs	r0, r3, #4
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	bfbc      	itt	lt
 800cfb2:	580b      	ldrlt	r3, [r1, r0]
 800cfb4:	18c0      	addlt	r0, r0, r3
 800cfb6:	4770      	bx	lr

0800cfb8 <_read_r>:
 800cfb8:	b538      	push	{r3, r4, r5, lr}
 800cfba:	4d07      	ldr	r5, [pc, #28]	; (800cfd8 <_read_r+0x20>)
 800cfbc:	4604      	mov	r4, r0
 800cfbe:	4608      	mov	r0, r1
 800cfc0:	4611      	mov	r1, r2
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	602a      	str	r2, [r5, #0]
 800cfc6:	461a      	mov	r2, r3
 800cfc8:	f7f5 f99e 	bl	8002308 <_read>
 800cfcc:	1c43      	adds	r3, r0, #1
 800cfce:	d102      	bne.n	800cfd6 <_read_r+0x1e>
 800cfd0:	682b      	ldr	r3, [r5, #0]
 800cfd2:	b103      	cbz	r3, 800cfd6 <_read_r+0x1e>
 800cfd4:	6023      	str	r3, [r4, #0]
 800cfd6:	bd38      	pop	{r3, r4, r5, pc}
 800cfd8:	200006b4 	.word	0x200006b4

0800cfdc <_init>:
 800cfdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfde:	bf00      	nop
 800cfe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfe2:	bc08      	pop	{r3}
 800cfe4:	469e      	mov	lr, r3
 800cfe6:	4770      	bx	lr

0800cfe8 <_fini>:
 800cfe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfea:	bf00      	nop
 800cfec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfee:	bc08      	pop	{r3}
 800cff0:	469e      	mov	lr, r3
 800cff2:	4770      	bx	lr

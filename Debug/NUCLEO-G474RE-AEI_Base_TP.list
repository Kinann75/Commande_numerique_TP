
NUCLEO-G474RE-AEI_Base_TP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bf0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000060c  08007dd0  08007dd0  00017dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083dc  080083dc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080083dc  080083dc  000183dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083e4  080083e4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083e4  080083e4  000183e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083e8  080083e8  000183e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080083ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  20000070  0800845c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  0800845c  00020288  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ba7  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f47  00000000  00000000  00036c47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e8  00000000  00000000  00039b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010a0  00000000  00000000  0003ad78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028238  00000000  00000000  0003be18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016333  00000000  00000000  00064050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd5ae  00000000  00000000  0007a383  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00177931  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000561c  00000000  00000000  00177984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007db8 	.word	0x08007db8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08007db8 	.word	0x08007db8

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fa:	4b33      	ldr	r3, [pc, #204]	; (80006c8 <MX_GPIO_Init+0xe4>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fe:	4a32      	ldr	r2, [pc, #200]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000600:	f043 0304 	orr.w	r3, r3, #4
 8000604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000606:	4b30      	ldr	r3, [pc, #192]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060a:	f003 0304 	and.w	r3, r3, #4
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000612:	4b2d      	ldr	r3, [pc, #180]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000616:	4a2c      	ldr	r2, [pc, #176]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000618:	f043 0320 	orr.w	r3, r3, #32
 800061c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800061e:	4b2a      	ldr	r3, [pc, #168]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000622:	f003 0320 	and.w	r3, r3, #32
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	4b27      	ldr	r3, [pc, #156]	; (80006c8 <MX_GPIO_Init+0xe4>)
 800062c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062e:	4a26      	ldr	r2, [pc, #152]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000636:	4b24      	ldr	r3, [pc, #144]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	603b      	str	r3, [r7, #0]
 8000640:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	2108      	movs	r1, #8
 8000646:	4821      	ldr	r0, [pc, #132]	; (80006cc <MX_GPIO_Init+0xe8>)
 8000648:	f001 fa66 	bl	8001b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	2120      	movs	r1, #32
 8000650:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000654:	f001 fa60 	bl	8001b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000658:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800065c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800065e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000662:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	4619      	mov	r1, r3
 800066e:	4817      	ldr	r0, [pc, #92]	; (80006cc <MX_GPIO_Init+0xe8>)
 8000670:	f001 f8d0 	bl	8001814 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ISO_RESET_Pin;
 8000674:	2308      	movs	r3, #8
 8000676:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000678:	2301      	movs	r3, #1
 800067a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000680:	2300      	movs	r3, #0
 8000682:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ISO_RESET_GPIO_Port, &GPIO_InitStruct);
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	4619      	mov	r1, r3
 800068a:	4810      	ldr	r0, [pc, #64]	; (80006cc <MX_GPIO_Init+0xe8>)
 800068c:	f001 f8c2 	bl	8001814 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000690:	2320      	movs	r3, #32
 8000692:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000694:	2301      	movs	r3, #1
 8000696:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069c:	2300      	movs	r3, #0
 800069e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	4619      	mov	r1, r3
 80006a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006aa:	f001 f8b3 	bl	8001814 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2100      	movs	r1, #0
 80006b2:	2028      	movs	r0, #40	; 0x28
 80006b4:	f000 ffc6 	bl	8001644 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006b8:	2028      	movs	r0, #40	; 0x28
 80006ba:	f000 ffdd 	bl	8001678 <HAL_NVIC_EnableIRQ>

}
 80006be:	bf00      	nop
 80006c0:	3720      	adds	r7, #32
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40021000 	.word	0x40021000
 80006cc:	48000800 	.word	0x48000800

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d6:	f000 fea4 	bl	8001422 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006da:	f000 f859 	bl	8000790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006de:	f7ff ff81 	bl	80005e4 <MX_GPIO_Init>
  MX_TIM1_Init();
 80006e2:	f000 fc9d 	bl	8001020 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80006e6:	f000 fdc7 	bl	8001278 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80006ea:	2201      	movs	r2, #1
 80006ec:	4922      	ldr	r1, [pc, #136]	; (8000778 <main+0xa8>)
 80006ee:	4823      	ldr	r0, [pc, #140]	; (800077c <main+0xac>)
 80006f0:	f004 f8ca 	bl	8004888 <HAL_UART_Receive_IT>
	HAL_Delay(1);
 80006f4:	2001      	movs	r0, #1
 80006f6:	f000 fecb 	bl	8001490 <HAL_Delay>
	shellInit();
 80006fa:	f000 f90f 	bl	800091c <shellInit>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80006fe:	2100      	movs	r1, #0
 8000700:	481f      	ldr	r0, [pc, #124]	; (8000780 <main+0xb0>)
 8000702:	f002 fbed 	bl	8002ee0 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000706:	2100      	movs	r1, #0
 8000708:	481d      	ldr	r0, [pc, #116]	; (8000780 <main+0xb0>)
 800070a:	f003 fd61 	bl	80041d0 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800070e:	2104      	movs	r1, #4
 8000710:	481b      	ldr	r0, [pc, #108]	; (8000780 <main+0xb0>)
 8000712:	f002 fbe5 	bl	8002ee0 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000716:	2104      	movs	r1, #4
 8000718:	4819      	ldr	r0, [pc, #100]	; (8000780 <main+0xb0>)
 800071a:	f003 fd59 	bl	80041d0 <HAL_TIMEx_PWMN_Start>
	int i=0;
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if (flag==1)
 8000722:	4b18      	ldr	r3, [pc, #96]	; (8000784 <main+0xb4>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	2b01      	cmp	r3, #1
 8000728:	d115      	bne.n	8000756 <main+0x86>
		{
			HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin,GPIO_PIN_SET);
 800072a:	2201      	movs	r2, #1
 800072c:	2108      	movs	r1, #8
 800072e:	4816      	ldr	r0, [pc, #88]	; (8000788 <main+0xb8>)
 8000730:	f001 f9f2 	bl	8001b18 <HAL_GPIO_WritePin>
			for(i=0;i<70;i++)
 8000734:	2300      	movs	r3, #0
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	e002      	b.n	8000740 <main+0x70>
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	3301      	adds	r3, #1
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2b45      	cmp	r3, #69	; 0x45
 8000744:	ddf9      	ble.n	800073a <main+0x6a>
				{
				}
			HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin,GPIO_PIN_RESET);
 8000746:	2200      	movs	r2, #0
 8000748:	2108      	movs	r1, #8
 800074a:	480f      	ldr	r0, [pc, #60]	; (8000788 <main+0xb8>)
 800074c:	f001 f9e4 	bl	8001b18 <HAL_GPIO_WritePin>
			flag=0;
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <main+0xb4>)
 8000752:	2200      	movs	r2, #0
 8000754:	701a      	strb	r2, [r3, #0]
		}
		// SuperLoop inside the while(1), only flag changed from interrupt could launch functions
		if(uartRxReceived){
 8000756:	4b0d      	ldr	r3, [pc, #52]	; (800078c <main+0xbc>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d0e1      	beq.n	8000722 <main+0x52>
			if(shellGetChar()){
 800075e:	f000 f915 	bl	800098c <shellGetChar>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d003      	beq.n	8000770 <main+0xa0>
				shellExec();
 8000768:	f000 f984 	bl	8000a74 <shellExec>
				shellPrompt();
 800076c:	f000 f8ee 	bl	800094c <shellPrompt>
			}
			uartRxReceived = 0;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <main+0xbc>)
 8000772:	2200      	movs	r2, #0
 8000774:	701a      	strb	r2, [r3, #0]
		if (flag==1)
 8000776:	e7d4      	b.n	8000722 <main+0x52>
 8000778:	2000019c 	.word	0x2000019c
 800077c:	200001e4 	.word	0x200001e4
 8000780:	2000014c 	.word	0x2000014c
 8000784:	2000008c 	.word	0x2000008c
 8000788:	48000800 	.word	0x48000800
 800078c:	20000198 	.word	0x20000198

08000790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b094      	sub	sp, #80	; 0x50
 8000794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000796:	f107 0318 	add.w	r3, r7, #24
 800079a:	2238      	movs	r2, #56	; 0x38
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f006 f830 	bl	8006804 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80007b2:	2000      	movs	r0, #0
 80007b4:	f001 f9fa 	bl	8001bac <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007b8:	2301      	movs	r3, #1
 80007ba:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007c0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c2:	2302      	movs	r3, #2
 80007c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007c6:	2303      	movs	r3, #3
 80007c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80007ca:	2306      	movs	r3, #6
 80007cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80007ce:	2355      	movs	r3, #85	; 0x55
 80007d0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d2:	2302      	movs	r3, #2
 80007d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007d6:	2302      	movs	r3, #2
 80007d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007da:	2302      	movs	r3, #2
 80007dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007de:	f107 0318 	add.w	r3, r7, #24
 80007e2:	4618      	mov	r0, r3
 80007e4:	f001 fa96 	bl	8001d14 <HAL_RCC_OscConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80007ee:	f000 f83b 	bl	8000868 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f2:	230f      	movs	r3, #15
 80007f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f6:	2303      	movs	r3, #3
 80007f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	2104      	movs	r1, #4
 800080a:	4618      	mov	r0, r3
 800080c:	f001 fd9a 	bl	8002344 <HAL_RCC_ClockConfig>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000816:	f000 f827 	bl	8000868 <Error_Handler>
  }
}
 800081a:	bf00      	nop
 800081c:	3750      	adds	r7, #80	; 0x50
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	80fb      	strh	r3, [r7, #6]
	flag=1;
 800082e:	4b04      	ldr	r3, [pc, #16]	; (8000840 <HAL_GPIO_EXTI_Callback+0x1c>)
 8000830:	2201      	movs	r2, #1
 8000832:	701a      	strb	r2, [r3, #0]
}
 8000834:	bf00      	nop
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	2000008c 	.word	0x2000008c

08000844 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a04      	ldr	r2, [pc, #16]	; (8000864 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d101      	bne.n	800085a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000856:	f000 fdfd 	bl	8001454 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40001000 	.word	0x40001000

08000868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800086c:	b672      	cpsid	i
}
 800086e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000870:	e7fe      	b.n	8000870 <Error_Handler+0x8>
	...

08000874 <motorPowerOn>:

/**
  * @brief  Switch on the motor driver
  * @retval None
  */
void motorPowerOn(void){
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // just for test, you can delete it
 800087a:	2120      	movs	r1, #32
 800087c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000880:	f001 f962 	bl	8001b48 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin,GPIO_PIN_SET);
 8000884:	2201      	movs	r2, #1
 8000886:	2108      	movs	r1, #8
 8000888:	480a      	ldr	r0, [pc, #40]	; (80008b4 <motorPowerOn+0x40>)
 800088a:	f001 f945 	bl	8001b18 <HAL_GPIO_WritePin>
	int i;
	for(i=0;i<70;i++)
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	e002      	b.n	800089a <motorPowerOn+0x26>
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	3301      	adds	r3, #1
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2b45      	cmp	r3, #69	; 0x45
 800089e:	ddf9      	ble.n	8000894 <motorPowerOn+0x20>
	{
	}
    HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin,GPIO_PIN_RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2108      	movs	r1, #8
 80008a4:	4803      	ldr	r0, [pc, #12]	; (80008b4 <motorPowerOn+0x40>)
 80008a6:	f001 f937 	bl	8001b18 <HAL_GPIO_WritePin>
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	48000800 	.word	0x48000800

080008b8 <motorPowerOff>:

/**
  * @brief  Switch off the motor driver
  * @retval None
  */
void motorPowerOff(void){
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // just for test, you can delete it
 80008bc:	2120      	movs	r1, #32
 80008be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c2:	f001 f941 	bl	8001b48 <HAL_GPIO_TogglePin>
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}

080008ca <motorSetSpeed>:
/**
  * @brief  Set the motor speed
  * @param  speed : target speed of the motor
  * @retval None
  */
void motorSetSpeed(int speed){
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b082      	sub	sp, #8
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // just for test, you can delete it
 80008d2:	2120      	movs	r1, #32
 80008d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d8:	f001 f936 	bl	8001b48 <HAL_GPIO_TogglePin>
}
 80008dc:	bf00      	nop
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <set_alpha>:

void set_alpha(int a)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart2, a, sizeof(a), HAL_MAX_DELAY);
	TIM1->CCR1=a*53;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2235      	movs	r2, #53	; 0x35
 80008f0:	fb03 f202 	mul.w	r2, r3, r2
 80008f4:	4b08      	ldr	r3, [pc, #32]	; (8000918 <set_alpha+0x34>)
 80008f6:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2=5311-a*53;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80008fe:	fb02 f303 	mul.w	r3, r2, r3
 8000902:	f503 53a5 	add.w	r3, r3, #5280	; 0x14a0
 8000906:	331f      	adds	r3, #31
 8000908:	4a03      	ldr	r2, [pc, #12]	; (8000918 <set_alpha+0x34>)
 800090a:	6393      	str	r3, [r2, #56]	; 0x38

}
 800090c:	bf00      	nop
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	40012c00 	.word	0x40012c00

0800091c <shellInit>:

/**
  * @brief  Send a stating message
  * @retval None
  */
void shellInit(void){
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 8000920:	f04f 33ff 	mov.w	r3, #4294967295
 8000924:	226c      	movs	r2, #108	; 0x6c
 8000926:	4906      	ldr	r1, [pc, #24]	; (8000940 <shellInit+0x24>)
 8000928:	4806      	ldr	r0, [pc, #24]	; (8000944 <shellInit+0x28>)
 800092a:	f003 ff16 	bl	800475a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 800092e:	f04f 33ff 	mov.w	r3, #4294967295
 8000932:	221a      	movs	r2, #26
 8000934:	4904      	ldr	r1, [pc, #16]	; (8000948 <shellInit+0x2c>)
 8000936:	4803      	ldr	r0, [pc, #12]	; (8000944 <shellInit+0x28>)
 8000938:	f003 ff0f 	bl	800475a <HAL_UART_Transmit>
}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	08007e4c 	.word	0x08007e4c
 8000944:	200001e4 	.word	0x200001e4
 8000948:	08007e30 	.word	0x08007e30

0800094c <shellPrompt>:

/**
  * @brief  Send the prompt
  * @retval None
  */
void shellPrompt(void){
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000950:	f04f 33ff 	mov.w	r3, #4294967295
 8000954:	221a      	movs	r2, #26
 8000956:	4903      	ldr	r1, [pc, #12]	; (8000964 <shellPrompt+0x18>)
 8000958:	4803      	ldr	r0, [pc, #12]	; (8000968 <shellPrompt+0x1c>)
 800095a:	f003 fefe 	bl	800475a <HAL_UART_Transmit>
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	08007e30 	.word	0x08007e30
 8000968:	200001e4 	.word	0x200001e4

0800096c <shellCmdNotFound>:

/**
  * @brief  Send the default message if the command is not found
  * @retval None
  */
void shellCmdNotFound(void){
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000970:	f04f 33ff 	mov.w	r3, #4294967295
 8000974:	2214      	movs	r2, #20
 8000976:	4903      	ldr	r1, [pc, #12]	; (8000984 <shellCmdNotFound+0x18>)
 8000978:	4803      	ldr	r0, [pc, #12]	; (8000988 <shellCmdNotFound+0x1c>)
 800097a:	f003 feee 	bl	800475a <HAL_UART_Transmit>
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	0800812c 	.word	0x0800812c
 8000988:	200001e4 	.word	0x200001e4

0800098c <shellGetChar>:

/**
  * @brief  Function called for saving the new character and call and setup argc and argv variable if ENTER is pressed
  * @retval 1 if a new command is available, 0 if not.
  */
uint8_t shellGetChar(void){
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
	uint8_t newCmdReady = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	71fb      	strb	r3, [r7, #7]
	char* token;

	switch(uartRxBuffer[0]){
 8000996:	4b2f      	ldr	r3, [pc, #188]	; (8000a54 <shellGetChar+0xc8>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b0d      	cmp	r3, #13
 800099c:	d002      	beq.n	80009a4 <shellGetChar+0x18>
 800099e:	2b7f      	cmp	r3, #127	; 0x7f
 80009a0:	d02f      	beq.n	8000a02 <shellGetChar+0x76>
 80009a2:	e040      	b.n	8000a26 <shellGetChar+0x9a>
		// If Enter, update argc and argv
	case ASCII_CR:
		HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 80009a4:	f04f 33ff 	mov.w	r3, #4294967295
 80009a8:	2203      	movs	r2, #3
 80009aa:	492b      	ldr	r1, [pc, #172]	; (8000a58 <shellGetChar+0xcc>)
 80009ac:	482b      	ldr	r0, [pc, #172]	; (8000a5c <shellGetChar+0xd0>)
 80009ae:	f003 fed4 	bl	800475a <HAL_UART_Transmit>
		cmdBuffer[idxCmd] = '\0';
 80009b2:	4b2b      	ldr	r3, [pc, #172]	; (8000a60 <shellGetChar+0xd4>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	461a      	mov	r2, r3
 80009b8:	4b2a      	ldr	r3, [pc, #168]	; (8000a64 <shellGetChar+0xd8>)
 80009ba:	2100      	movs	r1, #0
 80009bc:	5499      	strb	r1, [r3, r2]
		argc = 0;
 80009be:	4b2a      	ldr	r3, [pc, #168]	; (8000a68 <shellGetChar+0xdc>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	701a      	strb	r2, [r3, #0]
		token = (char*)strtok(cmdBuffer, " ");
 80009c4:	4929      	ldr	r1, [pc, #164]	; (8000a6c <shellGetChar+0xe0>)
 80009c6:	4827      	ldr	r0, [pc, #156]	; (8000a64 <shellGetChar+0xd8>)
 80009c8:	f005 ff58 	bl	800687c <strtok>
 80009cc:	6038      	str	r0, [r7, #0]
		while(token!=NULL){
 80009ce:	e00f      	b.n	80009f0 <shellGetChar+0x64>
			argv[argc++] = token;
 80009d0:	4b25      	ldr	r3, [pc, #148]	; (8000a68 <shellGetChar+0xdc>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	1c5a      	adds	r2, r3, #1
 80009d6:	b2d1      	uxtb	r1, r2
 80009d8:	4a23      	ldr	r2, [pc, #140]	; (8000a68 <shellGetChar+0xdc>)
 80009da:	7011      	strb	r1, [r2, #0]
 80009dc:	4619      	mov	r1, r3
 80009de:	4a24      	ldr	r2, [pc, #144]	; (8000a70 <shellGetChar+0xe4>)
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			token = (char*)strtok(NULL, " ");
 80009e6:	4921      	ldr	r1, [pc, #132]	; (8000a6c <shellGetChar+0xe0>)
 80009e8:	2000      	movs	r0, #0
 80009ea:	f005 ff47 	bl	800687c <strtok>
 80009ee:	6038      	str	r0, [r7, #0]
		while(token!=NULL){
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d1ec      	bne.n	80009d0 <shellGetChar+0x44>
		}

		idxCmd = 0;
 80009f6:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <shellGetChar+0xd4>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	701a      	strb	r2, [r3, #0]
		newCmdReady = 1;
 80009fc:	2301      	movs	r3, #1
 80009fe:	71fb      	strb	r3, [r7, #7]
		break;
 8000a00:	e023      	b.n	8000a4a <shellGetChar+0xbe>
		// Delete last character if "return" is pressed
	case ASCII_BS:
		cmdBuffer[idxCmd--] = '\0';
 8000a02:	4b17      	ldr	r3, [pc, #92]	; (8000a60 <shellGetChar+0xd4>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	1e5a      	subs	r2, r3, #1
 8000a08:	b2d1      	uxtb	r1, r2
 8000a0a:	4a15      	ldr	r2, [pc, #84]	; (8000a60 <shellGetChar+0xd4>)
 8000a0c:	7011      	strb	r1, [r2, #0]
 8000a0e:	461a      	mov	r2, r3
 8000a10:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <shellGetChar+0xd8>)
 8000a12:	2100      	movs	r1, #0
 8000a14:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&huart2, uartRxBuffer, 1, HAL_MAX_DELAY);
 8000a16:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	490d      	ldr	r1, [pc, #52]	; (8000a54 <shellGetChar+0xc8>)
 8000a1e:	480f      	ldr	r0, [pc, #60]	; (8000a5c <shellGetChar+0xd0>)
 8000a20:	f003 fe9b 	bl	800475a <HAL_UART_Transmit>
		break;
 8000a24:	e011      	b.n	8000a4a <shellGetChar+0xbe>
		// Default state : add new character to the command buffer
	default:
		cmdBuffer[idxCmd++] = uartRxBuffer[0];
 8000a26:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <shellGetChar+0xd4>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	1c5a      	adds	r2, r3, #1
 8000a2c:	b2d1      	uxtb	r1, r2
 8000a2e:	4a0c      	ldr	r2, [pc, #48]	; (8000a60 <shellGetChar+0xd4>)
 8000a30:	7011      	strb	r1, [r2, #0]
 8000a32:	461a      	mov	r2, r3
 8000a34:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <shellGetChar+0xc8>)
 8000a36:	7819      	ldrb	r1, [r3, #0]
 8000a38:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <shellGetChar+0xd8>)
 8000a3a:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&huart2, uartRxBuffer, 1, HAL_MAX_DELAY);
 8000a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a40:	2201      	movs	r2, #1
 8000a42:	4904      	ldr	r1, [pc, #16]	; (8000a54 <shellGetChar+0xc8>)
 8000a44:	4805      	ldr	r0, [pc, #20]	; (8000a5c <shellGetChar+0xd0>)
 8000a46:	f003 fe88 	bl	800475a <HAL_UART_Transmit>
	}

	return newCmdReady;
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	2000019c 	.word	0x2000019c
 8000a58:	08007eb8 	.word	0x08007eb8
 8000a5c:	200001e4 	.word	0x200001e4
 8000a60:	200000d0 	.word	0x200000d0
 8000a64:	20000090 	.word	0x20000090
 8000a68:	200000f8 	.word	0x200000f8
 8000a6c:	08007dd0 	.word	0x08007dd0
 8000a70:	200000d4 	.word	0x200000d4

08000a74 <shellExec>:

/**
  * @brief  Call function depends of the value of argc and argv
  * @retval None
  */
void shellExec(void){
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
	if(strcmp(argv[0],"set")==0){
 8000a78:	4b79      	ldr	r3, [pc, #484]	; (8000c60 <shellExec+0x1ec>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4979      	ldr	r1, [pc, #484]	; (8000c64 <shellExec+0x1f0>)
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff fbce 	bl	8000220 <strcmp>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d16f      	bne.n	8000b6a <shellExec+0xf6>
		if(strcmp(argv[1],"PA5")==0 && ((strcmp(argv[2],"0")==0)||(strcmp(argv[2],"1")==0)) ){
 8000a8a:	4b75      	ldr	r3, [pc, #468]	; (8000c60 <shellExec+0x1ec>)
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	4976      	ldr	r1, [pc, #472]	; (8000c68 <shellExec+0x1f4>)
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fbc5 	bl	8000220 <strcmp>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d137      	bne.n	8000b0c <shellExec+0x98>
 8000a9c:	4b70      	ldr	r3, [pc, #448]	; (8000c60 <shellExec+0x1ec>)
 8000a9e:	689b      	ldr	r3, [r3, #8]
 8000aa0:	4972      	ldr	r1, [pc, #456]	; (8000c6c <shellExec+0x1f8>)
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff fbbc 	bl	8000220 <strcmp>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d008      	beq.n	8000ac0 <shellExec+0x4c>
 8000aae:	4b6c      	ldr	r3, [pc, #432]	; (8000c60 <shellExec+0x1ec>)
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	496f      	ldr	r1, [pc, #444]	; (8000c70 <shellExec+0x1fc>)
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff fbb3 	bl	8000220 <strcmp>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d125      	bne.n	8000b0c <shellExec+0x98>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, atoi(argv[2]));
 8000ac0:	4b67      	ldr	r3, [pc, #412]	; (8000c60 <shellExec+0x1ec>)
 8000ac2:	689b      	ldr	r3, [r3, #8]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f005 fe6f 	bl	80067a8 <atoi>
 8000aca:	4603      	mov	r3, r0
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	461a      	mov	r2, r3
 8000ad0:	2120      	movs	r1, #32
 8000ad2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad6:	f001 f81f 	bl	8001b18 <HAL_GPIO_WritePin>
			stringSize = snprintf((char*)uartTxBuffer,UART_TX_BUFFER_SIZE,"Switch on/off led : %d\r\n",atoi(argv[2]));
 8000ada:	4b61      	ldr	r3, [pc, #388]	; (8000c60 <shellExec+0x1ec>)
 8000adc:	689b      	ldr	r3, [r3, #8]
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f005 fe62 	bl	80067a8 <atoi>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	4a63      	ldr	r2, [pc, #396]	; (8000c74 <shellExec+0x200>)
 8000ae8:	2140      	movs	r1, #64	; 0x40
 8000aea:	4863      	ldr	r0, [pc, #396]	; (8000c78 <shellExec+0x204>)
 8000aec:	f005 fe92 	bl	8006814 <sniprintf>
 8000af0:	4603      	mov	r3, r0
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	4b61      	ldr	r3, [pc, #388]	; (8000c7c <shellExec+0x208>)
 8000af6:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, uartTxBuffer, stringSize, HAL_MAX_DELAY);
 8000af8:	4b60      	ldr	r3, [pc, #384]	; (8000c7c <shellExec+0x208>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	b29a      	uxth	r2, r3
 8000afe:	f04f 33ff 	mov.w	r3, #4294967295
 8000b02:	495d      	ldr	r1, [pc, #372]	; (8000c78 <shellExec+0x204>)
 8000b04:	485e      	ldr	r0, [pc, #376]	; (8000c80 <shellExec+0x20c>)
 8000b06:	f003 fe28 	bl	800475a <HAL_UART_Transmit>
 8000b0a:	e0a7      	b.n	8000c5c <shellExec+0x1e8>
		}
		else if(strcmp(argv[1],"speed")==0){
 8000b0c:	4b54      	ldr	r3, [pc, #336]	; (8000c60 <shellExec+0x1ec>)
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	495c      	ldr	r1, [pc, #368]	; (8000c84 <shellExec+0x210>)
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff fb84 	bl	8000220 <strcmp>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d122      	bne.n	8000b64 <shellExec+0xf0>
			if(atoi(argv[2])==0 && strcmp(argv[2],"0")!=0){
 8000b1e:	4b50      	ldr	r3, [pc, #320]	; (8000c60 <shellExec+0x1ec>)
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f005 fe40 	bl	80067a8 <atoi>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d110      	bne.n	8000b50 <shellExec+0xdc>
 8000b2e:	4b4c      	ldr	r3, [pc, #304]	; (8000c60 <shellExec+0x1ec>)
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	494e      	ldr	r1, [pc, #312]	; (8000c6c <shellExec+0x1f8>)
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff fb73 	bl	8000220 <strcmp>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d007      	beq.n	8000b50 <shellExec+0xdc>
				HAL_UART_Transmit(&huart2, motorSpeedInst, sizeof(motorSpeedInst), HAL_MAX_DELAY);
 8000b40:	f04f 33ff 	mov.w	r3, #4294967295
 8000b44:	2230      	movs	r2, #48	; 0x30
 8000b46:	4950      	ldr	r1, [pc, #320]	; (8000c88 <shellExec+0x214>)
 8000b48:	484d      	ldr	r0, [pc, #308]	; (8000c80 <shellExec+0x20c>)
 8000b4a:	f003 fe06 	bl	800475a <HAL_UART_Transmit>
 8000b4e:	e085      	b.n	8000c5c <shellExec+0x1e8>
			}
			else{
				motorSetSpeed(atoi(argv[2]));
 8000b50:	4b43      	ldr	r3, [pc, #268]	; (8000c60 <shellExec+0x1ec>)
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f005 fe27 	bl	80067a8 <atoi>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff feb4 	bl	80008ca <motorSetSpeed>
		set_alpha(atoi(argv[1]));
	}
	else{
		shellCmdNotFound();
	}
}
 8000b62:	e07b      	b.n	8000c5c <shellExec+0x1e8>
			shellCmdNotFound();
 8000b64:	f7ff ff02 	bl	800096c <shellCmdNotFound>
}
 8000b68:	e078      	b.n	8000c5c <shellExec+0x1e8>
	else if(strcmp(argv[0],"help")==0)
 8000b6a:	4b3d      	ldr	r3, [pc, #244]	; (8000c60 <shellExec+0x1ec>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4947      	ldr	r1, [pc, #284]	; (8000c8c <shellExec+0x218>)
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff fb55 	bl	8000220 <strcmp>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d108      	bne.n	8000b8e <shellExec+0x11a>
		HAL_UART_Transmit(&huart2, help, sizeof(help), HAL_MAX_DELAY);
 8000b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b80:	f44f 7281 	mov.w	r2, #258	; 0x102
 8000b84:	4942      	ldr	r1, [pc, #264]	; (8000c90 <shellExec+0x21c>)
 8000b86:	483e      	ldr	r0, [pc, #248]	; (8000c80 <shellExec+0x20c>)
 8000b88:	f003 fde7 	bl	800475a <HAL_UART_Transmit>
}
 8000b8c:	e066      	b.n	8000c5c <shellExec+0x1e8>
	else if(strcmp(argv[0],"pinout")==0)
 8000b8e:	4b34      	ldr	r3, [pc, #208]	; (8000c60 <shellExec+0x1ec>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4940      	ldr	r1, [pc, #256]	; (8000c94 <shellExec+0x220>)
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff fb43 	bl	8000220 <strcmp>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d108      	bne.n	8000bb2 <shellExec+0x13e>
		HAL_UART_Transmit(&huart2, pinout, sizeof(pinout), HAL_MAX_DELAY);
 8000ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba4:	f44f 7281 	mov.w	r2, #258	; 0x102
 8000ba8:	493b      	ldr	r1, [pc, #236]	; (8000c98 <shellExec+0x224>)
 8000baa:	4835      	ldr	r0, [pc, #212]	; (8000c80 <shellExec+0x20c>)
 8000bac:	f003 fdd5 	bl	800475a <HAL_UART_Transmit>
}
 8000bb0:	e054      	b.n	8000c5c <shellExec+0x1e8>
	else if((strcmp(argv[0],"power")==0)&&(strcmp(argv[1],"on")==0))
 8000bb2:	4b2b      	ldr	r3, [pc, #172]	; (8000c60 <shellExec+0x1ec>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4939      	ldr	r1, [pc, #228]	; (8000c9c <shellExec+0x228>)
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff fb31 	bl	8000220 <strcmp>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d112      	bne.n	8000bea <shellExec+0x176>
 8000bc4:	4b26      	ldr	r3, [pc, #152]	; (8000c60 <shellExec+0x1ec>)
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	4935      	ldr	r1, [pc, #212]	; (8000ca0 <shellExec+0x22c>)
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff fb28 	bl	8000220 <strcmp>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d109      	bne.n	8000bea <shellExec+0x176>
		HAL_UART_Transmit(&huart2, powerOn, sizeof(powerOn), HAL_MAX_DELAY);
 8000bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bda:	221a      	movs	r2, #26
 8000bdc:	4931      	ldr	r1, [pc, #196]	; (8000ca4 <shellExec+0x230>)
 8000bde:	4828      	ldr	r0, [pc, #160]	; (8000c80 <shellExec+0x20c>)
 8000be0:	f003 fdbb 	bl	800475a <HAL_UART_Transmit>
		motorPowerOn();
 8000be4:	f7ff fe46 	bl	8000874 <motorPowerOn>
 8000be8:	e038      	b.n	8000c5c <shellExec+0x1e8>
	else if((strcmp(argv[0],"power")==0)&&(strcmp(argv[1],"off")==0))
 8000bea:	4b1d      	ldr	r3, [pc, #116]	; (8000c60 <shellExec+0x1ec>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	492b      	ldr	r1, [pc, #172]	; (8000c9c <shellExec+0x228>)
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff fb15 	bl	8000220 <strcmp>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d112      	bne.n	8000c22 <shellExec+0x1ae>
 8000bfc:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <shellExec+0x1ec>)
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	4929      	ldr	r1, [pc, #164]	; (8000ca8 <shellExec+0x234>)
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff fb0c 	bl	8000220 <strcmp>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d109      	bne.n	8000c22 <shellExec+0x1ae>
		HAL_UART_Transmit(&huart2, powerOff, sizeof(powerOff), HAL_MAX_DELAY);
 8000c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c12:	221b      	movs	r2, #27
 8000c14:	4925      	ldr	r1, [pc, #148]	; (8000cac <shellExec+0x238>)
 8000c16:	481a      	ldr	r0, [pc, #104]	; (8000c80 <shellExec+0x20c>)
 8000c18:	f003 fd9f 	bl	800475a <HAL_UART_Transmit>
		motorPowerOff();
 8000c1c:	f7ff fe4c 	bl	80008b8 <motorPowerOff>
 8000c20:	e01c      	b.n	8000c5c <shellExec+0x1e8>
	else if((strcmp(argv[0],"alpha")==0))
 8000c22:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <shellExec+0x1ec>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4922      	ldr	r1, [pc, #136]	; (8000cb0 <shellExec+0x23c>)
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff faf9 	bl	8000220 <strcmp>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d110      	bne.n	8000c56 <shellExec+0x1e2>
		HAL_UART_Transmit(&huart2, alpha, sizeof(alpha), HAL_MAX_DELAY);
 8000c34:	f04f 33ff 	mov.w	r3, #4294967295
 8000c38:	2213      	movs	r2, #19
 8000c3a:	491e      	ldr	r1, [pc, #120]	; (8000cb4 <shellExec+0x240>)
 8000c3c:	4810      	ldr	r0, [pc, #64]	; (8000c80 <shellExec+0x20c>)
 8000c3e:	f003 fd8c 	bl	800475a <HAL_UART_Transmit>
		set_alpha(atoi(argv[1]));
 8000c42:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <shellExec+0x1ec>)
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	4618      	mov	r0, r3
 8000c48:	f005 fdae 	bl	80067a8 <atoi>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff fe48 	bl	80008e4 <set_alpha>
}
 8000c54:	e002      	b.n	8000c5c <shellExec+0x1e8>
		shellCmdNotFound();
 8000c56:	f7ff fe89 	bl	800096c <shellCmdNotFound>
}
 8000c5a:	e7ff      	b.n	8000c5c <shellExec+0x1e8>
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	200000d4 	.word	0x200000d4
 8000c64:	08007dd4 	.word	0x08007dd4
 8000c68:	08007dd8 	.word	0x08007dd8
 8000c6c:	08007ddc 	.word	0x08007ddc
 8000c70:	08007de0 	.word	0x08007de0
 8000c74:	08007de4 	.word	0x08007de4
 8000c78:	200001a0 	.word	0x200001a0
 8000c7c:	200001e0 	.word	0x200001e0
 8000c80:	200001e4 	.word	0x200001e4
 8000c84:	08007e00 	.word	0x08007e00
 8000c88:	080080fc 	.word	0x080080fc
 8000c8c:	08007e08 	.word	0x08007e08
 8000c90:	08007ebc 	.word	0x08007ebc
 8000c94:	08007e10 	.word	0x08007e10
 8000c98:	08007fc0 	.word	0x08007fc0
 8000c9c:	08007e18 	.word	0x08007e18
 8000ca0:	08007e20 	.word	0x08007e20
 8000ca4:	080080c4 	.word	0x080080c4
 8000ca8:	08007e24 	.word	0x08007e24
 8000cac:	080080e0 	.word	0x080080e0
 8000cb0:	08007e28 	.word	0x08007e28
 8000cb4:	08008140 	.word	0x08008140

08000cb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cbe:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <HAL_MspInit+0x44>)
 8000cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cc2:	4a0e      	ldr	r2, [pc, #56]	; (8000cfc <HAL_MspInit+0x44>)
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	6613      	str	r3, [r2, #96]	; 0x60
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <HAL_MspInit+0x44>)
 8000ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <HAL_MspInit+0x44>)
 8000cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cda:	4a08      	ldr	r2, [pc, #32]	; (8000cfc <HAL_MspInit+0x44>)
 8000cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_MspInit+0x44>)
 8000ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cea:	603b      	str	r3, [r7, #0]
 8000cec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000cee:	f001 f801 	bl	8001cf4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40021000 	.word	0x40021000

08000d00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08c      	sub	sp, #48	; 0x30
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000d10:	2300      	movs	r3, #0
 8000d12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d16:	4b2d      	ldr	r3, [pc, #180]	; (8000dcc <HAL_InitTick+0xcc>)
 8000d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d1a:	4a2c      	ldr	r2, [pc, #176]	; (8000dcc <HAL_InitTick+0xcc>)
 8000d1c:	f043 0310 	orr.w	r3, r3, #16
 8000d20:	6593      	str	r3, [r2, #88]	; 0x58
 8000d22:	4b2a      	ldr	r3, [pc, #168]	; (8000dcc <HAL_InitTick+0xcc>)
 8000d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d26:	f003 0310 	and.w	r3, r3, #16
 8000d2a:	60bb      	str	r3, [r7, #8]
 8000d2c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d2e:	f107 020c 	add.w	r2, r7, #12
 8000d32:	f107 0310 	add.w	r3, r7, #16
 8000d36:	4611      	mov	r1, r2
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f001 fcd9 	bl	80026f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d3e:	f001 fcab 	bl	8002698 <HAL_RCC_GetPCLK1Freq>
 8000d42:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d46:	4a22      	ldr	r2, [pc, #136]	; (8000dd0 <HAL_InitTick+0xd0>)
 8000d48:	fba2 2303 	umull	r2, r3, r2, r3
 8000d4c:	0c9b      	lsrs	r3, r3, #18
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d52:	4b20      	ldr	r3, [pc, #128]	; (8000dd4 <HAL_InitTick+0xd4>)
 8000d54:	4a20      	ldr	r2, [pc, #128]	; (8000dd8 <HAL_InitTick+0xd8>)
 8000d56:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d58:	4b1e      	ldr	r3, [pc, #120]	; (8000dd4 <HAL_InitTick+0xd4>)
 8000d5a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d5e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d60:	4a1c      	ldr	r2, [pc, #112]	; (8000dd4 <HAL_InitTick+0xd4>)
 8000d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d64:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d66:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <HAL_InitTick+0xd4>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d6c:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <HAL_InitTick+0xd4>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000d72:	4818      	ldr	r0, [pc, #96]	; (8000dd4 <HAL_InitTick+0xd4>)
 8000d74:	f001 ff82 	bl	8002c7c <HAL_TIM_Base_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000d7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d11b      	bne.n	8000dbe <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d86:	4813      	ldr	r0, [pc, #76]	; (8000dd4 <HAL_InitTick+0xd4>)
 8000d88:	f001 ffd0 	bl	8002d2c <HAL_TIM_Base_Start_IT>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000d92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d111      	bne.n	8000dbe <HAL_InitTick+0xbe>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d9a:	2036      	movs	r0, #54	; 0x36
 8000d9c:	f000 fc6c 	bl	8001678 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b0f      	cmp	r3, #15
 8000da4:	d808      	bhi.n	8000db8 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000da6:	2200      	movs	r2, #0
 8000da8:	6879      	ldr	r1, [r7, #4]
 8000daa:	2036      	movs	r0, #54	; 0x36
 8000dac:	f000 fc4a 	bl	8001644 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000db0:	4a0a      	ldr	r2, [pc, #40]	; (8000ddc <HAL_InitTick+0xdc>)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6013      	str	r3, [r2, #0]
 8000db6:	e002      	b.n	8000dbe <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000db8:	2301      	movs	r3, #1
 8000dba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000dbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3730      	adds	r7, #48	; 0x30
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	431bde83 	.word	0x431bde83
 8000dd4:	200000fc 	.word	0x200000fc
 8000dd8:	40001000 	.word	0x40001000
 8000ddc:	20000004 	.word	0x20000004

08000de0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <NMI_Handler+0x4>

08000de6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dea:	e7fe      	b.n	8000dea <HardFault_Handler+0x4>

08000dec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <MemManage_Handler+0x4>

08000df2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000df6:	e7fe      	b.n	8000df6 <BusFault_Handler+0x4>

08000df8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <UsageFault_Handler+0x4>

08000dfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr

08000e1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
	...

08000e38 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e3c:	4802      	ldr	r0, [pc, #8]	; (8000e48 <USART2_IRQHandler+0x10>)
 8000e3e:	f003 fd79 	bl	8004934 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	200001e4 	.word	0x200001e4

08000e4c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8000e50:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e54:	f000 fe92 	bl	8001b7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e60:	4802      	ldr	r0, [pc, #8]	; (8000e6c <TIM6_DAC_IRQHandler+0x10>)
 8000e62:	f002 f94f 	bl	8003104 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	200000fc 	.word	0x200000fc

08000e70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
	return 1;
 8000e74:	2301      	movs	r3, #1
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <_kill>:

int _kill(int pid, int sig)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000e8a:	f005 fc91 	bl	80067b0 <__errno>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2216      	movs	r2, #22
 8000e92:	601a      	str	r2, [r3, #0]
	return -1;
 8000e94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <_exit>:

void _exit (int status)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f7ff ffe7 	bl	8000e80 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000eb2:	e7fe      	b.n	8000eb2 <_exit+0x12>

08000eb4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]
 8000ec4:	e00a      	b.n	8000edc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ec6:	f3af 8000 	nop.w
 8000eca:	4601      	mov	r1, r0
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	1c5a      	adds	r2, r3, #1
 8000ed0:	60ba      	str	r2, [r7, #8]
 8000ed2:	b2ca      	uxtb	r2, r1
 8000ed4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	617b      	str	r3, [r7, #20]
 8000edc:	697a      	ldr	r2, [r7, #20]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	dbf0      	blt.n	8000ec6 <_read+0x12>
	}

return len;
 8000ee4:	687b      	ldr	r3, [r7, #4]
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3718      	adds	r7, #24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b086      	sub	sp, #24
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	60f8      	str	r0, [r7, #12]
 8000ef6:	60b9      	str	r1, [r7, #8]
 8000ef8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
 8000efe:	e009      	b.n	8000f14 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	1c5a      	adds	r2, r3, #1
 8000f04:	60ba      	str	r2, [r7, #8]
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	3301      	adds	r3, #1
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	697a      	ldr	r2, [r7, #20]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	dbf1      	blt.n	8000f00 <_write+0x12>
	}
	return len;
 8000f1c:	687b      	ldr	r3, [r7, #4]
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3718      	adds	r7, #24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <_close>:

int _close(int file)
{
 8000f26:	b480      	push	{r7}
 8000f28:	b083      	sub	sp, #12
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
	return -1;
 8000f2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b083      	sub	sp, #12
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
 8000f46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f4e:	605a      	str	r2, [r3, #4]
	return 0;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <_isatty>:

int _isatty(int file)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b083      	sub	sp, #12
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
	return 1;
 8000f66:	2301      	movs	r3, #1
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
	return 0;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
	...

08000f90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f98:	4a14      	ldr	r2, [pc, #80]	; (8000fec <_sbrk+0x5c>)
 8000f9a:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <_sbrk+0x60>)
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fa4:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <_sbrk+0x64>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d102      	bne.n	8000fb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <_sbrk+0x64>)
 8000fae:	4a12      	ldr	r2, [pc, #72]	; (8000ff8 <_sbrk+0x68>)
 8000fb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fb2:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <_sbrk+0x64>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4413      	add	r3, r2
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d207      	bcs.n	8000fd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fc0:	f005 fbf6 	bl	80067b0 <__errno>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fca:	f04f 33ff 	mov.w	r3, #4294967295
 8000fce:	e009      	b.n	8000fe4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fd0:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <_sbrk+0x64>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fd6:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <_sbrk+0x64>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4413      	add	r3, r2
 8000fde:	4a05      	ldr	r2, [pc, #20]	; (8000ff4 <_sbrk+0x64>)
 8000fe0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3718      	adds	r7, #24
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20020000 	.word	0x20020000
 8000ff0:	00000400 	.word	0x00000400
 8000ff4:	20000148 	.word	0x20000148
 8000ff8:	20000288 	.word	0x20000288

08000ffc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001000:	4b06      	ldr	r3, [pc, #24]	; (800101c <SystemInit+0x20>)
 8001002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001006:	4a05      	ldr	r2, [pc, #20]	; (800101c <SystemInit+0x20>)
 8001008:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800100c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b09c      	sub	sp, #112	; 0x70
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001026:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
 8001032:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001034:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001040:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
 8001050:	615a      	str	r2, [r3, #20]
 8001052:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	2234      	movs	r2, #52	; 0x34
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f005 fbd2 	bl	8006804 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001060:	4b4c      	ldr	r3, [pc, #304]	; (8001194 <MX_TIM1_Init+0x174>)
 8001062:	4a4d      	ldr	r2, [pc, #308]	; (8001198 <MX_TIM1_Init+0x178>)
 8001064:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001066:	4b4b      	ldr	r3, [pc, #300]	; (8001194 <MX_TIM1_Init+0x174>)
 8001068:	2200      	movs	r2, #0
 800106a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800106c:	4b49      	ldr	r3, [pc, #292]	; (8001194 <MX_TIM1_Init+0x174>)
 800106e:	2220      	movs	r2, #32
 8001070:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5311;
 8001072:	4b48      	ldr	r3, [pc, #288]	; (8001194 <MX_TIM1_Init+0x174>)
 8001074:	f241 42bf 	movw	r2, #5311	; 0x14bf
 8001078:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800107a:	4b46      	ldr	r3, [pc, #280]	; (8001194 <MX_TIM1_Init+0x174>)
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001080:	4b44      	ldr	r3, [pc, #272]	; (8001194 <MX_TIM1_Init+0x174>)
 8001082:	2200      	movs	r2, #0
 8001084:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001086:	4b43      	ldr	r3, [pc, #268]	; (8001194 <MX_TIM1_Init+0x174>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800108c:	4841      	ldr	r0, [pc, #260]	; (8001194 <MX_TIM1_Init+0x174>)
 800108e:	f001 fdf5 	bl	8002c7c <HAL_TIM_Base_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001098:	f7ff fbe6 	bl	8000868 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800109c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a0:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010a2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80010a6:	4619      	mov	r1, r3
 80010a8:	483a      	ldr	r0, [pc, #232]	; (8001194 <MX_TIM1_Init+0x174>)
 80010aa:	f002 fabf 	bl	800362c <HAL_TIM_ConfigClockSource>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80010b4:	f7ff fbd8 	bl	8000868 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010b8:	4836      	ldr	r0, [pc, #216]	; (8001194 <MX_TIM1_Init+0x174>)
 80010ba:	f001 feaf 	bl	8002e1c <HAL_TIM_PWM_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80010c4:	f7ff fbd0 	bl	8000868 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010c8:	2300      	movs	r3, #0
 80010ca:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010cc:	2300      	movs	r3, #0
 80010ce:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d0:	2300      	movs	r3, #0
 80010d2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010d8:	4619      	mov	r1, r3
 80010da:	482e      	ldr	r0, [pc, #184]	; (8001194 <MX_TIM1_Init+0x174>)
 80010dc:	f003 f93a 	bl	8004354 <HAL_TIMEx_MasterConfigSynchronization>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80010e6:	f7ff fbbf 	bl	8000868 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010ea:	2360      	movs	r3, #96	; 0x60
 80010ec:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 2655;
 80010ee:	f640 235f 	movw	r3, #2655	; 0xa5f
 80010f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010f4:	2300      	movs	r3, #0
 80010f6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010f8:	2300      	movs	r3, #0
 80010fa:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010fc:	2300      	movs	r3, #0
 80010fe:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001100:	2300      	movs	r3, #0
 8001102:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001104:	2300      	movs	r3, #0
 8001106:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001108:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800110c:	2200      	movs	r2, #0
 800110e:	4619      	mov	r1, r3
 8001110:	4820      	ldr	r0, [pc, #128]	; (8001194 <MX_TIM1_Init+0x174>)
 8001112:	f002 f977 	bl	8003404 <HAL_TIM_PWM_ConfigChannel>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 800111c:	f7ff fba4 	bl	8000868 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001120:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001124:	2204      	movs	r2, #4
 8001126:	4619      	mov	r1, r3
 8001128:	481a      	ldr	r0, [pc, #104]	; (8001194 <MX_TIM1_Init+0x174>)
 800112a:	f002 f96b 	bl	8003404 <HAL_TIM_PWM_ConfigChannel>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001134:	f7ff fb98 	bl	8000868 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001138:	2300      	movs	r3, #0
 800113a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800113c:	2300      	movs	r3, #0
 800113e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001140:	2300      	movs	r3, #0
 8001142:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 205;
 8001144:	23cd      	movs	r3, #205	; 0xcd
 8001146:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800114c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001150:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001156:	2300      	movs	r3, #0
 8001158:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800115a:	2300      	movs	r3, #0
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800115e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001162:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001168:	2300      	movs	r3, #0
 800116a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800116c:	2300      	movs	r3, #0
 800116e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	4619      	mov	r1, r3
 8001174:	4807      	ldr	r0, [pc, #28]	; (8001194 <MX_TIM1_Init+0x174>)
 8001176:	f003 f983 	bl	8004480 <HAL_TIMEx_ConfigBreakDeadTime>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 8001180:	f7ff fb72 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001184:	4803      	ldr	r0, [pc, #12]	; (8001194 <MX_TIM1_Init+0x174>)
 8001186:	f000 f829 	bl	80011dc <HAL_TIM_MspPostInit>

}
 800118a:	bf00      	nop
 800118c:	3770      	adds	r7, #112	; 0x70
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	2000014c 	.word	0x2000014c
 8001198:	40012c00 	.word	0x40012c00

0800119c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a0a      	ldr	r2, [pc, #40]	; (80011d4 <HAL_TIM_Base_MspInit+0x38>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d10b      	bne.n	80011c6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011ae:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <HAL_TIM_Base_MspInit+0x3c>)
 80011b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011b2:	4a09      	ldr	r2, [pc, #36]	; (80011d8 <HAL_TIM_Base_MspInit+0x3c>)
 80011b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011b8:	6613      	str	r3, [r2, #96]	; 0x60
 80011ba:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <HAL_TIM_Base_MspInit+0x3c>)
 80011bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80011c6:	bf00      	nop
 80011c8:	3714      	adds	r7, #20
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	40012c00 	.word	0x40012c00
 80011d8:	40021000 	.word	0x40021000

080011dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b088      	sub	sp, #32
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a12      	ldr	r2, [pc, #72]	; (8001244 <HAL_TIM_MspPostInit+0x68>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d11d      	bne.n	800123a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fe:	4b12      	ldr	r3, [pc, #72]	; (8001248 <HAL_TIM_MspPostInit+0x6c>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001202:	4a11      	ldr	r2, [pc, #68]	; (8001248 <HAL_TIM_MspPostInit+0x6c>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	64d3      	str	r3, [r2, #76]	; 0x4c
 800120a:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <HAL_TIM_MspPostInit+0x6c>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8001216:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 800121a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121c:	2302      	movs	r3, #2
 800121e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001224:	2300      	movs	r3, #0
 8001226:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001228:	2306      	movs	r3, #6
 800122a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122c:	f107 030c 	add.w	r3, r7, #12
 8001230:	4619      	mov	r1, r3
 8001232:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001236:	f000 faed 	bl	8001814 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800123a:	bf00      	nop
 800123c:	3720      	adds	r7, #32
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40012c00 	.word	0x40012c00
 8001248:	40021000 	.word	0x40021000

0800124c <HAL_UART_RxCpltCallback>:

/**
  * @brief  Function called at each new character received
  * @retval None
  */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8001254:	4b05      	ldr	r3, [pc, #20]	; (800126c <HAL_UART_RxCpltCallback+0x20>)
 8001256:	2201      	movs	r2, #1
 8001258:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 800125a:	2201      	movs	r2, #1
 800125c:	4904      	ldr	r1, [pc, #16]	; (8001270 <HAL_UART_RxCpltCallback+0x24>)
 800125e:	4805      	ldr	r0, [pc, #20]	; (8001274 <HAL_UART_RxCpltCallback+0x28>)
 8001260:	f003 fb12 	bl	8004888 <HAL_UART_Receive_IT>
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000198 	.word	0x20000198
 8001270:	2000019c 	.word	0x2000019c
 8001274:	200001e4 	.word	0x200001e4

08001278 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800127c:	4b22      	ldr	r3, [pc, #136]	; (8001308 <MX_USART2_UART_Init+0x90>)
 800127e:	4a23      	ldr	r2, [pc, #140]	; (800130c <MX_USART2_UART_Init+0x94>)
 8001280:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001282:	4b21      	ldr	r3, [pc, #132]	; (8001308 <MX_USART2_UART_Init+0x90>)
 8001284:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001288:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800128a:	4b1f      	ldr	r3, [pc, #124]	; (8001308 <MX_USART2_UART_Init+0x90>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001290:	4b1d      	ldr	r3, [pc, #116]	; (8001308 <MX_USART2_UART_Init+0x90>)
 8001292:	2200      	movs	r2, #0
 8001294:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001296:	4b1c      	ldr	r3, [pc, #112]	; (8001308 <MX_USART2_UART_Init+0x90>)
 8001298:	2200      	movs	r2, #0
 800129a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800129c:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <MX_USART2_UART_Init+0x90>)
 800129e:	220c      	movs	r2, #12
 80012a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012a2:	4b19      	ldr	r3, [pc, #100]	; (8001308 <MX_USART2_UART_Init+0x90>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a8:	4b17      	ldr	r3, [pc, #92]	; (8001308 <MX_USART2_UART_Init+0x90>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ae:	4b16      	ldr	r3, [pc, #88]	; (8001308 <MX_USART2_UART_Init+0x90>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012b4:	4b14      	ldr	r3, [pc, #80]	; (8001308 <MX_USART2_UART_Init+0x90>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012ba:	4b13      	ldr	r3, [pc, #76]	; (8001308 <MX_USART2_UART_Init+0x90>)
 80012bc:	2200      	movs	r2, #0
 80012be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012c0:	4811      	ldr	r0, [pc, #68]	; (8001308 <MX_USART2_UART_Init+0x90>)
 80012c2:	f003 f9fa 	bl	80046ba <HAL_UART_Init>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80012cc:	f7ff facc 	bl	8000868 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012d0:	2100      	movs	r1, #0
 80012d2:	480d      	ldr	r0, [pc, #52]	; (8001308 <MX_USART2_UART_Init+0x90>)
 80012d4:	f005 f99d 	bl	8006612 <HAL_UARTEx_SetTxFifoThreshold>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80012de:	f7ff fac3 	bl	8000868 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012e2:	2100      	movs	r1, #0
 80012e4:	4808      	ldr	r0, [pc, #32]	; (8001308 <MX_USART2_UART_Init+0x90>)
 80012e6:	f005 f9d2 	bl	800668e <HAL_UARTEx_SetRxFifoThreshold>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80012f0:	f7ff faba 	bl	8000868 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80012f4:	4804      	ldr	r0, [pc, #16]	; (8001308 <MX_USART2_UART_Init+0x90>)
 80012f6:	f005 f953 	bl	80065a0 <HAL_UARTEx_DisableFifoMode>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001300:	f7ff fab2 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}
 8001308:	200001e4 	.word	0x200001e4
 800130c:	40004400 	.word	0x40004400

08001310 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b09e      	sub	sp, #120	; 0x78
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001318:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001328:	f107 0310 	add.w	r3, r7, #16
 800132c:	2254      	movs	r2, #84	; 0x54
 800132e:	2100      	movs	r1, #0
 8001330:	4618      	mov	r0, r3
 8001332:	f005 fa67 	bl	8006804 <memset>
  if(uartHandle->Instance==USART2)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a23      	ldr	r2, [pc, #140]	; (80013c8 <HAL_UART_MspInit+0xb8>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d13e      	bne.n	80013be <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001340:	2302      	movs	r3, #2
 8001342:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001344:	2300      	movs	r3, #0
 8001346:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001348:	f107 0310 	add.w	r3, r7, #16
 800134c:	4618      	mov	r0, r3
 800134e:	f001 fa47 	bl	80027e0 <HAL_RCCEx_PeriphCLKConfig>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001358:	f7ff fa86 	bl	8000868 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800135c:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <HAL_UART_MspInit+0xbc>)
 800135e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001360:	4a1a      	ldr	r2, [pc, #104]	; (80013cc <HAL_UART_MspInit+0xbc>)
 8001362:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001366:	6593      	str	r3, [r2, #88]	; 0x58
 8001368:	4b18      	ldr	r3, [pc, #96]	; (80013cc <HAL_UART_MspInit+0xbc>)
 800136a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800136c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001374:	4b15      	ldr	r3, [pc, #84]	; (80013cc <HAL_UART_MspInit+0xbc>)
 8001376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001378:	4a14      	ldr	r2, [pc, #80]	; (80013cc <HAL_UART_MspInit+0xbc>)
 800137a:	f043 0301 	orr.w	r3, r3, #1
 800137e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001380:	4b12      	ldr	r3, [pc, #72]	; (80013cc <HAL_UART_MspInit+0xbc>)
 8001382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001384:	f003 0301 	and.w	r3, r3, #1
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800138c:	230c      	movs	r3, #12
 800138e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001390:	2302      	movs	r3, #2
 8001392:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	2300      	movs	r3, #0
 800139a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800139c:	2307      	movs	r3, #7
 800139e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80013a4:	4619      	mov	r1, r3
 80013a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013aa:	f000 fa33 	bl	8001814 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2100      	movs	r1, #0
 80013b2:	2026      	movs	r0, #38	; 0x26
 80013b4:	f000 f946 	bl	8001644 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013b8:	2026      	movs	r0, #38	; 0x26
 80013ba:	f000 f95d 	bl	8001678 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80013be:	bf00      	nop
 80013c0:	3778      	adds	r7, #120	; 0x78
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40004400 	.word	0x40004400
 80013cc:	40021000 	.word	0x40021000

080013d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013d0:	480d      	ldr	r0, [pc, #52]	; (8001408 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013d2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013d4:	480d      	ldr	r0, [pc, #52]	; (800140c <LoopForever+0x6>)
  ldr r1, =_edata
 80013d6:	490e      	ldr	r1, [pc, #56]	; (8001410 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013d8:	4a0e      	ldr	r2, [pc, #56]	; (8001414 <LoopForever+0xe>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80013dc:	e002      	b.n	80013e4 <LoopCopyDataInit>

080013de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013e2:	3304      	adds	r3, #4

080013e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e8:	d3f9      	bcc.n	80013de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ea:	4a0b      	ldr	r2, [pc, #44]	; (8001418 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013ec:	4c0b      	ldr	r4, [pc, #44]	; (800141c <LoopForever+0x16>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f0:	e001      	b.n	80013f6 <LoopFillZerobss>

080013f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f4:	3204      	adds	r2, #4

080013f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f8:	d3fb      	bcc.n	80013f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013fa:	f7ff fdff 	bl	8000ffc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013fe:	f005 f9dd 	bl	80067bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001402:	f7ff f965 	bl	80006d0 <main>

08001406 <LoopForever>:

LoopForever:
    b LoopForever
 8001406:	e7fe      	b.n	8001406 <LoopForever>
  ldr   r0, =_estack
 8001408:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800140c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001410:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001414:	080083ec 	.word	0x080083ec
  ldr r2, =_sbss
 8001418:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800141c:	20000288 	.word	0x20000288

08001420 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001420:	e7fe      	b.n	8001420 <ADC1_2_IRQHandler>

08001422 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b082      	sub	sp, #8
 8001426:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001428:	2300      	movs	r3, #0
 800142a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800142c:	2003      	movs	r0, #3
 800142e:	f000 f8fe 	bl	800162e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001432:	200f      	movs	r0, #15
 8001434:	f7ff fc64 	bl	8000d00 <HAL_InitTick>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d002      	beq.n	8001444 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	71fb      	strb	r3, [r7, #7]
 8001442:	e001      	b.n	8001448 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001444:	f7ff fc38 	bl	8000cb8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001448:	79fb      	ldrb	r3, [r7, #7]

}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
	...

08001454 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001458:	4b05      	ldr	r3, [pc, #20]	; (8001470 <HAL_IncTick+0x1c>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <HAL_IncTick+0x20>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4413      	add	r3, r2
 8001462:	4a03      	ldr	r2, [pc, #12]	; (8001470 <HAL_IncTick+0x1c>)
 8001464:	6013      	str	r3, [r2, #0]
}
 8001466:	bf00      	nop
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	20000274 	.word	0x20000274
 8001474:	20000008 	.word	0x20000008

08001478 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  return uwTick;
 800147c:	4b03      	ldr	r3, [pc, #12]	; (800148c <HAL_GetTick+0x14>)
 800147e:	681b      	ldr	r3, [r3, #0]
}
 8001480:	4618      	mov	r0, r3
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	20000274 	.word	0x20000274

08001490 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001498:	f7ff ffee 	bl	8001478 <HAL_GetTick>
 800149c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a8:	d004      	beq.n	80014b4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80014aa:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <HAL_Delay+0x40>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	68fa      	ldr	r2, [r7, #12]
 80014b0:	4413      	add	r3, r2
 80014b2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014b4:	bf00      	nop
 80014b6:	f7ff ffdf 	bl	8001478 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	68fa      	ldr	r2, [r7, #12]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d8f7      	bhi.n	80014b6 <HAL_Delay+0x26>
  {
  }
}
 80014c6:	bf00      	nop
 80014c8:	bf00      	nop
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000008 	.word	0x20000008

080014d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <__NVIC_SetPriorityGrouping+0x44>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014f0:	4013      	ands	r3, r2
 80014f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001506:	4a04      	ldr	r2, [pc, #16]	; (8001518 <__NVIC_SetPriorityGrouping+0x44>)
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	60d3      	str	r3, [r2, #12]
}
 800150c:	bf00      	nop
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001520:	4b04      	ldr	r3, [pc, #16]	; (8001534 <__NVIC_GetPriorityGrouping+0x18>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	0a1b      	lsrs	r3, r3, #8
 8001526:	f003 0307 	and.w	r3, r3, #7
}
 800152a:	4618      	mov	r0, r3
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001546:	2b00      	cmp	r3, #0
 8001548:	db0b      	blt.n	8001562 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	f003 021f 	and.w	r2, r3, #31
 8001550:	4907      	ldr	r1, [pc, #28]	; (8001570 <__NVIC_EnableIRQ+0x38>)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	095b      	lsrs	r3, r3, #5
 8001558:	2001      	movs	r0, #1
 800155a:	fa00 f202 	lsl.w	r2, r0, r2
 800155e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	e000e100 	.word	0xe000e100

08001574 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	6039      	str	r1, [r7, #0]
 800157e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001584:	2b00      	cmp	r3, #0
 8001586:	db0a      	blt.n	800159e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	b2da      	uxtb	r2, r3
 800158c:	490c      	ldr	r1, [pc, #48]	; (80015c0 <__NVIC_SetPriority+0x4c>)
 800158e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001592:	0112      	lsls	r2, r2, #4
 8001594:	b2d2      	uxtb	r2, r2
 8001596:	440b      	add	r3, r1
 8001598:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800159c:	e00a      	b.n	80015b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	4908      	ldr	r1, [pc, #32]	; (80015c4 <__NVIC_SetPriority+0x50>)
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	f003 030f 	and.w	r3, r3, #15
 80015aa:	3b04      	subs	r3, #4
 80015ac:	0112      	lsls	r2, r2, #4
 80015ae:	b2d2      	uxtb	r2, r2
 80015b0:	440b      	add	r3, r1
 80015b2:	761a      	strb	r2, [r3, #24]
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	e000e100 	.word	0xe000e100
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b089      	sub	sp, #36	; 0x24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	f1c3 0307 	rsb	r3, r3, #7
 80015e2:	2b04      	cmp	r3, #4
 80015e4:	bf28      	it	cs
 80015e6:	2304      	movcs	r3, #4
 80015e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	3304      	adds	r3, #4
 80015ee:	2b06      	cmp	r3, #6
 80015f0:	d902      	bls.n	80015f8 <NVIC_EncodePriority+0x30>
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	3b03      	subs	r3, #3
 80015f6:	e000      	b.n	80015fa <NVIC_EncodePriority+0x32>
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43da      	mvns	r2, r3
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	401a      	ands	r2, r3
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001610:	f04f 31ff 	mov.w	r1, #4294967295
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	fa01 f303 	lsl.w	r3, r1, r3
 800161a:	43d9      	mvns	r1, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001620:	4313      	orrs	r3, r2
         );
}
 8001622:	4618      	mov	r0, r3
 8001624:	3724      	adds	r7, #36	; 0x24
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff ff4c 	bl	80014d4 <__NVIC_SetPriorityGrouping>
}
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
 8001650:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001652:	f7ff ff63 	bl	800151c <__NVIC_GetPriorityGrouping>
 8001656:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	68b9      	ldr	r1, [r7, #8]
 800165c:	6978      	ldr	r0, [r7, #20]
 800165e:	f7ff ffb3 	bl	80015c8 <NVIC_EncodePriority>
 8001662:	4602      	mov	r2, r0
 8001664:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001668:	4611      	mov	r1, r2
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff ff82 	bl	8001574 <__NVIC_SetPriority>
}
 8001670:	bf00      	nop
 8001672:	3718      	adds	r7, #24
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff ff56 	bl	8001538 <__NVIC_EnableIRQ>
}
 800168c:	bf00      	nop
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800169c:	2300      	movs	r3, #0
 800169e:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d005      	beq.n	80016b8 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2204      	movs	r2, #4
 80016b0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	73fb      	strb	r3, [r7, #15]
 80016b6:	e037      	b.n	8001728 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f022 020e 	bic.w	r2, r2, #14
 80016c6:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016d6:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f022 0201 	bic.w	r2, r2, #1
 80016e6:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ec:	f003 021f 	and.w	r2, r3, #31
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f4:	2101      	movs	r1, #1
 80016f6:	fa01 f202 	lsl.w	r2, r1, r2
 80016fa:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001704:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800170a:	2b00      	cmp	r3, #0
 800170c:	d00c      	beq.n	8001728 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001718:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800171c:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001726:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2201      	movs	r2, #1
 800172c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001738:	7bfb      	ldrb	r3, [r7, #15]
}
 800173a:	4618      	mov	r0, r3
 800173c:	3714      	adds	r7, #20
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b084      	sub	sp, #16
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800174e:	2300      	movs	r3, #0
 8001750:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b02      	cmp	r3, #2
 800175c:	d00d      	beq.n	800177a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2204      	movs	r2, #4
 8001762:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	73fb      	strb	r3, [r7, #15]
 8001778:	e047      	b.n	800180a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f022 020e 	bic.w	r2, r2, #14
 8001788:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f022 0201 	bic.w	r2, r2, #1
 8001798:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ae:	f003 021f 	and.w	r2, r3, #31
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	2101      	movs	r1, #1
 80017b8:	fa01 f202 	lsl.w	r2, r1, r2
 80017bc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80017c6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d00c      	beq.n	80017ea <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017de:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80017e8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2201      	movs	r2, #1
 80017ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d003      	beq.n	800180a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	4798      	blx	r3
    }
  }
  return status;
 800180a:	7bfb      	ldrb	r3, [r7, #15]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3710      	adds	r7, #16
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001814:	b480      	push	{r7}
 8001816:	b087      	sub	sp, #28
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001822:	e15a      	b.n	8001ada <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	2101      	movs	r1, #1
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	fa01 f303 	lsl.w	r3, r1, r3
 8001830:	4013      	ands	r3, r2
 8001832:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2b00      	cmp	r3, #0
 8001838:	f000 814c 	beq.w	8001ad4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 0303 	and.w	r3, r3, #3
 8001844:	2b01      	cmp	r3, #1
 8001846:	d005      	beq.n	8001854 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001850:	2b02      	cmp	r3, #2
 8001852:	d130      	bne.n	80018b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	2203      	movs	r2, #3
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	4013      	ands	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	68da      	ldr	r2, [r3, #12]
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	4313      	orrs	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800188a:	2201      	movs	r2, #1
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43db      	mvns	r3, r3
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	4013      	ands	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	091b      	lsrs	r3, r3, #4
 80018a0:	f003 0201 	and.w	r2, r3, #1
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f003 0303 	and.w	r3, r3, #3
 80018be:	2b03      	cmp	r3, #3
 80018c0:	d017      	beq.n	80018f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	2203      	movs	r2, #3
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43db      	mvns	r3, r3
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	4013      	ands	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	689a      	ldr	r2, [r3, #8]
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f003 0303 	and.w	r3, r3, #3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d123      	bne.n	8001946 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	08da      	lsrs	r2, r3, #3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	3208      	adds	r2, #8
 8001906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800190a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	220f      	movs	r2, #15
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43db      	mvns	r3, r3
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	4013      	ands	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	691a      	ldr	r2, [r3, #16]
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	f003 0307 	and.w	r3, r3, #7
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	4313      	orrs	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	08da      	lsrs	r2, r3, #3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3208      	adds	r2, #8
 8001940:	6939      	ldr	r1, [r7, #16]
 8001942:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	2203      	movs	r2, #3
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43db      	mvns	r3, r3
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	4013      	ands	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f003 0203 	and.w	r2, r3, #3
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4313      	orrs	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 80a6 	beq.w	8001ad4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001988:	4b5b      	ldr	r3, [pc, #364]	; (8001af8 <HAL_GPIO_Init+0x2e4>)
 800198a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800198c:	4a5a      	ldr	r2, [pc, #360]	; (8001af8 <HAL_GPIO_Init+0x2e4>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	6613      	str	r3, [r2, #96]	; 0x60
 8001994:	4b58      	ldr	r3, [pc, #352]	; (8001af8 <HAL_GPIO_Init+0x2e4>)
 8001996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019a0:	4a56      	ldr	r2, [pc, #344]	; (8001afc <HAL_GPIO_Init+0x2e8>)
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	089b      	lsrs	r3, r3, #2
 80019a6:	3302      	adds	r3, #2
 80019a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	f003 0303 	and.w	r3, r3, #3
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	220f      	movs	r2, #15
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4013      	ands	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019ca:	d01f      	beq.n	8001a0c <HAL_GPIO_Init+0x1f8>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a4c      	ldr	r2, [pc, #304]	; (8001b00 <HAL_GPIO_Init+0x2ec>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d019      	beq.n	8001a08 <HAL_GPIO_Init+0x1f4>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a4b      	ldr	r2, [pc, #300]	; (8001b04 <HAL_GPIO_Init+0x2f0>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d013      	beq.n	8001a04 <HAL_GPIO_Init+0x1f0>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a4a      	ldr	r2, [pc, #296]	; (8001b08 <HAL_GPIO_Init+0x2f4>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d00d      	beq.n	8001a00 <HAL_GPIO_Init+0x1ec>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a49      	ldr	r2, [pc, #292]	; (8001b0c <HAL_GPIO_Init+0x2f8>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d007      	beq.n	80019fc <HAL_GPIO_Init+0x1e8>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a48      	ldr	r2, [pc, #288]	; (8001b10 <HAL_GPIO_Init+0x2fc>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d101      	bne.n	80019f8 <HAL_GPIO_Init+0x1e4>
 80019f4:	2305      	movs	r3, #5
 80019f6:	e00a      	b.n	8001a0e <HAL_GPIO_Init+0x1fa>
 80019f8:	2306      	movs	r3, #6
 80019fa:	e008      	b.n	8001a0e <HAL_GPIO_Init+0x1fa>
 80019fc:	2304      	movs	r3, #4
 80019fe:	e006      	b.n	8001a0e <HAL_GPIO_Init+0x1fa>
 8001a00:	2303      	movs	r3, #3
 8001a02:	e004      	b.n	8001a0e <HAL_GPIO_Init+0x1fa>
 8001a04:	2302      	movs	r3, #2
 8001a06:	e002      	b.n	8001a0e <HAL_GPIO_Init+0x1fa>
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e000      	b.n	8001a0e <HAL_GPIO_Init+0x1fa>
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	697a      	ldr	r2, [r7, #20]
 8001a10:	f002 0203 	and.w	r2, r2, #3
 8001a14:	0092      	lsls	r2, r2, #2
 8001a16:	4093      	lsls	r3, r2
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a1e:	4937      	ldr	r1, [pc, #220]	; (8001afc <HAL_GPIO_Init+0x2e8>)
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	089b      	lsrs	r3, r3, #2
 8001a24:	3302      	adds	r3, #2
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a2c:	4b39      	ldr	r3, [pc, #228]	; (8001b14 <HAL_GPIO_Init+0x300>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	43db      	mvns	r3, r3
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d003      	beq.n	8001a50 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a50:	4a30      	ldr	r2, [pc, #192]	; (8001b14 <HAL_GPIO_Init+0x300>)
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a56:	4b2f      	ldr	r3, [pc, #188]	; (8001b14 <HAL_GPIO_Init+0x300>)
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	4013      	ands	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a7a:	4a26      	ldr	r2, [pc, #152]	; (8001b14 <HAL_GPIO_Init+0x300>)
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001a80:	4b24      	ldr	r3, [pc, #144]	; (8001b14 <HAL_GPIO_Init+0x300>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d003      	beq.n	8001aa4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001aa4:	4a1b      	ldr	r2, [pc, #108]	; (8001b14 <HAL_GPIO_Init+0x300>)
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001aaa:	4b1a      	ldr	r3, [pc, #104]	; (8001b14 <HAL_GPIO_Init+0x300>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ace:	4a11      	ldr	r2, [pc, #68]	; (8001b14 <HAL_GPIO_Init+0x300>)
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f47f ae9d 	bne.w	8001824 <HAL_GPIO_Init+0x10>
  }
}
 8001aea:	bf00      	nop
 8001aec:	bf00      	nop
 8001aee:	371c      	adds	r7, #28
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	40021000 	.word	0x40021000
 8001afc:	40010000 	.word	0x40010000
 8001b00:	48000400 	.word	0x48000400
 8001b04:	48000800 	.word	0x48000800
 8001b08:	48000c00 	.word	0x48000c00
 8001b0c:	48001000 	.word	0x48001000
 8001b10:	48001400 	.word	0x48001400
 8001b14:	40010400 	.word	0x40010400

08001b18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	460b      	mov	r3, r1
 8001b22:	807b      	strh	r3, [r7, #2]
 8001b24:	4613      	mov	r3, r2
 8001b26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b28:	787b      	ldrb	r3, [r7, #1]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b2e:	887a      	ldrh	r2, [r7, #2]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b34:	e002      	b.n	8001b3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b36:	887a      	ldrh	r2, [r7, #2]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	695b      	ldr	r3, [r3, #20]
 8001b58:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b5a:	887a      	ldrh	r2, [r7, #2]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	041a      	lsls	r2, r3, #16
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	43d9      	mvns	r1, r3
 8001b66:	887b      	ldrh	r3, [r7, #2]
 8001b68:	400b      	ands	r3, r1
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	619a      	str	r2, [r3, #24]
}
 8001b70:	bf00      	nop
 8001b72:	3714      	adds	r7, #20
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b86:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b88:	695a      	ldr	r2, [r3, #20]
 8001b8a:	88fb      	ldrh	r3, [r7, #6]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d006      	beq.n	8001ba0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b92:	4a05      	ldr	r2, [pc, #20]	; (8001ba8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b94:	88fb      	ldrh	r3, [r7, #6]
 8001b96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b98:	88fb      	ldrh	r3, [r7, #6]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7fe fe42 	bl	8000824 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ba0:	bf00      	nop
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40010400 	.word	0x40010400

08001bac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d141      	bne.n	8001c3e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bba:	4b4b      	ldr	r3, [pc, #300]	; (8001ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bc6:	d131      	bne.n	8001c2c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bc8:	4b47      	ldr	r3, [pc, #284]	; (8001ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bce:	4a46      	ldr	r2, [pc, #280]	; (8001ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bd4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bd8:	4b43      	ldr	r3, [pc, #268]	; (8001ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001be0:	4a41      	ldr	r2, [pc, #260]	; (8001ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001be2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001be6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001be8:	4b40      	ldr	r3, [pc, #256]	; (8001cec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2232      	movs	r2, #50	; 0x32
 8001bee:	fb02 f303 	mul.w	r3, r2, r3
 8001bf2:	4a3f      	ldr	r2, [pc, #252]	; (8001cf0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf8:	0c9b      	lsrs	r3, r3, #18
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bfe:	e002      	b.n	8001c06 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c06:	4b38      	ldr	r3, [pc, #224]	; (8001ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c12:	d102      	bne.n	8001c1a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f2      	bne.n	8001c00 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c1a:	4b33      	ldr	r3, [pc, #204]	; (8001ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c26:	d158      	bne.n	8001cda <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e057      	b.n	8001cdc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c2c:	4b2e      	ldr	r3, [pc, #184]	; (8001ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c32:	4a2d      	ldr	r2, [pc, #180]	; (8001ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001c3c:	e04d      	b.n	8001cda <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c44:	d141      	bne.n	8001cca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c46:	4b28      	ldr	r3, [pc, #160]	; (8001ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c52:	d131      	bne.n	8001cb8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c54:	4b24      	ldr	r3, [pc, #144]	; (8001ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c5a:	4a23      	ldr	r2, [pc, #140]	; (8001ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c64:	4b20      	ldr	r3, [pc, #128]	; (8001ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c6c:	4a1e      	ldr	r2, [pc, #120]	; (8001ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c74:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2232      	movs	r2, #50	; 0x32
 8001c7a:	fb02 f303 	mul.w	r3, r2, r3
 8001c7e:	4a1c      	ldr	r2, [pc, #112]	; (8001cf0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c80:	fba2 2303 	umull	r2, r3, r2, r3
 8001c84:	0c9b      	lsrs	r3, r3, #18
 8001c86:	3301      	adds	r3, #1
 8001c88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c8a:	e002      	b.n	8001c92 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c92:	4b15      	ldr	r3, [pc, #84]	; (8001ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c9e:	d102      	bne.n	8001ca6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f2      	bne.n	8001c8c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ca6:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cb2:	d112      	bne.n	8001cda <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e011      	b.n	8001cdc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001cb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cbe:	4a0a      	ldr	r2, [pc, #40]	; (8001ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001cc8:	e007      	b.n	8001cda <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001cca:	4b07      	ldr	r3, [pc, #28]	; (8001ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cd2:	4a05      	ldr	r2, [pc, #20]	; (8001ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cd4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cd8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	40007000 	.word	0x40007000
 8001cec:	20000000 	.word	0x20000000
 8001cf0:	431bde83 	.word	0x431bde83

08001cf4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001cf8:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	4a04      	ldr	r2, [pc, #16]	; (8001d10 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001cfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d02:	6093      	str	r3, [r2, #8]
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	40007000 	.word	0x40007000

08001d14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b088      	sub	sp, #32
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e306      	b.n	8002334 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d075      	beq.n	8001e1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d32:	4b97      	ldr	r3, [pc, #604]	; (8001f90 <HAL_RCC_OscConfig+0x27c>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 030c 	and.w	r3, r3, #12
 8001d3a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d3c:	4b94      	ldr	r3, [pc, #592]	; (8001f90 <HAL_RCC_OscConfig+0x27c>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	f003 0303 	and.w	r3, r3, #3
 8001d44:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	2b0c      	cmp	r3, #12
 8001d4a:	d102      	bne.n	8001d52 <HAL_RCC_OscConfig+0x3e>
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	2b03      	cmp	r3, #3
 8001d50:	d002      	beq.n	8001d58 <HAL_RCC_OscConfig+0x44>
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	2b08      	cmp	r3, #8
 8001d56:	d10b      	bne.n	8001d70 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d58:	4b8d      	ldr	r3, [pc, #564]	; (8001f90 <HAL_RCC_OscConfig+0x27c>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d05b      	beq.n	8001e1c <HAL_RCC_OscConfig+0x108>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d157      	bne.n	8001e1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e2e1      	b.n	8002334 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d78:	d106      	bne.n	8001d88 <HAL_RCC_OscConfig+0x74>
 8001d7a:	4b85      	ldr	r3, [pc, #532]	; (8001f90 <HAL_RCC_OscConfig+0x27c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a84      	ldr	r2, [pc, #528]	; (8001f90 <HAL_RCC_OscConfig+0x27c>)
 8001d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d84:	6013      	str	r3, [r2, #0]
 8001d86:	e01d      	b.n	8001dc4 <HAL_RCC_OscConfig+0xb0>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d90:	d10c      	bne.n	8001dac <HAL_RCC_OscConfig+0x98>
 8001d92:	4b7f      	ldr	r3, [pc, #508]	; (8001f90 <HAL_RCC_OscConfig+0x27c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a7e      	ldr	r2, [pc, #504]	; (8001f90 <HAL_RCC_OscConfig+0x27c>)
 8001d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d9c:	6013      	str	r3, [r2, #0]
 8001d9e:	4b7c      	ldr	r3, [pc, #496]	; (8001f90 <HAL_RCC_OscConfig+0x27c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a7b      	ldr	r2, [pc, #492]	; (8001f90 <HAL_RCC_OscConfig+0x27c>)
 8001da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da8:	6013      	str	r3, [r2, #0]
 8001daa:	e00b      	b.n	8001dc4 <HAL_RCC_OscConfig+0xb0>
 8001dac:	4b78      	ldr	r3, [pc, #480]	; (8001f90 <HAL_RCC_OscConfig+0x27c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a77      	ldr	r2, [pc, #476]	; (8001f90 <HAL_RCC_OscConfig+0x27c>)
 8001db2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001db6:	6013      	str	r3, [r2, #0]
 8001db8:	4b75      	ldr	r3, [pc, #468]	; (8001f90 <HAL_RCC_OscConfig+0x27c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a74      	ldr	r2, [pc, #464]	; (8001f90 <HAL_RCC_OscConfig+0x27c>)
 8001dbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d013      	beq.n	8001df4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dcc:	f7ff fb54 	bl	8001478 <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd4:	f7ff fb50 	bl	8001478 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b64      	cmp	r3, #100	; 0x64
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e2a6      	b.n	8002334 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001de6:	4b6a      	ldr	r3, [pc, #424]	; (8001f90 <HAL_RCC_OscConfig+0x27c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d0f0      	beq.n	8001dd4 <HAL_RCC_OscConfig+0xc0>
 8001df2:	e014      	b.n	8001e1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df4:	f7ff fb40 	bl	8001478 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dfc:	f7ff fb3c 	bl	8001478 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b64      	cmp	r3, #100	; 0x64
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e292      	b.n	8002334 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e0e:	4b60      	ldr	r3, [pc, #384]	; (8001f90 <HAL_RCC_OscConfig+0x27c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1f0      	bne.n	8001dfc <HAL_RCC_OscConfig+0xe8>
 8001e1a:	e000      	b.n	8001e1e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d075      	beq.n	8001f16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e2a:	4b59      	ldr	r3, [pc, #356]	; (8001f90 <HAL_RCC_OscConfig+0x27c>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 030c 	and.w	r3, r3, #12
 8001e32:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e34:	4b56      	ldr	r3, [pc, #344]	; (8001f90 <HAL_RCC_OscConfig+0x27c>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	f003 0303 	and.w	r3, r3, #3
 8001e3c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	2b0c      	cmp	r3, #12
 8001e42:	d102      	bne.n	8001e4a <HAL_RCC_OscConfig+0x136>
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d002      	beq.n	8001e50 <HAL_RCC_OscConfig+0x13c>
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	2b04      	cmp	r3, #4
 8001e4e:	d11f      	bne.n	8001e90 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e50:	4b4f      	ldr	r3, [pc, #316]	; (8001f90 <HAL_RCC_OscConfig+0x27c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d005      	beq.n	8001e68 <HAL_RCC_OscConfig+0x154>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e265      	b.n	8002334 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e68:	4b49      	ldr	r3, [pc, #292]	; (8001f90 <HAL_RCC_OscConfig+0x27c>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	061b      	lsls	r3, r3, #24
 8001e76:	4946      	ldr	r1, [pc, #280]	; (8001f90 <HAL_RCC_OscConfig+0x27c>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e7c:	4b45      	ldr	r3, [pc, #276]	; (8001f94 <HAL_RCC_OscConfig+0x280>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7fe ff3d 	bl	8000d00 <HAL_InitTick>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d043      	beq.n	8001f14 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e251      	b.n	8002334 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d023      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e98:	4b3d      	ldr	r3, [pc, #244]	; (8001f90 <HAL_RCC_OscConfig+0x27c>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a3c      	ldr	r2, [pc, #240]	; (8001f90 <HAL_RCC_OscConfig+0x27c>)
 8001e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea4:	f7ff fae8 	bl	8001478 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eac:	f7ff fae4 	bl	8001478 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e23a      	b.n	8002334 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ebe:	4b34      	ldr	r3, [pc, #208]	; (8001f90 <HAL_RCC_OscConfig+0x27c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d0f0      	beq.n	8001eac <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eca:	4b31      	ldr	r3, [pc, #196]	; (8001f90 <HAL_RCC_OscConfig+0x27c>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	061b      	lsls	r3, r3, #24
 8001ed8:	492d      	ldr	r1, [pc, #180]	; (8001f90 <HAL_RCC_OscConfig+0x27c>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	604b      	str	r3, [r1, #4]
 8001ede:	e01a      	b.n	8001f16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ee0:	4b2b      	ldr	r3, [pc, #172]	; (8001f90 <HAL_RCC_OscConfig+0x27c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a2a      	ldr	r2, [pc, #168]	; (8001f90 <HAL_RCC_OscConfig+0x27c>)
 8001ee6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001eea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eec:	f7ff fac4 	bl	8001478 <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ef4:	f7ff fac0 	bl	8001478 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e216      	b.n	8002334 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f06:	4b22      	ldr	r3, [pc, #136]	; (8001f90 <HAL_RCC_OscConfig+0x27c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1f0      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x1e0>
 8001f12:	e000      	b.n	8001f16 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f14:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d041      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d01c      	beq.n	8001f64 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f2a:	4b19      	ldr	r3, [pc, #100]	; (8001f90 <HAL_RCC_OscConfig+0x27c>)
 8001f2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f30:	4a17      	ldr	r2, [pc, #92]	; (8001f90 <HAL_RCC_OscConfig+0x27c>)
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f3a:	f7ff fa9d 	bl	8001478 <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f42:	f7ff fa99 	bl	8001478 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e1ef      	b.n	8002334 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f54:	4b0e      	ldr	r3, [pc, #56]	; (8001f90 <HAL_RCC_OscConfig+0x27c>)
 8001f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d0ef      	beq.n	8001f42 <HAL_RCC_OscConfig+0x22e>
 8001f62:	e020      	b.n	8001fa6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f64:	4b0a      	ldr	r3, [pc, #40]	; (8001f90 <HAL_RCC_OscConfig+0x27c>)
 8001f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f6a:	4a09      	ldr	r2, [pc, #36]	; (8001f90 <HAL_RCC_OscConfig+0x27c>)
 8001f6c:	f023 0301 	bic.w	r3, r3, #1
 8001f70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f74:	f7ff fa80 	bl	8001478 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f7a:	e00d      	b.n	8001f98 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f7c:	f7ff fa7c 	bl	8001478 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d906      	bls.n	8001f98 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e1d2      	b.n	8002334 <HAL_RCC_OscConfig+0x620>
 8001f8e:	bf00      	nop
 8001f90:	40021000 	.word	0x40021000
 8001f94:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f98:	4b8c      	ldr	r3, [pc, #560]	; (80021cc <HAL_RCC_OscConfig+0x4b8>)
 8001f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1ea      	bne.n	8001f7c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0304 	and.w	r3, r3, #4
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 80a6 	beq.w	8002100 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fb8:	4b84      	ldr	r3, [pc, #528]	; (80021cc <HAL_RCC_OscConfig+0x4b8>)
 8001fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x2b4>
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e000      	b.n	8001fca <HAL_RCC_OscConfig+0x2b6>
 8001fc8:	2300      	movs	r3, #0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00d      	beq.n	8001fea <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fce:	4b7f      	ldr	r3, [pc, #508]	; (80021cc <HAL_RCC_OscConfig+0x4b8>)
 8001fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd2:	4a7e      	ldr	r2, [pc, #504]	; (80021cc <HAL_RCC_OscConfig+0x4b8>)
 8001fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd8:	6593      	str	r3, [r2, #88]	; 0x58
 8001fda:	4b7c      	ldr	r3, [pc, #496]	; (80021cc <HAL_RCC_OscConfig+0x4b8>)
 8001fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fea:	4b79      	ldr	r3, [pc, #484]	; (80021d0 <HAL_RCC_OscConfig+0x4bc>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d118      	bne.n	8002028 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ff6:	4b76      	ldr	r3, [pc, #472]	; (80021d0 <HAL_RCC_OscConfig+0x4bc>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a75      	ldr	r2, [pc, #468]	; (80021d0 <HAL_RCC_OscConfig+0x4bc>)
 8001ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002000:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002002:	f7ff fa39 	bl	8001478 <HAL_GetTick>
 8002006:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002008:	e008      	b.n	800201c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800200a:	f7ff fa35 	bl	8001478 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e18b      	b.n	8002334 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800201c:	4b6c      	ldr	r3, [pc, #432]	; (80021d0 <HAL_RCC_OscConfig+0x4bc>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002024:	2b00      	cmp	r3, #0
 8002026:	d0f0      	beq.n	800200a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d108      	bne.n	8002042 <HAL_RCC_OscConfig+0x32e>
 8002030:	4b66      	ldr	r3, [pc, #408]	; (80021cc <HAL_RCC_OscConfig+0x4b8>)
 8002032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002036:	4a65      	ldr	r2, [pc, #404]	; (80021cc <HAL_RCC_OscConfig+0x4b8>)
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002040:	e024      	b.n	800208c <HAL_RCC_OscConfig+0x378>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	2b05      	cmp	r3, #5
 8002048:	d110      	bne.n	800206c <HAL_RCC_OscConfig+0x358>
 800204a:	4b60      	ldr	r3, [pc, #384]	; (80021cc <HAL_RCC_OscConfig+0x4b8>)
 800204c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002050:	4a5e      	ldr	r2, [pc, #376]	; (80021cc <HAL_RCC_OscConfig+0x4b8>)
 8002052:	f043 0304 	orr.w	r3, r3, #4
 8002056:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800205a:	4b5c      	ldr	r3, [pc, #368]	; (80021cc <HAL_RCC_OscConfig+0x4b8>)
 800205c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002060:	4a5a      	ldr	r2, [pc, #360]	; (80021cc <HAL_RCC_OscConfig+0x4b8>)
 8002062:	f043 0301 	orr.w	r3, r3, #1
 8002066:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800206a:	e00f      	b.n	800208c <HAL_RCC_OscConfig+0x378>
 800206c:	4b57      	ldr	r3, [pc, #348]	; (80021cc <HAL_RCC_OscConfig+0x4b8>)
 800206e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002072:	4a56      	ldr	r2, [pc, #344]	; (80021cc <HAL_RCC_OscConfig+0x4b8>)
 8002074:	f023 0301 	bic.w	r3, r3, #1
 8002078:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800207c:	4b53      	ldr	r3, [pc, #332]	; (80021cc <HAL_RCC_OscConfig+0x4b8>)
 800207e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002082:	4a52      	ldr	r2, [pc, #328]	; (80021cc <HAL_RCC_OscConfig+0x4b8>)
 8002084:	f023 0304 	bic.w	r3, r3, #4
 8002088:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d016      	beq.n	80020c2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002094:	f7ff f9f0 	bl	8001478 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800209a:	e00a      	b.n	80020b2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800209c:	f7ff f9ec 	bl	8001478 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e140      	b.n	8002334 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020b2:	4b46      	ldr	r3, [pc, #280]	; (80021cc <HAL_RCC_OscConfig+0x4b8>)
 80020b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d0ed      	beq.n	800209c <HAL_RCC_OscConfig+0x388>
 80020c0:	e015      	b.n	80020ee <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c2:	f7ff f9d9 	bl	8001478 <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020c8:	e00a      	b.n	80020e0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ca:	f7ff f9d5 	bl	8001478 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d8:	4293      	cmp	r3, r2
 80020da:	d901      	bls.n	80020e0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e129      	b.n	8002334 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020e0:	4b3a      	ldr	r3, [pc, #232]	; (80021cc <HAL_RCC_OscConfig+0x4b8>)
 80020e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1ed      	bne.n	80020ca <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020ee:	7ffb      	ldrb	r3, [r7, #31]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d105      	bne.n	8002100 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020f4:	4b35      	ldr	r3, [pc, #212]	; (80021cc <HAL_RCC_OscConfig+0x4b8>)
 80020f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f8:	4a34      	ldr	r2, [pc, #208]	; (80021cc <HAL_RCC_OscConfig+0x4b8>)
 80020fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020fe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0320 	and.w	r3, r3, #32
 8002108:	2b00      	cmp	r3, #0
 800210a:	d03c      	beq.n	8002186 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d01c      	beq.n	800214e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002114:	4b2d      	ldr	r3, [pc, #180]	; (80021cc <HAL_RCC_OscConfig+0x4b8>)
 8002116:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800211a:	4a2c      	ldr	r2, [pc, #176]	; (80021cc <HAL_RCC_OscConfig+0x4b8>)
 800211c:	f043 0301 	orr.w	r3, r3, #1
 8002120:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002124:	f7ff f9a8 	bl	8001478 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800212c:	f7ff f9a4 	bl	8001478 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e0fa      	b.n	8002334 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800213e:	4b23      	ldr	r3, [pc, #140]	; (80021cc <HAL_RCC_OscConfig+0x4b8>)
 8002140:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0ef      	beq.n	800212c <HAL_RCC_OscConfig+0x418>
 800214c:	e01b      	b.n	8002186 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800214e:	4b1f      	ldr	r3, [pc, #124]	; (80021cc <HAL_RCC_OscConfig+0x4b8>)
 8002150:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002154:	4a1d      	ldr	r2, [pc, #116]	; (80021cc <HAL_RCC_OscConfig+0x4b8>)
 8002156:	f023 0301 	bic.w	r3, r3, #1
 800215a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800215e:	f7ff f98b 	bl	8001478 <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002164:	e008      	b.n	8002178 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002166:	f7ff f987 	bl	8001478 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e0dd      	b.n	8002334 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002178:	4b14      	ldr	r3, [pc, #80]	; (80021cc <HAL_RCC_OscConfig+0x4b8>)
 800217a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1ef      	bne.n	8002166 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	2b00      	cmp	r3, #0
 800218c:	f000 80d1 	beq.w	8002332 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002190:	4b0e      	ldr	r3, [pc, #56]	; (80021cc <HAL_RCC_OscConfig+0x4b8>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f003 030c 	and.w	r3, r3, #12
 8002198:	2b0c      	cmp	r3, #12
 800219a:	f000 808b 	beq.w	80022b4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d15e      	bne.n	8002264 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021a6:	4b09      	ldr	r3, [pc, #36]	; (80021cc <HAL_RCC_OscConfig+0x4b8>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a08      	ldr	r2, [pc, #32]	; (80021cc <HAL_RCC_OscConfig+0x4b8>)
 80021ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b2:	f7ff f961 	bl	8001478 <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021b8:	e00c      	b.n	80021d4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ba:	f7ff f95d 	bl	8001478 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d905      	bls.n	80021d4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e0b3      	b.n	8002334 <HAL_RCC_OscConfig+0x620>
 80021cc:	40021000 	.word	0x40021000
 80021d0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021d4:	4b59      	ldr	r3, [pc, #356]	; (800233c <HAL_RCC_OscConfig+0x628>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1ec      	bne.n	80021ba <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021e0:	4b56      	ldr	r3, [pc, #344]	; (800233c <HAL_RCC_OscConfig+0x628>)
 80021e2:	68da      	ldr	r2, [r3, #12]
 80021e4:	4b56      	ldr	r3, [pc, #344]	; (8002340 <HAL_RCC_OscConfig+0x62c>)
 80021e6:	4013      	ands	r3, r2
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	6a11      	ldr	r1, [r2, #32]
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021f0:	3a01      	subs	r2, #1
 80021f2:	0112      	lsls	r2, r2, #4
 80021f4:	4311      	orrs	r1, r2
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80021fa:	0212      	lsls	r2, r2, #8
 80021fc:	4311      	orrs	r1, r2
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002202:	0852      	lsrs	r2, r2, #1
 8002204:	3a01      	subs	r2, #1
 8002206:	0552      	lsls	r2, r2, #21
 8002208:	4311      	orrs	r1, r2
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800220e:	0852      	lsrs	r2, r2, #1
 8002210:	3a01      	subs	r2, #1
 8002212:	0652      	lsls	r2, r2, #25
 8002214:	4311      	orrs	r1, r2
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800221a:	06d2      	lsls	r2, r2, #27
 800221c:	430a      	orrs	r2, r1
 800221e:	4947      	ldr	r1, [pc, #284]	; (800233c <HAL_RCC_OscConfig+0x628>)
 8002220:	4313      	orrs	r3, r2
 8002222:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002224:	4b45      	ldr	r3, [pc, #276]	; (800233c <HAL_RCC_OscConfig+0x628>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a44      	ldr	r2, [pc, #272]	; (800233c <HAL_RCC_OscConfig+0x628>)
 800222a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800222e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002230:	4b42      	ldr	r3, [pc, #264]	; (800233c <HAL_RCC_OscConfig+0x628>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	4a41      	ldr	r2, [pc, #260]	; (800233c <HAL_RCC_OscConfig+0x628>)
 8002236:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800223a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223c:	f7ff f91c 	bl	8001478 <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002244:	f7ff f918 	bl	8001478 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e06e      	b.n	8002334 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002256:	4b39      	ldr	r3, [pc, #228]	; (800233c <HAL_RCC_OscConfig+0x628>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d0f0      	beq.n	8002244 <HAL_RCC_OscConfig+0x530>
 8002262:	e066      	b.n	8002332 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002264:	4b35      	ldr	r3, [pc, #212]	; (800233c <HAL_RCC_OscConfig+0x628>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a34      	ldr	r2, [pc, #208]	; (800233c <HAL_RCC_OscConfig+0x628>)
 800226a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800226e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002270:	4b32      	ldr	r3, [pc, #200]	; (800233c <HAL_RCC_OscConfig+0x628>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	4a31      	ldr	r2, [pc, #196]	; (800233c <HAL_RCC_OscConfig+0x628>)
 8002276:	f023 0303 	bic.w	r3, r3, #3
 800227a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800227c:	4b2f      	ldr	r3, [pc, #188]	; (800233c <HAL_RCC_OscConfig+0x628>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	4a2e      	ldr	r2, [pc, #184]	; (800233c <HAL_RCC_OscConfig+0x628>)
 8002282:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002286:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800228a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228c:	f7ff f8f4 	bl	8001478 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002294:	f7ff f8f0 	bl	8001478 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e046      	b.n	8002334 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022a6:	4b25      	ldr	r3, [pc, #148]	; (800233c <HAL_RCC_OscConfig+0x628>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f0      	bne.n	8002294 <HAL_RCC_OscConfig+0x580>
 80022b2:	e03e      	b.n	8002332 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	69db      	ldr	r3, [r3, #28]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d101      	bne.n	80022c0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e039      	b.n	8002334 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80022c0:	4b1e      	ldr	r3, [pc, #120]	; (800233c <HAL_RCC_OscConfig+0x628>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	f003 0203 	and.w	r2, r3, #3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d12c      	bne.n	800232e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022de:	3b01      	subs	r3, #1
 80022e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d123      	bne.n	800232e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d11b      	bne.n	800232e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002300:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002302:	429a      	cmp	r2, r3
 8002304:	d113      	bne.n	800232e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002310:	085b      	lsrs	r3, r3, #1
 8002312:	3b01      	subs	r3, #1
 8002314:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002316:	429a      	cmp	r2, r3
 8002318:	d109      	bne.n	800232e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002324:	085b      	lsrs	r3, r3, #1
 8002326:	3b01      	subs	r3, #1
 8002328:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800232a:	429a      	cmp	r2, r3
 800232c:	d001      	beq.n	8002332 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e000      	b.n	8002334 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3720      	adds	r7, #32
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40021000 	.word	0x40021000
 8002340:	019f800c 	.word	0x019f800c

08002344 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800234e:	2300      	movs	r3, #0
 8002350:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e11e      	b.n	800259a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800235c:	4b91      	ldr	r3, [pc, #580]	; (80025a4 <HAL_RCC_ClockConfig+0x260>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 030f 	and.w	r3, r3, #15
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	429a      	cmp	r2, r3
 8002368:	d910      	bls.n	800238c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236a:	4b8e      	ldr	r3, [pc, #568]	; (80025a4 <HAL_RCC_ClockConfig+0x260>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f023 020f 	bic.w	r2, r3, #15
 8002372:	498c      	ldr	r1, [pc, #560]	; (80025a4 <HAL_RCC_ClockConfig+0x260>)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	4313      	orrs	r3, r2
 8002378:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800237a:	4b8a      	ldr	r3, [pc, #552]	; (80025a4 <HAL_RCC_ClockConfig+0x260>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	429a      	cmp	r2, r3
 8002386:	d001      	beq.n	800238c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e106      	b.n	800259a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b00      	cmp	r3, #0
 8002396:	d073      	beq.n	8002480 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b03      	cmp	r3, #3
 800239e:	d129      	bne.n	80023f4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023a0:	4b81      	ldr	r3, [pc, #516]	; (80025a8 <HAL_RCC_ClockConfig+0x264>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d101      	bne.n	80023b0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e0f4      	b.n	800259a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80023b0:	f000 f9d0 	bl	8002754 <RCC_GetSysClockFreqFromPLLSource>
 80023b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	4a7c      	ldr	r2, [pc, #496]	; (80025ac <HAL_RCC_ClockConfig+0x268>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d93f      	bls.n	800243e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80023be:	4b7a      	ldr	r3, [pc, #488]	; (80025a8 <HAL_RCC_ClockConfig+0x264>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d009      	beq.n	80023de <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d033      	beq.n	800243e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d12f      	bne.n	800243e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023de:	4b72      	ldr	r3, [pc, #456]	; (80025a8 <HAL_RCC_ClockConfig+0x264>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023e6:	4a70      	ldr	r2, [pc, #448]	; (80025a8 <HAL_RCC_ClockConfig+0x264>)
 80023e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023ec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80023ee:	2380      	movs	r3, #128	; 0x80
 80023f0:	617b      	str	r3, [r7, #20]
 80023f2:	e024      	b.n	800243e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d107      	bne.n	800240c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023fc:	4b6a      	ldr	r3, [pc, #424]	; (80025a8 <HAL_RCC_ClockConfig+0x264>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d109      	bne.n	800241c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e0c6      	b.n	800259a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800240c:	4b66      	ldr	r3, [pc, #408]	; (80025a8 <HAL_RCC_ClockConfig+0x264>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e0be      	b.n	800259a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800241c:	f000 f8ce 	bl	80025bc <HAL_RCC_GetSysClockFreq>
 8002420:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	4a61      	ldr	r2, [pc, #388]	; (80025ac <HAL_RCC_ClockConfig+0x268>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d909      	bls.n	800243e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800242a:	4b5f      	ldr	r3, [pc, #380]	; (80025a8 <HAL_RCC_ClockConfig+0x264>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002432:	4a5d      	ldr	r2, [pc, #372]	; (80025a8 <HAL_RCC_ClockConfig+0x264>)
 8002434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002438:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800243a:	2380      	movs	r3, #128	; 0x80
 800243c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800243e:	4b5a      	ldr	r3, [pc, #360]	; (80025a8 <HAL_RCC_ClockConfig+0x264>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f023 0203 	bic.w	r2, r3, #3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	4957      	ldr	r1, [pc, #348]	; (80025a8 <HAL_RCC_ClockConfig+0x264>)
 800244c:	4313      	orrs	r3, r2
 800244e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002450:	f7ff f812 	bl	8001478 <HAL_GetTick>
 8002454:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002456:	e00a      	b.n	800246e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002458:	f7ff f80e 	bl	8001478 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	f241 3288 	movw	r2, #5000	; 0x1388
 8002466:	4293      	cmp	r3, r2
 8002468:	d901      	bls.n	800246e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e095      	b.n	800259a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246e:	4b4e      	ldr	r3, [pc, #312]	; (80025a8 <HAL_RCC_ClockConfig+0x264>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 020c 	and.w	r2, r3, #12
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	429a      	cmp	r2, r3
 800247e:	d1eb      	bne.n	8002458 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d023      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	2b00      	cmp	r3, #0
 8002496:	d005      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002498:	4b43      	ldr	r3, [pc, #268]	; (80025a8 <HAL_RCC_ClockConfig+0x264>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	4a42      	ldr	r2, [pc, #264]	; (80025a8 <HAL_RCC_ClockConfig+0x264>)
 800249e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024a2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0308 	and.w	r3, r3, #8
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d007      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80024b0:	4b3d      	ldr	r3, [pc, #244]	; (80025a8 <HAL_RCC_ClockConfig+0x264>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80024b8:	4a3b      	ldr	r2, [pc, #236]	; (80025a8 <HAL_RCC_ClockConfig+0x264>)
 80024ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024c0:	4b39      	ldr	r3, [pc, #228]	; (80025a8 <HAL_RCC_ClockConfig+0x264>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	4936      	ldr	r1, [pc, #216]	; (80025a8 <HAL_RCC_ClockConfig+0x264>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	608b      	str	r3, [r1, #8]
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	2b80      	cmp	r3, #128	; 0x80
 80024d8:	d105      	bne.n	80024e6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80024da:	4b33      	ldr	r3, [pc, #204]	; (80025a8 <HAL_RCC_ClockConfig+0x264>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	4a32      	ldr	r2, [pc, #200]	; (80025a8 <HAL_RCC_ClockConfig+0x264>)
 80024e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024e4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024e6:	4b2f      	ldr	r3, [pc, #188]	; (80025a4 <HAL_RCC_ClockConfig+0x260>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d21d      	bcs.n	8002530 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f4:	4b2b      	ldr	r3, [pc, #172]	; (80025a4 <HAL_RCC_ClockConfig+0x260>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f023 020f 	bic.w	r2, r3, #15
 80024fc:	4929      	ldr	r1, [pc, #164]	; (80025a4 <HAL_RCC_ClockConfig+0x260>)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	4313      	orrs	r3, r2
 8002502:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002504:	f7fe ffb8 	bl	8001478 <HAL_GetTick>
 8002508:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800250a:	e00a      	b.n	8002522 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800250c:	f7fe ffb4 	bl	8001478 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	f241 3288 	movw	r2, #5000	; 0x1388
 800251a:	4293      	cmp	r3, r2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e03b      	b.n	800259a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002522:	4b20      	ldr	r3, [pc, #128]	; (80025a4 <HAL_RCC_ClockConfig+0x260>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	429a      	cmp	r2, r3
 800252e:	d1ed      	bne.n	800250c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	2b00      	cmp	r3, #0
 800253a:	d008      	beq.n	800254e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800253c:	4b1a      	ldr	r3, [pc, #104]	; (80025a8 <HAL_RCC_ClockConfig+0x264>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	4917      	ldr	r1, [pc, #92]	; (80025a8 <HAL_RCC_ClockConfig+0x264>)
 800254a:	4313      	orrs	r3, r2
 800254c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0308 	and.w	r3, r3, #8
 8002556:	2b00      	cmp	r3, #0
 8002558:	d009      	beq.n	800256e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800255a:	4b13      	ldr	r3, [pc, #76]	; (80025a8 <HAL_RCC_ClockConfig+0x264>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	490f      	ldr	r1, [pc, #60]	; (80025a8 <HAL_RCC_ClockConfig+0x264>)
 800256a:	4313      	orrs	r3, r2
 800256c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800256e:	f000 f825 	bl	80025bc <HAL_RCC_GetSysClockFreq>
 8002572:	4602      	mov	r2, r0
 8002574:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <HAL_RCC_ClockConfig+0x264>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	091b      	lsrs	r3, r3, #4
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	490c      	ldr	r1, [pc, #48]	; (80025b0 <HAL_RCC_ClockConfig+0x26c>)
 8002580:	5ccb      	ldrb	r3, [r1, r3]
 8002582:	f003 031f 	and.w	r3, r3, #31
 8002586:	fa22 f303 	lsr.w	r3, r2, r3
 800258a:	4a0a      	ldr	r2, [pc, #40]	; (80025b4 <HAL_RCC_ClockConfig+0x270>)
 800258c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800258e:	4b0a      	ldr	r3, [pc, #40]	; (80025b8 <HAL_RCC_ClockConfig+0x274>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f7fe fbb4 	bl	8000d00 <HAL_InitTick>
 8002598:	4603      	mov	r3, r0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40022000 	.word	0x40022000
 80025a8:	40021000 	.word	0x40021000
 80025ac:	04c4b400 	.word	0x04c4b400
 80025b0:	08008154 	.word	0x08008154
 80025b4:	20000000 	.word	0x20000000
 80025b8:	20000004 	.word	0x20000004

080025bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	b087      	sub	sp, #28
 80025c0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80025c2:	4b2c      	ldr	r3, [pc, #176]	; (8002674 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 030c 	and.w	r3, r3, #12
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	d102      	bne.n	80025d4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025ce:	4b2a      	ldr	r3, [pc, #168]	; (8002678 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	e047      	b.n	8002664 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80025d4:	4b27      	ldr	r3, [pc, #156]	; (8002674 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f003 030c 	and.w	r3, r3, #12
 80025dc:	2b08      	cmp	r3, #8
 80025de:	d102      	bne.n	80025e6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025e0:	4b26      	ldr	r3, [pc, #152]	; (800267c <HAL_RCC_GetSysClockFreq+0xc0>)
 80025e2:	613b      	str	r3, [r7, #16]
 80025e4:	e03e      	b.n	8002664 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80025e6:	4b23      	ldr	r3, [pc, #140]	; (8002674 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 030c 	and.w	r3, r3, #12
 80025ee:	2b0c      	cmp	r3, #12
 80025f0:	d136      	bne.n	8002660 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025f2:	4b20      	ldr	r3, [pc, #128]	; (8002674 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025fc:	4b1d      	ldr	r3, [pc, #116]	; (8002674 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	091b      	lsrs	r3, r3, #4
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	3301      	adds	r3, #1
 8002608:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2b03      	cmp	r3, #3
 800260e:	d10c      	bne.n	800262a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002610:	4a1a      	ldr	r2, [pc, #104]	; (800267c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	fbb2 f3f3 	udiv	r3, r2, r3
 8002618:	4a16      	ldr	r2, [pc, #88]	; (8002674 <HAL_RCC_GetSysClockFreq+0xb8>)
 800261a:	68d2      	ldr	r2, [r2, #12]
 800261c:	0a12      	lsrs	r2, r2, #8
 800261e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002622:	fb02 f303 	mul.w	r3, r2, r3
 8002626:	617b      	str	r3, [r7, #20]
      break;
 8002628:	e00c      	b.n	8002644 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800262a:	4a13      	ldr	r2, [pc, #76]	; (8002678 <HAL_RCC_GetSysClockFreq+0xbc>)
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002632:	4a10      	ldr	r2, [pc, #64]	; (8002674 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002634:	68d2      	ldr	r2, [r2, #12]
 8002636:	0a12      	lsrs	r2, r2, #8
 8002638:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800263c:	fb02 f303 	mul.w	r3, r2, r3
 8002640:	617b      	str	r3, [r7, #20]
      break;
 8002642:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002644:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	0e5b      	lsrs	r3, r3, #25
 800264a:	f003 0303 	and.w	r3, r3, #3
 800264e:	3301      	adds	r3, #1
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	fbb2 f3f3 	udiv	r3, r2, r3
 800265c:	613b      	str	r3, [r7, #16]
 800265e:	e001      	b.n	8002664 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002660:	2300      	movs	r3, #0
 8002662:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002664:	693b      	ldr	r3, [r7, #16]
}
 8002666:	4618      	mov	r0, r3
 8002668:	371c      	adds	r7, #28
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	40021000 	.word	0x40021000
 8002678:	00f42400 	.word	0x00f42400
 800267c:	016e3600 	.word	0x016e3600

08002680 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002684:	4b03      	ldr	r3, [pc, #12]	; (8002694 <HAL_RCC_GetHCLKFreq+0x14>)
 8002686:	681b      	ldr	r3, [r3, #0]
}
 8002688:	4618      	mov	r0, r3
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	20000000 	.word	0x20000000

08002698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800269c:	f7ff fff0 	bl	8002680 <HAL_RCC_GetHCLKFreq>
 80026a0:	4602      	mov	r2, r0
 80026a2:	4b06      	ldr	r3, [pc, #24]	; (80026bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	0a1b      	lsrs	r3, r3, #8
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	4904      	ldr	r1, [pc, #16]	; (80026c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026ae:	5ccb      	ldrb	r3, [r1, r3]
 80026b0:	f003 031f 	and.w	r3, r3, #31
 80026b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40021000 	.word	0x40021000
 80026c0:	08008164 	.word	0x08008164

080026c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80026c8:	f7ff ffda 	bl	8002680 <HAL_RCC_GetHCLKFreq>
 80026cc:	4602      	mov	r2, r0
 80026ce:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	0adb      	lsrs	r3, r3, #11
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	4904      	ldr	r1, [pc, #16]	; (80026ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80026da:	5ccb      	ldrb	r3, [r1, r3]
 80026dc:	f003 031f 	and.w	r3, r3, #31
 80026e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40021000 	.word	0x40021000
 80026ec:	08008164 	.word	0x08008164

080026f0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	220f      	movs	r2, #15
 80026fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002700:	4b12      	ldr	r3, [pc, #72]	; (800274c <HAL_RCC_GetClockConfig+0x5c>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f003 0203 	and.w	r2, r3, #3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800270c:	4b0f      	ldr	r3, [pc, #60]	; (800274c <HAL_RCC_GetClockConfig+0x5c>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002718:	4b0c      	ldr	r3, [pc, #48]	; (800274c <HAL_RCC_GetClockConfig+0x5c>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002724:	4b09      	ldr	r3, [pc, #36]	; (800274c <HAL_RCC_GetClockConfig+0x5c>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	08db      	lsrs	r3, r3, #3
 800272a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002732:	4b07      	ldr	r3, [pc, #28]	; (8002750 <HAL_RCC_GetClockConfig+0x60>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 020f 	and.w	r2, r3, #15
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	601a      	str	r2, [r3, #0]
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	40021000 	.word	0x40021000
 8002750:	40022000 	.word	0x40022000

08002754 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002754:	b480      	push	{r7}
 8002756:	b087      	sub	sp, #28
 8002758:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800275a:	4b1e      	ldr	r3, [pc, #120]	; (80027d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002764:	4b1b      	ldr	r3, [pc, #108]	; (80027d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	091b      	lsrs	r3, r3, #4
 800276a:	f003 030f 	and.w	r3, r3, #15
 800276e:	3301      	adds	r3, #1
 8002770:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	2b03      	cmp	r3, #3
 8002776:	d10c      	bne.n	8002792 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002778:	4a17      	ldr	r2, [pc, #92]	; (80027d8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002780:	4a14      	ldr	r2, [pc, #80]	; (80027d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002782:	68d2      	ldr	r2, [r2, #12]
 8002784:	0a12      	lsrs	r2, r2, #8
 8002786:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800278a:	fb02 f303 	mul.w	r3, r2, r3
 800278e:	617b      	str	r3, [r7, #20]
    break;
 8002790:	e00c      	b.n	80027ac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002792:	4a12      	ldr	r2, [pc, #72]	; (80027dc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	fbb2 f3f3 	udiv	r3, r2, r3
 800279a:	4a0e      	ldr	r2, [pc, #56]	; (80027d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800279c:	68d2      	ldr	r2, [r2, #12]
 800279e:	0a12      	lsrs	r2, r2, #8
 80027a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80027a4:	fb02 f303 	mul.w	r3, r2, r3
 80027a8:	617b      	str	r3, [r7, #20]
    break;
 80027aa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027ac:	4b09      	ldr	r3, [pc, #36]	; (80027d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	0e5b      	lsrs	r3, r3, #25
 80027b2:	f003 0303 	and.w	r3, r3, #3
 80027b6:	3301      	adds	r3, #1
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80027c6:	687b      	ldr	r3, [r7, #4]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	371c      	adds	r7, #28
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	40021000 	.word	0x40021000
 80027d8:	016e3600 	.word	0x016e3600
 80027dc:	00f42400 	.word	0x00f42400

080027e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027e8:	2300      	movs	r3, #0
 80027ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027ec:	2300      	movs	r3, #0
 80027ee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 8098 	beq.w	800292e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027fe:	2300      	movs	r3, #0
 8002800:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002802:	4b43      	ldr	r3, [pc, #268]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10d      	bne.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800280e:	4b40      	ldr	r3, [pc, #256]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002812:	4a3f      	ldr	r2, [pc, #252]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002818:	6593      	str	r3, [r2, #88]	; 0x58
 800281a:	4b3d      	ldr	r3, [pc, #244]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800281c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002822:	60bb      	str	r3, [r7, #8]
 8002824:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002826:	2301      	movs	r3, #1
 8002828:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800282a:	4b3a      	ldr	r3, [pc, #232]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a39      	ldr	r2, [pc, #228]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002834:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002836:	f7fe fe1f 	bl	8001478 <HAL_GetTick>
 800283a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800283c:	e009      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800283e:	f7fe fe1b 	bl	8001478 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d902      	bls.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	74fb      	strb	r3, [r7, #19]
        break;
 8002850:	e005      	b.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002852:	4b30      	ldr	r3, [pc, #192]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285a:	2b00      	cmp	r3, #0
 800285c:	d0ef      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800285e:	7cfb      	ldrb	r3, [r7, #19]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d159      	bne.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002864:	4b2a      	ldr	r3, [pc, #168]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800286e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d01e      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	429a      	cmp	r2, r3
 800287e:	d019      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002880:	4b23      	ldr	r3, [pc, #140]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002886:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800288a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800288c:	4b20      	ldr	r3, [pc, #128]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800288e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002892:	4a1f      	ldr	r2, [pc, #124]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002898:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800289c:	4b1c      	ldr	r3, [pc, #112]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800289e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a2:	4a1b      	ldr	r2, [pc, #108]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028ac:	4a18      	ldr	r2, [pc, #96]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d016      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028be:	f7fe fddb 	bl	8001478 <HAL_GetTick>
 80028c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028c4:	e00b      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c6:	f7fe fdd7 	bl	8001478 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d902      	bls.n	80028de <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	74fb      	strb	r3, [r7, #19]
            break;
 80028dc:	e006      	b.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028de:	4b0c      	ldr	r3, [pc, #48]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d0ec      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80028ec:	7cfb      	ldrb	r3, [r7, #19]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10b      	bne.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028f2:	4b07      	ldr	r3, [pc, #28]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002900:	4903      	ldr	r1, [pc, #12]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002902:	4313      	orrs	r3, r2
 8002904:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002908:	e008      	b.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800290a:	7cfb      	ldrb	r3, [r7, #19]
 800290c:	74bb      	strb	r3, [r7, #18]
 800290e:	e005      	b.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002910:	40021000 	.word	0x40021000
 8002914:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002918:	7cfb      	ldrb	r3, [r7, #19]
 800291a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800291c:	7c7b      	ldrb	r3, [r7, #17]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d105      	bne.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002922:	4ba7      	ldr	r3, [pc, #668]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002926:	4aa6      	ldr	r2, [pc, #664]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002928:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800292c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00a      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800293a:	4ba1      	ldr	r3, [pc, #644]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800293c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002940:	f023 0203 	bic.w	r2, r3, #3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	499d      	ldr	r1, [pc, #628]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800294a:	4313      	orrs	r3, r2
 800294c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00a      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800295c:	4b98      	ldr	r3, [pc, #608]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800295e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002962:	f023 020c 	bic.w	r2, r3, #12
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	4995      	ldr	r1, [pc, #596]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800296c:	4313      	orrs	r3, r2
 800296e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0304 	and.w	r3, r3, #4
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00a      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800297e:	4b90      	ldr	r3, [pc, #576]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002984:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	498c      	ldr	r1, [pc, #560]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800298e:	4313      	orrs	r3, r2
 8002990:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0308 	and.w	r3, r3, #8
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00a      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029a0:	4b87      	ldr	r3, [pc, #540]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	4984      	ldr	r1, [pc, #528]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0310 	and.w	r3, r3, #16
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00a      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029c2:	4b7f      	ldr	r3, [pc, #508]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	497b      	ldr	r1, [pc, #492]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0320 	and.w	r3, r3, #32
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00a      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029e4:	4b76      	ldr	r3, [pc, #472]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	4973      	ldr	r1, [pc, #460]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00a      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a06:	4b6e      	ldr	r3, [pc, #440]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	69db      	ldr	r3, [r3, #28]
 8002a14:	496a      	ldr	r1, [pc, #424]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00a      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a28:	4b65      	ldr	r3, [pc, #404]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	4962      	ldr	r1, [pc, #392]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00a      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a4a:	4b5d      	ldr	r3, [pc, #372]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a58:	4959      	ldr	r1, [pc, #356]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00a      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a6c:	4b54      	ldr	r3, [pc, #336]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a72:	f023 0203 	bic.w	r2, r3, #3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7a:	4951      	ldr	r1, [pc, #324]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00a      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a8e:	4b4c      	ldr	r3, [pc, #304]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9c:	4948      	ldr	r1, [pc, #288]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d015      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ab0:	4b43      	ldr	r3, [pc, #268]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	4940      	ldr	r1, [pc, #256]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ace:	d105      	bne.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ad0:	4b3b      	ldr	r3, [pc, #236]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	4a3a      	ldr	r2, [pc, #232]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ad6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ada:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d015      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ae8:	4b35      	ldr	r3, [pc, #212]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af6:	4932      	ldr	r1, [pc, #200]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b06:	d105      	bne.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b08:	4b2d      	ldr	r3, [pc, #180]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	4a2c      	ldr	r2, [pc, #176]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b12:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d015      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002b20:	4b27      	ldr	r3, [pc, #156]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b26:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b2e:	4924      	ldr	r1, [pc, #144]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b3e:	d105      	bne.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b40:	4b1f      	ldr	r3, [pc, #124]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	4a1e      	ldr	r2, [pc, #120]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b4a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d015      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b58:	4b19      	ldr	r3, [pc, #100]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b66:	4916      	ldr	r1, [pc, #88]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b76:	d105      	bne.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b78:	4b11      	ldr	r3, [pc, #68]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	4a10      	ldr	r2, [pc, #64]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b82:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d019      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b90:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	4908      	ldr	r1, [pc, #32]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bae:	d109      	bne.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bb0:	4b03      	ldr	r3, [pc, #12]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	4a02      	ldr	r2, [pc, #8]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bba:	60d3      	str	r3, [r2, #12]
 8002bbc:	e002      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002bbe:	bf00      	nop
 8002bc0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d015      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002bd0:	4b29      	ldr	r3, [pc, #164]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bde:	4926      	ldr	r1, [pc, #152]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bee:	d105      	bne.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002bf0:	4b21      	ldr	r3, [pc, #132]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	4a20      	ldr	r2, [pc, #128]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bfa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d015      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002c08:	4b1b      	ldr	r3, [pc, #108]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c16:	4918      	ldr	r1, [pc, #96]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c26:	d105      	bne.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002c28:	4b13      	ldr	r3, [pc, #76]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	4a12      	ldr	r2, [pc, #72]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c32:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d015      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002c40:	4b0d      	ldr	r3, [pc, #52]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c4e:	490a      	ldr	r1, [pc, #40]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c5e:	d105      	bne.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c60:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	4a04      	ldr	r2, [pc, #16]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c6a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002c6c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3718      	adds	r7, #24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40021000 	.word	0x40021000

08002c7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e049      	b.n	8002d22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d106      	bne.n	8002ca8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7fe fa7a 	bl	800119c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2202      	movs	r2, #2
 8002cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	3304      	adds	r3, #4
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4610      	mov	r0, r2
 8002cbc:	f000 fdf4 	bl	80038a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
	...

08002d2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d001      	beq.n	8002d44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e054      	b.n	8002dee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2202      	movs	r2, #2
 8002d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68da      	ldr	r2, [r3, #12]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f042 0201 	orr.w	r2, r2, #1
 8002d5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a26      	ldr	r2, [pc, #152]	; (8002dfc <HAL_TIM_Base_Start_IT+0xd0>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d022      	beq.n	8002dac <HAL_TIM_Base_Start_IT+0x80>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d6e:	d01d      	beq.n	8002dac <HAL_TIM_Base_Start_IT+0x80>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a22      	ldr	r2, [pc, #136]	; (8002e00 <HAL_TIM_Base_Start_IT+0xd4>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d018      	beq.n	8002dac <HAL_TIM_Base_Start_IT+0x80>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a21      	ldr	r2, [pc, #132]	; (8002e04 <HAL_TIM_Base_Start_IT+0xd8>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d013      	beq.n	8002dac <HAL_TIM_Base_Start_IT+0x80>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a1f      	ldr	r2, [pc, #124]	; (8002e08 <HAL_TIM_Base_Start_IT+0xdc>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d00e      	beq.n	8002dac <HAL_TIM_Base_Start_IT+0x80>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a1e      	ldr	r2, [pc, #120]	; (8002e0c <HAL_TIM_Base_Start_IT+0xe0>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d009      	beq.n	8002dac <HAL_TIM_Base_Start_IT+0x80>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a1c      	ldr	r2, [pc, #112]	; (8002e10 <HAL_TIM_Base_Start_IT+0xe4>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d004      	beq.n	8002dac <HAL_TIM_Base_Start_IT+0x80>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a1b      	ldr	r2, [pc, #108]	; (8002e14 <HAL_TIM_Base_Start_IT+0xe8>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d115      	bne.n	8002dd8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689a      	ldr	r2, [r3, #8]
 8002db2:	4b19      	ldr	r3, [pc, #100]	; (8002e18 <HAL_TIM_Base_Start_IT+0xec>)
 8002db4:	4013      	ands	r3, r2
 8002db6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2b06      	cmp	r3, #6
 8002dbc:	d015      	beq.n	8002dea <HAL_TIM_Base_Start_IT+0xbe>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dc4:	d011      	beq.n	8002dea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f042 0201 	orr.w	r2, r2, #1
 8002dd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dd6:	e008      	b.n	8002dea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f042 0201 	orr.w	r2, r2, #1
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	e000      	b.n	8002dec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3714      	adds	r7, #20
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	40012c00 	.word	0x40012c00
 8002e00:	40000400 	.word	0x40000400
 8002e04:	40000800 	.word	0x40000800
 8002e08:	40000c00 	.word	0x40000c00
 8002e0c:	40013400 	.word	0x40013400
 8002e10:	40014000 	.word	0x40014000
 8002e14:	40015000 	.word	0x40015000
 8002e18:	00010007 	.word	0x00010007

08002e1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e049      	b.n	8002ec2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d106      	bne.n	8002e48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 f841 	bl	8002eca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3304      	adds	r3, #4
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4610      	mov	r0, r2
 8002e5c:	f000 fd24 	bl	80038a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b083      	sub	sp, #12
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
	...

08002ee0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d109      	bne.n	8002f04 <HAL_TIM_PWM_Start+0x24>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	bf14      	ite	ne
 8002efc:	2301      	movne	r3, #1
 8002efe:	2300      	moveq	r3, #0
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	e03c      	b.n	8002f7e <HAL_TIM_PWM_Start+0x9e>
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	d109      	bne.n	8002f1e <HAL_TIM_PWM_Start+0x3e>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	bf14      	ite	ne
 8002f16:	2301      	movne	r3, #1
 8002f18:	2300      	moveq	r3, #0
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	e02f      	b.n	8002f7e <HAL_TIM_PWM_Start+0x9e>
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	2b08      	cmp	r3, #8
 8002f22:	d109      	bne.n	8002f38 <HAL_TIM_PWM_Start+0x58>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	bf14      	ite	ne
 8002f30:	2301      	movne	r3, #1
 8002f32:	2300      	moveq	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	e022      	b.n	8002f7e <HAL_TIM_PWM_Start+0x9e>
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	2b0c      	cmp	r3, #12
 8002f3c:	d109      	bne.n	8002f52 <HAL_TIM_PWM_Start+0x72>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	bf14      	ite	ne
 8002f4a:	2301      	movne	r3, #1
 8002f4c:	2300      	moveq	r3, #0
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	e015      	b.n	8002f7e <HAL_TIM_PWM_Start+0x9e>
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	2b10      	cmp	r3, #16
 8002f56:	d109      	bne.n	8002f6c <HAL_TIM_PWM_Start+0x8c>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	bf14      	ite	ne
 8002f64:	2301      	movne	r3, #1
 8002f66:	2300      	moveq	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	e008      	b.n	8002f7e <HAL_TIM_PWM_Start+0x9e>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	bf14      	ite	ne
 8002f78:	2301      	movne	r3, #1
 8002f7a:	2300      	moveq	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e0a6      	b.n	80030d4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d104      	bne.n	8002f96 <HAL_TIM_PWM_Start+0xb6>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f94:	e023      	b.n	8002fde <HAL_TIM_PWM_Start+0xfe>
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	2b04      	cmp	r3, #4
 8002f9a:	d104      	bne.n	8002fa6 <HAL_TIM_PWM_Start+0xc6>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fa4:	e01b      	b.n	8002fde <HAL_TIM_PWM_Start+0xfe>
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	d104      	bne.n	8002fb6 <HAL_TIM_PWM_Start+0xd6>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fb4:	e013      	b.n	8002fde <HAL_TIM_PWM_Start+0xfe>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	2b0c      	cmp	r3, #12
 8002fba:	d104      	bne.n	8002fc6 <HAL_TIM_PWM_Start+0xe6>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002fc4:	e00b      	b.n	8002fde <HAL_TIM_PWM_Start+0xfe>
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	2b10      	cmp	r3, #16
 8002fca:	d104      	bne.n	8002fd6 <HAL_TIM_PWM_Start+0xf6>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2202      	movs	r2, #2
 8002fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fd4:	e003      	b.n	8002fde <HAL_TIM_PWM_Start+0xfe>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2202      	movs	r2, #2
 8002fda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	6839      	ldr	r1, [r7, #0]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f001 f8cc 	bl	8004184 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a3a      	ldr	r2, [pc, #232]	; (80030dc <HAL_TIM_PWM_Start+0x1fc>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d018      	beq.n	8003028 <HAL_TIM_PWM_Start+0x148>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a39      	ldr	r2, [pc, #228]	; (80030e0 <HAL_TIM_PWM_Start+0x200>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d013      	beq.n	8003028 <HAL_TIM_PWM_Start+0x148>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a37      	ldr	r2, [pc, #220]	; (80030e4 <HAL_TIM_PWM_Start+0x204>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d00e      	beq.n	8003028 <HAL_TIM_PWM_Start+0x148>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a36      	ldr	r2, [pc, #216]	; (80030e8 <HAL_TIM_PWM_Start+0x208>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d009      	beq.n	8003028 <HAL_TIM_PWM_Start+0x148>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a34      	ldr	r2, [pc, #208]	; (80030ec <HAL_TIM_PWM_Start+0x20c>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d004      	beq.n	8003028 <HAL_TIM_PWM_Start+0x148>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a33      	ldr	r2, [pc, #204]	; (80030f0 <HAL_TIM_PWM_Start+0x210>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d101      	bne.n	800302c <HAL_TIM_PWM_Start+0x14c>
 8003028:	2301      	movs	r3, #1
 800302a:	e000      	b.n	800302e <HAL_TIM_PWM_Start+0x14e>
 800302c:	2300      	movs	r3, #0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d007      	beq.n	8003042 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003040:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a25      	ldr	r2, [pc, #148]	; (80030dc <HAL_TIM_PWM_Start+0x1fc>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d022      	beq.n	8003092 <HAL_TIM_PWM_Start+0x1b2>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003054:	d01d      	beq.n	8003092 <HAL_TIM_PWM_Start+0x1b2>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a26      	ldr	r2, [pc, #152]	; (80030f4 <HAL_TIM_PWM_Start+0x214>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d018      	beq.n	8003092 <HAL_TIM_PWM_Start+0x1b2>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a24      	ldr	r2, [pc, #144]	; (80030f8 <HAL_TIM_PWM_Start+0x218>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d013      	beq.n	8003092 <HAL_TIM_PWM_Start+0x1b2>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a23      	ldr	r2, [pc, #140]	; (80030fc <HAL_TIM_PWM_Start+0x21c>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d00e      	beq.n	8003092 <HAL_TIM_PWM_Start+0x1b2>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a19      	ldr	r2, [pc, #100]	; (80030e0 <HAL_TIM_PWM_Start+0x200>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d009      	beq.n	8003092 <HAL_TIM_PWM_Start+0x1b2>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a18      	ldr	r2, [pc, #96]	; (80030e4 <HAL_TIM_PWM_Start+0x204>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d004      	beq.n	8003092 <HAL_TIM_PWM_Start+0x1b2>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a18      	ldr	r2, [pc, #96]	; (80030f0 <HAL_TIM_PWM_Start+0x210>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d115      	bne.n	80030be <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	4b19      	ldr	r3, [pc, #100]	; (8003100 <HAL_TIM_PWM_Start+0x220>)
 800309a:	4013      	ands	r3, r2
 800309c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2b06      	cmp	r3, #6
 80030a2:	d015      	beq.n	80030d0 <HAL_TIM_PWM_Start+0x1f0>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030aa:	d011      	beq.n	80030d0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f042 0201 	orr.w	r2, r2, #1
 80030ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030bc:	e008      	b.n	80030d0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f042 0201 	orr.w	r2, r2, #1
 80030cc:	601a      	str	r2, [r3, #0]
 80030ce:	e000      	b.n	80030d2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40012c00 	.word	0x40012c00
 80030e0:	40013400 	.word	0x40013400
 80030e4:	40014000 	.word	0x40014000
 80030e8:	40014400 	.word	0x40014400
 80030ec:	40014800 	.word	0x40014800
 80030f0:	40015000 	.word	0x40015000
 80030f4:	40000400 	.word	0x40000400
 80030f8:	40000800 	.word	0x40000800
 80030fc:	40000c00 	.word	0x40000c00
 8003100:	00010007 	.word	0x00010007

08003104 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b02      	cmp	r3, #2
 8003118:	d122      	bne.n	8003160 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b02      	cmp	r3, #2
 8003126:	d11b      	bne.n	8003160 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f06f 0202 	mvn.w	r2, #2
 8003130:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	f003 0303 	and.w	r3, r3, #3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 fb90 	bl	800386c <HAL_TIM_IC_CaptureCallback>
 800314c:	e005      	b.n	800315a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 fb82 	bl	8003858 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 fb93 	bl	8003880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	f003 0304 	and.w	r3, r3, #4
 800316a:	2b04      	cmp	r3, #4
 800316c:	d122      	bne.n	80031b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b04      	cmp	r3, #4
 800317a:	d11b      	bne.n	80031b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f06f 0204 	mvn.w	r2, #4
 8003184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2202      	movs	r2, #2
 800318a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 fb66 	bl	800386c <HAL_TIM_IC_CaptureCallback>
 80031a0:	e005      	b.n	80031ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 fb58 	bl	8003858 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 fb69 	bl	8003880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	f003 0308 	and.w	r3, r3, #8
 80031be:	2b08      	cmp	r3, #8
 80031c0:	d122      	bne.n	8003208 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	f003 0308 	and.w	r3, r3, #8
 80031cc:	2b08      	cmp	r3, #8
 80031ce:	d11b      	bne.n	8003208 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f06f 0208 	mvn.w	r2, #8
 80031d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2204      	movs	r2, #4
 80031de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	f003 0303 	and.w	r3, r3, #3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 fb3c 	bl	800386c <HAL_TIM_IC_CaptureCallback>
 80031f4:	e005      	b.n	8003202 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 fb2e 	bl	8003858 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 fb3f 	bl	8003880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	f003 0310 	and.w	r3, r3, #16
 8003212:	2b10      	cmp	r3, #16
 8003214:	d122      	bne.n	800325c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f003 0310 	and.w	r3, r3, #16
 8003220:	2b10      	cmp	r3, #16
 8003222:	d11b      	bne.n	800325c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f06f 0210 	mvn.w	r2, #16
 800322c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2208      	movs	r2, #8
 8003232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 fb12 	bl	800386c <HAL_TIM_IC_CaptureCallback>
 8003248:	e005      	b.n	8003256 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 fb04 	bl	8003858 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 fb15 	bl	8003880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b01      	cmp	r3, #1
 8003268:	d10e      	bne.n	8003288 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b01      	cmp	r3, #1
 8003276:	d107      	bne.n	8003288 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f06f 0201 	mvn.w	r2, #1
 8003280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7fd fade 	bl	8000844 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003292:	2b80      	cmp	r3, #128	; 0x80
 8003294:	d10e      	bne.n	80032b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032a0:	2b80      	cmp	r3, #128	; 0x80
 80032a2:	d107      	bne.n	80032b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f001 f9a2 	bl	80045f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032c2:	d10e      	bne.n	80032e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ce:	2b80      	cmp	r3, #128	; 0x80
 80032d0:	d107      	bne.n	80032e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80032da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f001 f995 	bl	800460c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ec:	2b40      	cmp	r3, #64	; 0x40
 80032ee:	d10e      	bne.n	800330e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032fa:	2b40      	cmp	r3, #64	; 0x40
 80032fc:	d107      	bne.n	800330e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 fac3 	bl	8003894 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	f003 0320 	and.w	r3, r3, #32
 8003318:	2b20      	cmp	r3, #32
 800331a:	d10e      	bne.n	800333a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	f003 0320 	and.w	r3, r3, #32
 8003326:	2b20      	cmp	r3, #32
 8003328:	d107      	bne.n	800333a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f06f 0220 	mvn.w	r2, #32
 8003332:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f001 f955 	bl	80045e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003344:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003348:	d10f      	bne.n	800336a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003354:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003358:	d107      	bne.n	800336a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003362:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f001 f95b 	bl	8004620 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003374:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003378:	d10f      	bne.n	800339a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003384:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003388:	d107      	bne.n	800339a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003392:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f001 f94d 	bl	8004634 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033a8:	d10f      	bne.n	80033ca <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033b8:	d107      	bne.n	80033ca <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80033c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f001 f93f 	bl	8004648 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033d8:	d10f      	bne.n	80033fa <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033e8:	d107      	bne.n	80033fa <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80033f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f001 f931 	bl	800465c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033fa:	bf00      	nop
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
	...

08003404 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003410:	2300      	movs	r3, #0
 8003412:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800341a:	2b01      	cmp	r3, #1
 800341c:	d101      	bne.n	8003422 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800341e:	2302      	movs	r3, #2
 8003420:	e0ff      	b.n	8003622 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2b14      	cmp	r3, #20
 800342e:	f200 80f0 	bhi.w	8003612 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003432:	a201      	add	r2, pc, #4	; (adr r2, 8003438 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003438:	0800348d 	.word	0x0800348d
 800343c:	08003613 	.word	0x08003613
 8003440:	08003613 	.word	0x08003613
 8003444:	08003613 	.word	0x08003613
 8003448:	080034cd 	.word	0x080034cd
 800344c:	08003613 	.word	0x08003613
 8003450:	08003613 	.word	0x08003613
 8003454:	08003613 	.word	0x08003613
 8003458:	0800350f 	.word	0x0800350f
 800345c:	08003613 	.word	0x08003613
 8003460:	08003613 	.word	0x08003613
 8003464:	08003613 	.word	0x08003613
 8003468:	0800354f 	.word	0x0800354f
 800346c:	08003613 	.word	0x08003613
 8003470:	08003613 	.word	0x08003613
 8003474:	08003613 	.word	0x08003613
 8003478:	08003591 	.word	0x08003591
 800347c:	08003613 	.word	0x08003613
 8003480:	08003613 	.word	0x08003613
 8003484:	08003613 	.word	0x08003613
 8003488:	080035d1 	.word	0x080035d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68b9      	ldr	r1, [r7, #8]
 8003492:	4618      	mov	r0, r3
 8003494:	f000 fab0 	bl	80039f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	699a      	ldr	r2, [r3, #24]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0208 	orr.w	r2, r2, #8
 80034a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	699a      	ldr	r2, [r3, #24]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 0204 	bic.w	r2, r2, #4
 80034b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6999      	ldr	r1, [r3, #24]
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	691a      	ldr	r2, [r3, #16]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	619a      	str	r2, [r3, #24]
      break;
 80034ca:	e0a5      	b.n	8003618 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68b9      	ldr	r1, [r7, #8]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 fb2a 	bl	8003b2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	699a      	ldr	r2, [r3, #24]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	699a      	ldr	r2, [r3, #24]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6999      	ldr	r1, [r3, #24]
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	021a      	lsls	r2, r3, #8
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	619a      	str	r2, [r3, #24]
      break;
 800350c:	e084      	b.n	8003618 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68b9      	ldr	r1, [r7, #8]
 8003514:	4618      	mov	r0, r3
 8003516:	f000 fb9d 	bl	8003c54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	69da      	ldr	r2, [r3, #28]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f042 0208 	orr.w	r2, r2, #8
 8003528:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	69da      	ldr	r2, [r3, #28]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 0204 	bic.w	r2, r2, #4
 8003538:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	69d9      	ldr	r1, [r3, #28]
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	691a      	ldr	r2, [r3, #16]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	430a      	orrs	r2, r1
 800354a:	61da      	str	r2, [r3, #28]
      break;
 800354c:	e064      	b.n	8003618 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68b9      	ldr	r1, [r7, #8]
 8003554:	4618      	mov	r0, r3
 8003556:	f000 fc0f 	bl	8003d78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	69da      	ldr	r2, [r3, #28]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003568:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	69da      	ldr	r2, [r3, #28]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003578:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	69d9      	ldr	r1, [r3, #28]
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	021a      	lsls	r2, r3, #8
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	430a      	orrs	r2, r1
 800358c:	61da      	str	r2, [r3, #28]
      break;
 800358e:	e043      	b.n	8003618 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68b9      	ldr	r1, [r7, #8]
 8003596:	4618      	mov	r0, r3
 8003598:	f000 fc82 	bl	8003ea0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f042 0208 	orr.w	r2, r2, #8
 80035aa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 0204 	bic.w	r2, r2, #4
 80035ba:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	691a      	ldr	r2, [r3, #16]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	430a      	orrs	r2, r1
 80035cc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80035ce:	e023      	b.n	8003618 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68b9      	ldr	r1, [r7, #8]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f000 fccc 	bl	8003f74 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035ea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035fa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	021a      	lsls	r2, r3, #8
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003610:	e002      	b.n	8003618 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	75fb      	strb	r3, [r7, #23]
      break;
 8003616:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003620:	7dfb      	ldrb	r3, [r7, #23]
}
 8003622:	4618      	mov	r0, r3
 8003624:	3718      	adds	r7, #24
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop

0800362c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003636:	2300      	movs	r3, #0
 8003638:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003640:	2b01      	cmp	r3, #1
 8003642:	d101      	bne.n	8003648 <HAL_TIM_ConfigClockSource+0x1c>
 8003644:	2302      	movs	r3, #2
 8003646:	e0f6      	b.n	8003836 <HAL_TIM_ConfigClockSource+0x20a>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2202      	movs	r2, #2
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003666:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800366a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003672:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a6f      	ldr	r2, [pc, #444]	; (8003840 <HAL_TIM_ConfigClockSource+0x214>)
 8003682:	4293      	cmp	r3, r2
 8003684:	f000 80c1 	beq.w	800380a <HAL_TIM_ConfigClockSource+0x1de>
 8003688:	4a6d      	ldr	r2, [pc, #436]	; (8003840 <HAL_TIM_ConfigClockSource+0x214>)
 800368a:	4293      	cmp	r3, r2
 800368c:	f200 80c6 	bhi.w	800381c <HAL_TIM_ConfigClockSource+0x1f0>
 8003690:	4a6c      	ldr	r2, [pc, #432]	; (8003844 <HAL_TIM_ConfigClockSource+0x218>)
 8003692:	4293      	cmp	r3, r2
 8003694:	f000 80b9 	beq.w	800380a <HAL_TIM_ConfigClockSource+0x1de>
 8003698:	4a6a      	ldr	r2, [pc, #424]	; (8003844 <HAL_TIM_ConfigClockSource+0x218>)
 800369a:	4293      	cmp	r3, r2
 800369c:	f200 80be 	bhi.w	800381c <HAL_TIM_ConfigClockSource+0x1f0>
 80036a0:	4a69      	ldr	r2, [pc, #420]	; (8003848 <HAL_TIM_ConfigClockSource+0x21c>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	f000 80b1 	beq.w	800380a <HAL_TIM_ConfigClockSource+0x1de>
 80036a8:	4a67      	ldr	r2, [pc, #412]	; (8003848 <HAL_TIM_ConfigClockSource+0x21c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	f200 80b6 	bhi.w	800381c <HAL_TIM_ConfigClockSource+0x1f0>
 80036b0:	4a66      	ldr	r2, [pc, #408]	; (800384c <HAL_TIM_ConfigClockSource+0x220>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	f000 80a9 	beq.w	800380a <HAL_TIM_ConfigClockSource+0x1de>
 80036b8:	4a64      	ldr	r2, [pc, #400]	; (800384c <HAL_TIM_ConfigClockSource+0x220>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	f200 80ae 	bhi.w	800381c <HAL_TIM_ConfigClockSource+0x1f0>
 80036c0:	4a63      	ldr	r2, [pc, #396]	; (8003850 <HAL_TIM_ConfigClockSource+0x224>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	f000 80a1 	beq.w	800380a <HAL_TIM_ConfigClockSource+0x1de>
 80036c8:	4a61      	ldr	r2, [pc, #388]	; (8003850 <HAL_TIM_ConfigClockSource+0x224>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	f200 80a6 	bhi.w	800381c <HAL_TIM_ConfigClockSource+0x1f0>
 80036d0:	4a60      	ldr	r2, [pc, #384]	; (8003854 <HAL_TIM_ConfigClockSource+0x228>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	f000 8099 	beq.w	800380a <HAL_TIM_ConfigClockSource+0x1de>
 80036d8:	4a5e      	ldr	r2, [pc, #376]	; (8003854 <HAL_TIM_ConfigClockSource+0x228>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	f200 809e 	bhi.w	800381c <HAL_TIM_ConfigClockSource+0x1f0>
 80036e0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80036e4:	f000 8091 	beq.w	800380a <HAL_TIM_ConfigClockSource+0x1de>
 80036e8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80036ec:	f200 8096 	bhi.w	800381c <HAL_TIM_ConfigClockSource+0x1f0>
 80036f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036f4:	f000 8089 	beq.w	800380a <HAL_TIM_ConfigClockSource+0x1de>
 80036f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036fc:	f200 808e 	bhi.w	800381c <HAL_TIM_ConfigClockSource+0x1f0>
 8003700:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003704:	d03e      	beq.n	8003784 <HAL_TIM_ConfigClockSource+0x158>
 8003706:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800370a:	f200 8087 	bhi.w	800381c <HAL_TIM_ConfigClockSource+0x1f0>
 800370e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003712:	f000 8086 	beq.w	8003822 <HAL_TIM_ConfigClockSource+0x1f6>
 8003716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800371a:	d87f      	bhi.n	800381c <HAL_TIM_ConfigClockSource+0x1f0>
 800371c:	2b70      	cmp	r3, #112	; 0x70
 800371e:	d01a      	beq.n	8003756 <HAL_TIM_ConfigClockSource+0x12a>
 8003720:	2b70      	cmp	r3, #112	; 0x70
 8003722:	d87b      	bhi.n	800381c <HAL_TIM_ConfigClockSource+0x1f0>
 8003724:	2b60      	cmp	r3, #96	; 0x60
 8003726:	d050      	beq.n	80037ca <HAL_TIM_ConfigClockSource+0x19e>
 8003728:	2b60      	cmp	r3, #96	; 0x60
 800372a:	d877      	bhi.n	800381c <HAL_TIM_ConfigClockSource+0x1f0>
 800372c:	2b50      	cmp	r3, #80	; 0x50
 800372e:	d03c      	beq.n	80037aa <HAL_TIM_ConfigClockSource+0x17e>
 8003730:	2b50      	cmp	r3, #80	; 0x50
 8003732:	d873      	bhi.n	800381c <HAL_TIM_ConfigClockSource+0x1f0>
 8003734:	2b40      	cmp	r3, #64	; 0x40
 8003736:	d058      	beq.n	80037ea <HAL_TIM_ConfigClockSource+0x1be>
 8003738:	2b40      	cmp	r3, #64	; 0x40
 800373a:	d86f      	bhi.n	800381c <HAL_TIM_ConfigClockSource+0x1f0>
 800373c:	2b30      	cmp	r3, #48	; 0x30
 800373e:	d064      	beq.n	800380a <HAL_TIM_ConfigClockSource+0x1de>
 8003740:	2b30      	cmp	r3, #48	; 0x30
 8003742:	d86b      	bhi.n	800381c <HAL_TIM_ConfigClockSource+0x1f0>
 8003744:	2b20      	cmp	r3, #32
 8003746:	d060      	beq.n	800380a <HAL_TIM_ConfigClockSource+0x1de>
 8003748:	2b20      	cmp	r3, #32
 800374a:	d867      	bhi.n	800381c <HAL_TIM_ConfigClockSource+0x1f0>
 800374c:	2b00      	cmp	r3, #0
 800374e:	d05c      	beq.n	800380a <HAL_TIM_ConfigClockSource+0x1de>
 8003750:	2b10      	cmp	r3, #16
 8003752:	d05a      	beq.n	800380a <HAL_TIM_ConfigClockSource+0x1de>
 8003754:	e062      	b.n	800381c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6818      	ldr	r0, [r3, #0]
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	6899      	ldr	r1, [r3, #8]
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f000 fced 	bl	8004144 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003778:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	609a      	str	r2, [r3, #8]
      break;
 8003782:	e04f      	b.n	8003824 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6818      	ldr	r0, [r3, #0]
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	6899      	ldr	r1, [r3, #8]
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685a      	ldr	r2, [r3, #4]
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f000 fcd6 	bl	8004144 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689a      	ldr	r2, [r3, #8]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037a6:	609a      	str	r2, [r3, #8]
      break;
 80037a8:	e03c      	b.n	8003824 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6818      	ldr	r0, [r3, #0]
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	6859      	ldr	r1, [r3, #4]
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	461a      	mov	r2, r3
 80037b8:	f000 fc48 	bl	800404c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2150      	movs	r1, #80	; 0x50
 80037c2:	4618      	mov	r0, r3
 80037c4:	f000 fca1 	bl	800410a <TIM_ITRx_SetConfig>
      break;
 80037c8:	e02c      	b.n	8003824 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6818      	ldr	r0, [r3, #0]
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	6859      	ldr	r1, [r3, #4]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	461a      	mov	r2, r3
 80037d8:	f000 fc67 	bl	80040aa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2160      	movs	r1, #96	; 0x60
 80037e2:	4618      	mov	r0, r3
 80037e4:	f000 fc91 	bl	800410a <TIM_ITRx_SetConfig>
      break;
 80037e8:	e01c      	b.n	8003824 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6818      	ldr	r0, [r3, #0]
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	6859      	ldr	r1, [r3, #4]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	461a      	mov	r2, r3
 80037f8:	f000 fc28 	bl	800404c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2140      	movs	r1, #64	; 0x40
 8003802:	4618      	mov	r0, r3
 8003804:	f000 fc81 	bl	800410a <TIM_ITRx_SetConfig>
      break;
 8003808:	e00c      	b.n	8003824 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4619      	mov	r1, r3
 8003814:	4610      	mov	r0, r2
 8003816:	f000 fc78 	bl	800410a <TIM_ITRx_SetConfig>
      break;
 800381a:	e003      	b.n	8003824 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	73fb      	strb	r3, [r7, #15]
      break;
 8003820:	e000      	b.n	8003824 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8003822:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003834:	7bfb      	ldrb	r3, [r7, #15]
}
 8003836:	4618      	mov	r0, r3
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	00100070 	.word	0x00100070
 8003844:	00100060 	.word	0x00100060
 8003848:	00100050 	.word	0x00100050
 800384c:	00100040 	.word	0x00100040
 8003850:	00100030 	.word	0x00100030
 8003854:	00100020 	.word	0x00100020

08003858 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a46      	ldr	r2, [pc, #280]	; (80039d4 <TIM_Base_SetConfig+0x12c>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d017      	beq.n	80038f0 <TIM_Base_SetConfig+0x48>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c6:	d013      	beq.n	80038f0 <TIM_Base_SetConfig+0x48>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a43      	ldr	r2, [pc, #268]	; (80039d8 <TIM_Base_SetConfig+0x130>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d00f      	beq.n	80038f0 <TIM_Base_SetConfig+0x48>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a42      	ldr	r2, [pc, #264]	; (80039dc <TIM_Base_SetConfig+0x134>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d00b      	beq.n	80038f0 <TIM_Base_SetConfig+0x48>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a41      	ldr	r2, [pc, #260]	; (80039e0 <TIM_Base_SetConfig+0x138>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d007      	beq.n	80038f0 <TIM_Base_SetConfig+0x48>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a40      	ldr	r2, [pc, #256]	; (80039e4 <TIM_Base_SetConfig+0x13c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d003      	beq.n	80038f0 <TIM_Base_SetConfig+0x48>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a3f      	ldr	r2, [pc, #252]	; (80039e8 <TIM_Base_SetConfig+0x140>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d108      	bne.n	8003902 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	4313      	orrs	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a33      	ldr	r2, [pc, #204]	; (80039d4 <TIM_Base_SetConfig+0x12c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d023      	beq.n	8003952 <TIM_Base_SetConfig+0xaa>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003910:	d01f      	beq.n	8003952 <TIM_Base_SetConfig+0xaa>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a30      	ldr	r2, [pc, #192]	; (80039d8 <TIM_Base_SetConfig+0x130>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d01b      	beq.n	8003952 <TIM_Base_SetConfig+0xaa>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a2f      	ldr	r2, [pc, #188]	; (80039dc <TIM_Base_SetConfig+0x134>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d017      	beq.n	8003952 <TIM_Base_SetConfig+0xaa>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a2e      	ldr	r2, [pc, #184]	; (80039e0 <TIM_Base_SetConfig+0x138>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d013      	beq.n	8003952 <TIM_Base_SetConfig+0xaa>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a2d      	ldr	r2, [pc, #180]	; (80039e4 <TIM_Base_SetConfig+0x13c>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d00f      	beq.n	8003952 <TIM_Base_SetConfig+0xaa>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a2d      	ldr	r2, [pc, #180]	; (80039ec <TIM_Base_SetConfig+0x144>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d00b      	beq.n	8003952 <TIM_Base_SetConfig+0xaa>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a2c      	ldr	r2, [pc, #176]	; (80039f0 <TIM_Base_SetConfig+0x148>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d007      	beq.n	8003952 <TIM_Base_SetConfig+0xaa>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a2b      	ldr	r2, [pc, #172]	; (80039f4 <TIM_Base_SetConfig+0x14c>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d003      	beq.n	8003952 <TIM_Base_SetConfig+0xaa>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a26      	ldr	r2, [pc, #152]	; (80039e8 <TIM_Base_SetConfig+0x140>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d108      	bne.n	8003964 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003958:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	4313      	orrs	r3, r2
 8003962:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	4313      	orrs	r3, r2
 8003970:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a12      	ldr	r2, [pc, #72]	; (80039d4 <TIM_Base_SetConfig+0x12c>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d013      	beq.n	80039b8 <TIM_Base_SetConfig+0x110>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a14      	ldr	r2, [pc, #80]	; (80039e4 <TIM_Base_SetConfig+0x13c>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d00f      	beq.n	80039b8 <TIM_Base_SetConfig+0x110>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a14      	ldr	r2, [pc, #80]	; (80039ec <TIM_Base_SetConfig+0x144>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d00b      	beq.n	80039b8 <TIM_Base_SetConfig+0x110>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a13      	ldr	r2, [pc, #76]	; (80039f0 <TIM_Base_SetConfig+0x148>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d007      	beq.n	80039b8 <TIM_Base_SetConfig+0x110>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a12      	ldr	r2, [pc, #72]	; (80039f4 <TIM_Base_SetConfig+0x14c>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d003      	beq.n	80039b8 <TIM_Base_SetConfig+0x110>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a0d      	ldr	r2, [pc, #52]	; (80039e8 <TIM_Base_SetConfig+0x140>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d103      	bne.n	80039c0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	691a      	ldr	r2, [r3, #16]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	615a      	str	r2, [r3, #20]
}
 80039c6:	bf00      	nop
 80039c8:	3714      	adds	r7, #20
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	40012c00 	.word	0x40012c00
 80039d8:	40000400 	.word	0x40000400
 80039dc:	40000800 	.word	0x40000800
 80039e0:	40000c00 	.word	0x40000c00
 80039e4:	40013400 	.word	0x40013400
 80039e8:	40015000 	.word	0x40015000
 80039ec:	40014000 	.word	0x40014000
 80039f0:	40014400 	.word	0x40014400
 80039f4:	40014800 	.word	0x40014800

080039f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b087      	sub	sp, #28
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	f023 0201 	bic.w	r2, r3, #1
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f023 0303 	bic.w	r3, r3, #3
 8003a32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	f023 0302 	bic.w	r3, r3, #2
 8003a44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a30      	ldr	r2, [pc, #192]	; (8003b14 <TIM_OC1_SetConfig+0x11c>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d013      	beq.n	8003a80 <TIM_OC1_SetConfig+0x88>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a2f      	ldr	r2, [pc, #188]	; (8003b18 <TIM_OC1_SetConfig+0x120>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d00f      	beq.n	8003a80 <TIM_OC1_SetConfig+0x88>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a2e      	ldr	r2, [pc, #184]	; (8003b1c <TIM_OC1_SetConfig+0x124>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d00b      	beq.n	8003a80 <TIM_OC1_SetConfig+0x88>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a2d      	ldr	r2, [pc, #180]	; (8003b20 <TIM_OC1_SetConfig+0x128>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d007      	beq.n	8003a80 <TIM_OC1_SetConfig+0x88>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a2c      	ldr	r2, [pc, #176]	; (8003b24 <TIM_OC1_SetConfig+0x12c>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d003      	beq.n	8003a80 <TIM_OC1_SetConfig+0x88>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a2b      	ldr	r2, [pc, #172]	; (8003b28 <TIM_OC1_SetConfig+0x130>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d10c      	bne.n	8003a9a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f023 0308 	bic.w	r3, r3, #8
 8003a86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f023 0304 	bic.w	r3, r3, #4
 8003a98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a1d      	ldr	r2, [pc, #116]	; (8003b14 <TIM_OC1_SetConfig+0x11c>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d013      	beq.n	8003aca <TIM_OC1_SetConfig+0xd2>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a1c      	ldr	r2, [pc, #112]	; (8003b18 <TIM_OC1_SetConfig+0x120>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d00f      	beq.n	8003aca <TIM_OC1_SetConfig+0xd2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a1b      	ldr	r2, [pc, #108]	; (8003b1c <TIM_OC1_SetConfig+0x124>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d00b      	beq.n	8003aca <TIM_OC1_SetConfig+0xd2>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a1a      	ldr	r2, [pc, #104]	; (8003b20 <TIM_OC1_SetConfig+0x128>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d007      	beq.n	8003aca <TIM_OC1_SetConfig+0xd2>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a19      	ldr	r2, [pc, #100]	; (8003b24 <TIM_OC1_SetConfig+0x12c>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d003      	beq.n	8003aca <TIM_OC1_SetConfig+0xd2>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a18      	ldr	r2, [pc, #96]	; (8003b28 <TIM_OC1_SetConfig+0x130>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d111      	bne.n	8003aee <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ad0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ad8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	621a      	str	r2, [r3, #32]
}
 8003b08:	bf00      	nop
 8003b0a:	371c      	adds	r7, #28
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr
 8003b14:	40012c00 	.word	0x40012c00
 8003b18:	40013400 	.word	0x40013400
 8003b1c:	40014000 	.word	0x40014000
 8003b20:	40014400 	.word	0x40014400
 8003b24:	40014800 	.word	0x40014800
 8003b28:	40015000 	.word	0x40015000

08003b2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b087      	sub	sp, #28
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	f023 0210 	bic.w	r2, r3, #16
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	021b      	lsls	r3, r3, #8
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	f023 0320 	bic.w	r3, r3, #32
 8003b7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	011b      	lsls	r3, r3, #4
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a2c      	ldr	r2, [pc, #176]	; (8003c3c <TIM_OC2_SetConfig+0x110>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d007      	beq.n	8003ba0 <TIM_OC2_SetConfig+0x74>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a2b      	ldr	r2, [pc, #172]	; (8003c40 <TIM_OC2_SetConfig+0x114>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d003      	beq.n	8003ba0 <TIM_OC2_SetConfig+0x74>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a2a      	ldr	r2, [pc, #168]	; (8003c44 <TIM_OC2_SetConfig+0x118>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d10d      	bne.n	8003bbc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ba6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	011b      	lsls	r3, r3, #4
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a1f      	ldr	r2, [pc, #124]	; (8003c3c <TIM_OC2_SetConfig+0x110>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d013      	beq.n	8003bec <TIM_OC2_SetConfig+0xc0>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a1e      	ldr	r2, [pc, #120]	; (8003c40 <TIM_OC2_SetConfig+0x114>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d00f      	beq.n	8003bec <TIM_OC2_SetConfig+0xc0>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a1e      	ldr	r2, [pc, #120]	; (8003c48 <TIM_OC2_SetConfig+0x11c>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d00b      	beq.n	8003bec <TIM_OC2_SetConfig+0xc0>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a1d      	ldr	r2, [pc, #116]	; (8003c4c <TIM_OC2_SetConfig+0x120>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d007      	beq.n	8003bec <TIM_OC2_SetConfig+0xc0>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a1c      	ldr	r2, [pc, #112]	; (8003c50 <TIM_OC2_SetConfig+0x124>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d003      	beq.n	8003bec <TIM_OC2_SetConfig+0xc0>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a17      	ldr	r2, [pc, #92]	; (8003c44 <TIM_OC2_SetConfig+0x118>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d113      	bne.n	8003c14 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bf2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bfa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	695b      	ldr	r3, [r3, #20]
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	621a      	str	r2, [r3, #32]
}
 8003c2e:	bf00      	nop
 8003c30:	371c      	adds	r7, #28
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	40012c00 	.word	0x40012c00
 8003c40:	40013400 	.word	0x40013400
 8003c44:	40015000 	.word	0x40015000
 8003c48:	40014000 	.word	0x40014000
 8003c4c:	40014400 	.word	0x40014400
 8003c50:	40014800 	.word	0x40014800

08003c54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b087      	sub	sp, #28
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	69db      	ldr	r3, [r3, #28]
 8003c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f023 0303 	bic.w	r3, r3, #3
 8003c8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ca0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	021b      	lsls	r3, r3, #8
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a2b      	ldr	r2, [pc, #172]	; (8003d60 <TIM_OC3_SetConfig+0x10c>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d007      	beq.n	8003cc6 <TIM_OC3_SetConfig+0x72>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a2a      	ldr	r2, [pc, #168]	; (8003d64 <TIM_OC3_SetConfig+0x110>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d003      	beq.n	8003cc6 <TIM_OC3_SetConfig+0x72>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a29      	ldr	r2, [pc, #164]	; (8003d68 <TIM_OC3_SetConfig+0x114>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d10d      	bne.n	8003ce2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ccc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	021b      	lsls	r3, r3, #8
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ce0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a1e      	ldr	r2, [pc, #120]	; (8003d60 <TIM_OC3_SetConfig+0x10c>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d013      	beq.n	8003d12 <TIM_OC3_SetConfig+0xbe>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a1d      	ldr	r2, [pc, #116]	; (8003d64 <TIM_OC3_SetConfig+0x110>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d00f      	beq.n	8003d12 <TIM_OC3_SetConfig+0xbe>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a1d      	ldr	r2, [pc, #116]	; (8003d6c <TIM_OC3_SetConfig+0x118>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d00b      	beq.n	8003d12 <TIM_OC3_SetConfig+0xbe>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a1c      	ldr	r2, [pc, #112]	; (8003d70 <TIM_OC3_SetConfig+0x11c>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d007      	beq.n	8003d12 <TIM_OC3_SetConfig+0xbe>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a1b      	ldr	r2, [pc, #108]	; (8003d74 <TIM_OC3_SetConfig+0x120>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d003      	beq.n	8003d12 <TIM_OC3_SetConfig+0xbe>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a16      	ldr	r2, [pc, #88]	; (8003d68 <TIM_OC3_SetConfig+0x114>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d113      	bne.n	8003d3a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	011b      	lsls	r3, r3, #4
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	011b      	lsls	r3, r3, #4
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	621a      	str	r2, [r3, #32]
}
 8003d54:	bf00      	nop
 8003d56:	371c      	adds	r7, #28
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	40012c00 	.word	0x40012c00
 8003d64:	40013400 	.word	0x40013400
 8003d68:	40015000 	.word	0x40015000
 8003d6c:	40014000 	.word	0x40014000
 8003d70:	40014400 	.word	0x40014400
 8003d74:	40014800 	.word	0x40014800

08003d78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b087      	sub	sp, #28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003da6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003db2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	021b      	lsls	r3, r3, #8
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	031b      	lsls	r3, r3, #12
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a2c      	ldr	r2, [pc, #176]	; (8003e88 <TIM_OC4_SetConfig+0x110>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d007      	beq.n	8003dec <TIM_OC4_SetConfig+0x74>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a2b      	ldr	r2, [pc, #172]	; (8003e8c <TIM_OC4_SetConfig+0x114>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d003      	beq.n	8003dec <TIM_OC4_SetConfig+0x74>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a2a      	ldr	r2, [pc, #168]	; (8003e90 <TIM_OC4_SetConfig+0x118>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d10d      	bne.n	8003e08 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003df2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	031b      	lsls	r3, r3, #12
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a1f      	ldr	r2, [pc, #124]	; (8003e88 <TIM_OC4_SetConfig+0x110>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d013      	beq.n	8003e38 <TIM_OC4_SetConfig+0xc0>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a1e      	ldr	r2, [pc, #120]	; (8003e8c <TIM_OC4_SetConfig+0x114>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d00f      	beq.n	8003e38 <TIM_OC4_SetConfig+0xc0>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a1e      	ldr	r2, [pc, #120]	; (8003e94 <TIM_OC4_SetConfig+0x11c>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d00b      	beq.n	8003e38 <TIM_OC4_SetConfig+0xc0>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a1d      	ldr	r2, [pc, #116]	; (8003e98 <TIM_OC4_SetConfig+0x120>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d007      	beq.n	8003e38 <TIM_OC4_SetConfig+0xc0>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a1c      	ldr	r2, [pc, #112]	; (8003e9c <TIM_OC4_SetConfig+0x124>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d003      	beq.n	8003e38 <TIM_OC4_SetConfig+0xc0>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a17      	ldr	r2, [pc, #92]	; (8003e90 <TIM_OC4_SetConfig+0x118>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d113      	bne.n	8003e60 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e3e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003e46:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	019b      	lsls	r3, r3, #6
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	019b      	lsls	r3, r3, #6
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	621a      	str	r2, [r3, #32]
}
 8003e7a:	bf00      	nop
 8003e7c:	371c      	adds	r7, #28
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	40012c00 	.word	0x40012c00
 8003e8c:	40013400 	.word	0x40013400
 8003e90:	40015000 	.word	0x40015000
 8003e94:	40014000 	.word	0x40014000
 8003e98:	40014400 	.word	0x40014400
 8003e9c:	40014800 	.word	0x40014800

08003ea0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b087      	sub	sp, #28
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a1b      	ldr	r3, [r3, #32]
 8003eae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ed2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003ee4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	041b      	lsls	r3, r3, #16
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a19      	ldr	r2, [pc, #100]	; (8003f5c <TIM_OC5_SetConfig+0xbc>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d013      	beq.n	8003f22 <TIM_OC5_SetConfig+0x82>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a18      	ldr	r2, [pc, #96]	; (8003f60 <TIM_OC5_SetConfig+0xc0>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d00f      	beq.n	8003f22 <TIM_OC5_SetConfig+0x82>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a17      	ldr	r2, [pc, #92]	; (8003f64 <TIM_OC5_SetConfig+0xc4>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d00b      	beq.n	8003f22 <TIM_OC5_SetConfig+0x82>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a16      	ldr	r2, [pc, #88]	; (8003f68 <TIM_OC5_SetConfig+0xc8>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d007      	beq.n	8003f22 <TIM_OC5_SetConfig+0x82>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a15      	ldr	r2, [pc, #84]	; (8003f6c <TIM_OC5_SetConfig+0xcc>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d003      	beq.n	8003f22 <TIM_OC5_SetConfig+0x82>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a14      	ldr	r2, [pc, #80]	; (8003f70 <TIM_OC5_SetConfig+0xd0>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d109      	bne.n	8003f36 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f28:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	021b      	lsls	r3, r3, #8
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	685a      	ldr	r2, [r3, #4]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	621a      	str	r2, [r3, #32]
}
 8003f50:	bf00      	nop
 8003f52:	371c      	adds	r7, #28
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr
 8003f5c:	40012c00 	.word	0x40012c00
 8003f60:	40013400 	.word	0x40013400
 8003f64:	40014000 	.word	0x40014000
 8003f68:	40014400 	.word	0x40014400
 8003f6c:	40014800 	.word	0x40014800
 8003f70:	40015000 	.word	0x40015000

08003f74 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b087      	sub	sp, #28
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	021b      	lsls	r3, r3, #8
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003fba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	051b      	lsls	r3, r3, #20
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a1a      	ldr	r2, [pc, #104]	; (8004034 <TIM_OC6_SetConfig+0xc0>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d013      	beq.n	8003ff8 <TIM_OC6_SetConfig+0x84>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a19      	ldr	r2, [pc, #100]	; (8004038 <TIM_OC6_SetConfig+0xc4>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d00f      	beq.n	8003ff8 <TIM_OC6_SetConfig+0x84>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a18      	ldr	r2, [pc, #96]	; (800403c <TIM_OC6_SetConfig+0xc8>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d00b      	beq.n	8003ff8 <TIM_OC6_SetConfig+0x84>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a17      	ldr	r2, [pc, #92]	; (8004040 <TIM_OC6_SetConfig+0xcc>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d007      	beq.n	8003ff8 <TIM_OC6_SetConfig+0x84>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a16      	ldr	r2, [pc, #88]	; (8004044 <TIM_OC6_SetConfig+0xd0>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d003      	beq.n	8003ff8 <TIM_OC6_SetConfig+0x84>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a15      	ldr	r2, [pc, #84]	; (8004048 <TIM_OC6_SetConfig+0xd4>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d109      	bne.n	800400c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ffe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	029b      	lsls	r3, r3, #10
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	4313      	orrs	r3, r2
 800400a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685a      	ldr	r2, [r3, #4]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	621a      	str	r2, [r3, #32]
}
 8004026:	bf00      	nop
 8004028:	371c      	adds	r7, #28
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	40012c00 	.word	0x40012c00
 8004038:	40013400 	.word	0x40013400
 800403c:	40014000 	.word	0x40014000
 8004040:	40014400 	.word	0x40014400
 8004044:	40014800 	.word	0x40014800
 8004048:	40015000 	.word	0x40015000

0800404c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800404c:	b480      	push	{r7}
 800404e:	b087      	sub	sp, #28
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	f023 0201 	bic.w	r2, r3, #1
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004076:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	011b      	lsls	r3, r3, #4
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	4313      	orrs	r3, r2
 8004080:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	f023 030a 	bic.w	r3, r3, #10
 8004088:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	4313      	orrs	r3, r2
 8004090:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	621a      	str	r2, [r3, #32]
}
 800409e:	bf00      	nop
 80040a0:	371c      	adds	r7, #28
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr

080040aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040aa:	b480      	push	{r7}
 80040ac:	b087      	sub	sp, #28
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	60f8      	str	r0, [r7, #12]
 80040b2:	60b9      	str	r1, [r7, #8]
 80040b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	f023 0210 	bic.w	r2, r3, #16
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	031b      	lsls	r3, r3, #12
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	4313      	orrs	r3, r2
 80040de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	011b      	lsls	r3, r3, #4
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	621a      	str	r2, [r3, #32]
}
 80040fe:	bf00      	nop
 8004100:	371c      	adds	r7, #28
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr

0800410a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800410a:	b480      	push	{r7}
 800410c:	b085      	sub	sp, #20
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
 8004112:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004124:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4313      	orrs	r3, r2
 800412c:	f043 0307 	orr.w	r3, r3, #7
 8004130:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	609a      	str	r2, [r3, #8]
}
 8004138:	bf00      	nop
 800413a:	3714      	adds	r7, #20
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004144:	b480      	push	{r7}
 8004146:	b087      	sub	sp, #28
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
 8004150:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800415e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	021a      	lsls	r2, r3, #8
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	431a      	orrs	r2, r3
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	4313      	orrs	r3, r2
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	4313      	orrs	r3, r2
 8004170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	609a      	str	r2, [r3, #8]
}
 8004178:	bf00      	nop
 800417a:	371c      	adds	r7, #28
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004184:	b480      	push	{r7}
 8004186:	b087      	sub	sp, #28
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	f003 031f 	and.w	r3, r3, #31
 8004196:	2201      	movs	r2, #1
 8004198:	fa02 f303 	lsl.w	r3, r2, r3
 800419c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6a1a      	ldr	r2, [r3, #32]
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	43db      	mvns	r3, r3
 80041a6:	401a      	ands	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6a1a      	ldr	r2, [r3, #32]
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	f003 031f 	and.w	r3, r3, #31
 80041b6:	6879      	ldr	r1, [r7, #4]
 80041b8:	fa01 f303 	lsl.w	r3, r1, r3
 80041bc:	431a      	orrs	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	621a      	str	r2, [r3, #32]
}
 80041c2:	bf00      	nop
 80041c4:	371c      	adds	r7, #28
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
	...

080041d0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d109      	bne.n	80041f4 <HAL_TIMEx_PWMN_Start+0x24>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	bf14      	ite	ne
 80041ec:	2301      	movne	r3, #1
 80041ee:	2300      	moveq	r3, #0
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	e022      	b.n	800423a <HAL_TIMEx_PWMN_Start+0x6a>
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	2b04      	cmp	r3, #4
 80041f8:	d109      	bne.n	800420e <HAL_TIMEx_PWMN_Start+0x3e>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b01      	cmp	r3, #1
 8004204:	bf14      	ite	ne
 8004206:	2301      	movne	r3, #1
 8004208:	2300      	moveq	r3, #0
 800420a:	b2db      	uxtb	r3, r3
 800420c:	e015      	b.n	800423a <HAL_TIMEx_PWMN_Start+0x6a>
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	2b08      	cmp	r3, #8
 8004212:	d109      	bne.n	8004228 <HAL_TIMEx_PWMN_Start+0x58>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b01      	cmp	r3, #1
 800421e:	bf14      	ite	ne
 8004220:	2301      	movne	r3, #1
 8004222:	2300      	moveq	r3, #0
 8004224:	b2db      	uxtb	r3, r3
 8004226:	e008      	b.n	800423a <HAL_TIMEx_PWMN_Start+0x6a>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b01      	cmp	r3, #1
 8004232:	bf14      	ite	ne
 8004234:	2301      	movne	r3, #1
 8004236:	2300      	moveq	r3, #0
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e073      	b.n	800432a <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d104      	bne.n	8004252 <HAL_TIMEx_PWMN_Start+0x82>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2202      	movs	r2, #2
 800424c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004250:	e013      	b.n	800427a <HAL_TIMEx_PWMN_Start+0xaa>
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	2b04      	cmp	r3, #4
 8004256:	d104      	bne.n	8004262 <HAL_TIMEx_PWMN_Start+0x92>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2202      	movs	r2, #2
 800425c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004260:	e00b      	b.n	800427a <HAL_TIMEx_PWMN_Start+0xaa>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b08      	cmp	r3, #8
 8004266:	d104      	bne.n	8004272 <HAL_TIMEx_PWMN_Start+0xa2>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2202      	movs	r2, #2
 800426c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004270:	e003      	b.n	800427a <HAL_TIMEx_PWMN_Start+0xaa>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2202      	movs	r2, #2
 8004276:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2204      	movs	r2, #4
 8004280:	6839      	ldr	r1, [r7, #0]
 8004282:	4618      	mov	r0, r3
 8004284:	f000 f9f4 	bl	8004670 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004296:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a25      	ldr	r2, [pc, #148]	; (8004334 <HAL_TIMEx_PWMN_Start+0x164>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d022      	beq.n	80042e8 <HAL_TIMEx_PWMN_Start+0x118>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042aa:	d01d      	beq.n	80042e8 <HAL_TIMEx_PWMN_Start+0x118>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a21      	ldr	r2, [pc, #132]	; (8004338 <HAL_TIMEx_PWMN_Start+0x168>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d018      	beq.n	80042e8 <HAL_TIMEx_PWMN_Start+0x118>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a20      	ldr	r2, [pc, #128]	; (800433c <HAL_TIMEx_PWMN_Start+0x16c>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d013      	beq.n	80042e8 <HAL_TIMEx_PWMN_Start+0x118>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a1e      	ldr	r2, [pc, #120]	; (8004340 <HAL_TIMEx_PWMN_Start+0x170>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d00e      	beq.n	80042e8 <HAL_TIMEx_PWMN_Start+0x118>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a1d      	ldr	r2, [pc, #116]	; (8004344 <HAL_TIMEx_PWMN_Start+0x174>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d009      	beq.n	80042e8 <HAL_TIMEx_PWMN_Start+0x118>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a1b      	ldr	r2, [pc, #108]	; (8004348 <HAL_TIMEx_PWMN_Start+0x178>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d004      	beq.n	80042e8 <HAL_TIMEx_PWMN_Start+0x118>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a1a      	ldr	r2, [pc, #104]	; (800434c <HAL_TIMEx_PWMN_Start+0x17c>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d115      	bne.n	8004314 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689a      	ldr	r2, [r3, #8]
 80042ee:	4b18      	ldr	r3, [pc, #96]	; (8004350 <HAL_TIMEx_PWMN_Start+0x180>)
 80042f0:	4013      	ands	r3, r2
 80042f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2b06      	cmp	r3, #6
 80042f8:	d015      	beq.n	8004326 <HAL_TIMEx_PWMN_Start+0x156>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004300:	d011      	beq.n	8004326 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f042 0201 	orr.w	r2, r2, #1
 8004310:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004312:	e008      	b.n	8004326 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0201 	orr.w	r2, r2, #1
 8004322:	601a      	str	r2, [r3, #0]
 8004324:	e000      	b.n	8004328 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004326:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	40012c00 	.word	0x40012c00
 8004338:	40000400 	.word	0x40000400
 800433c:	40000800 	.word	0x40000800
 8004340:	40000c00 	.word	0x40000c00
 8004344:	40013400 	.word	0x40013400
 8004348:	40014000 	.word	0x40014000
 800434c:	40015000 	.word	0x40015000
 8004350:	00010007 	.word	0x00010007

08004354 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004364:	2b01      	cmp	r3, #1
 8004366:	d101      	bne.n	800436c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004368:	2302      	movs	r3, #2
 800436a:	e074      	b.n	8004456 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2202      	movs	r2, #2
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a34      	ldr	r2, [pc, #208]	; (8004464 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d009      	beq.n	80043aa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a33      	ldr	r2, [pc, #204]	; (8004468 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d004      	beq.n	80043aa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a31      	ldr	r2, [pc, #196]	; (800446c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d108      	bne.n	80043bc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80043b0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80043c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a21      	ldr	r2, [pc, #132]	; (8004464 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d022      	beq.n	800442a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ec:	d01d      	beq.n	800442a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a1f      	ldr	r2, [pc, #124]	; (8004470 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d018      	beq.n	800442a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a1d      	ldr	r2, [pc, #116]	; (8004474 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d013      	beq.n	800442a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a1c      	ldr	r2, [pc, #112]	; (8004478 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d00e      	beq.n	800442a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a15      	ldr	r2, [pc, #84]	; (8004468 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d009      	beq.n	800442a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a18      	ldr	r2, [pc, #96]	; (800447c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d004      	beq.n	800442a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a11      	ldr	r2, [pc, #68]	; (800446c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d10c      	bne.n	8004444 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004430:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	4313      	orrs	r3, r2
 800443a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68ba      	ldr	r2, [r7, #8]
 8004442:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	40012c00 	.word	0x40012c00
 8004468:	40013400 	.word	0x40013400
 800446c:	40015000 	.word	0x40015000
 8004470:	40000400 	.word	0x40000400
 8004474:	40000800 	.word	0x40000800
 8004478:	40000c00 	.word	0x40000c00
 800447c:	40014000 	.word	0x40014000

08004480 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800448a:	2300      	movs	r3, #0
 800448c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004494:	2b01      	cmp	r3, #1
 8004496:	d101      	bne.n	800449c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004498:	2302      	movs	r3, #2
 800449a:	e096      	b.n	80045ca <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	4313      	orrs	r3, r2
 80044be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4313      	orrs	r3, r2
 80044da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004502:	4313      	orrs	r3, r2
 8004504:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	041b      	lsls	r3, r3, #16
 8004512:	4313      	orrs	r3, r2
 8004514:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a2f      	ldr	r2, [pc, #188]	; (80045d8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d009      	beq.n	8004534 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a2d      	ldr	r2, [pc, #180]	; (80045dc <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d004      	beq.n	8004534 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a2c      	ldr	r2, [pc, #176]	; (80045e0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d106      	bne.n	8004542 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	69db      	ldr	r3, [r3, #28]
 800453e:	4313      	orrs	r3, r2
 8004540:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a24      	ldr	r2, [pc, #144]	; (80045d8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d009      	beq.n	8004560 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a22      	ldr	r2, [pc, #136]	; (80045dc <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d004      	beq.n	8004560 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a21      	ldr	r2, [pc, #132]	; (80045e0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d12b      	bne.n	80045b8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800456a:	051b      	lsls	r3, r3, #20
 800456c:	4313      	orrs	r3, r2
 800456e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	4313      	orrs	r3, r2
 800457c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004588:	4313      	orrs	r3, r2
 800458a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a11      	ldr	r2, [pc, #68]	; (80045d8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d009      	beq.n	80045aa <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a10      	ldr	r2, [pc, #64]	; (80045dc <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d004      	beq.n	80045aa <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a0e      	ldr	r2, [pc, #56]	; (80045e0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d106      	bne.n	80045b8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b4:	4313      	orrs	r3, r2
 80045b6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3714      	adds	r7, #20
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	40012c00 	.word	0x40012c00
 80045dc:	40013400 	.word	0x40013400
 80045e0:	40015000 	.word	0x40015000

080045e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004670:	b480      	push	{r7}
 8004672:	b087      	sub	sp, #28
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	f003 031f 	and.w	r3, r3, #31
 8004682:	2204      	movs	r2, #4
 8004684:	fa02 f303 	lsl.w	r3, r2, r3
 8004688:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6a1a      	ldr	r2, [r3, #32]
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	43db      	mvns	r3, r3
 8004692:	401a      	ands	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6a1a      	ldr	r2, [r3, #32]
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	f003 031f 	and.w	r3, r3, #31
 80046a2:	6879      	ldr	r1, [r7, #4]
 80046a4:	fa01 f303 	lsl.w	r3, r1, r3
 80046a8:	431a      	orrs	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	621a      	str	r2, [r3, #32]
}
 80046ae:	bf00      	nop
 80046b0:	371c      	adds	r7, #28
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr

080046ba <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b082      	sub	sp, #8
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e042      	b.n	8004752 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d106      	bne.n	80046e4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f7fc fe16 	bl	8001310 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2224      	movs	r2, #36	; 0x24
 80046e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 0201 	bic.w	r2, r2, #1
 80046fa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 fc51 	bl	8004fa4 <UART_SetConfig>
 8004702:	4603      	mov	r3, r0
 8004704:	2b01      	cmp	r3, #1
 8004706:	d101      	bne.n	800470c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e022      	b.n	8004752 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004710:	2b00      	cmp	r3, #0
 8004712:	d002      	beq.n	800471a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 ff41 	bl	800559c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004728:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	689a      	ldr	r2, [r3, #8]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004738:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f042 0201 	orr.w	r2, r2, #1
 8004748:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 ffc8 	bl	80056e0 <UART_CheckIdleState>
 8004750:	4603      	mov	r3, r0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3708      	adds	r7, #8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b08a      	sub	sp, #40	; 0x28
 800475e:	af02      	add	r7, sp, #8
 8004760:	60f8      	str	r0, [r7, #12]
 8004762:	60b9      	str	r1, [r7, #8]
 8004764:	603b      	str	r3, [r7, #0]
 8004766:	4613      	mov	r3, r2
 8004768:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004770:	2b20      	cmp	r3, #32
 8004772:	f040 8083 	bne.w	800487c <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d002      	beq.n	8004782 <HAL_UART_Transmit+0x28>
 800477c:	88fb      	ldrh	r3, [r7, #6]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d101      	bne.n	8004786 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e07b      	b.n	800487e <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800478c:	2b01      	cmp	r3, #1
 800478e:	d101      	bne.n	8004794 <HAL_UART_Transmit+0x3a>
 8004790:	2302      	movs	r3, #2
 8004792:	e074      	b.n	800487e <HAL_UART_Transmit+0x124>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2221      	movs	r2, #33	; 0x21
 80047a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047ac:	f7fc fe64 	bl	8001478 <HAL_GetTick>
 80047b0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	88fa      	ldrh	r2, [r7, #6]
 80047b6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	88fa      	ldrh	r2, [r7, #6]
 80047be:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ca:	d108      	bne.n	80047de <HAL_UART_Transmit+0x84>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d104      	bne.n	80047de <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80047d4:	2300      	movs	r3, #0
 80047d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	61bb      	str	r3, [r7, #24]
 80047dc:	e003      	b.n	80047e6 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047e2:	2300      	movs	r3, #0
 80047e4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80047ee:	e02c      	b.n	800484a <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	9300      	str	r3, [sp, #0]
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	2200      	movs	r2, #0
 80047f8:	2180      	movs	r1, #128	; 0x80
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 ffbb 	bl	8005776 <UART_WaitOnFlagUntilTimeout>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d001      	beq.n	800480a <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e039      	b.n	800487e <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10b      	bne.n	8004828 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	881b      	ldrh	r3, [r3, #0]
 8004814:	461a      	mov	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800481e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	3302      	adds	r3, #2
 8004824:	61bb      	str	r3, [r7, #24]
 8004826:	e007      	b.n	8004838 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	781a      	ldrb	r2, [r3, #0]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	3301      	adds	r3, #1
 8004836:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800483e:	b29b      	uxth	r3, r3
 8004840:	3b01      	subs	r3, #1
 8004842:	b29a      	uxth	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004850:	b29b      	uxth	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1cc      	bne.n	80047f0 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	9300      	str	r3, [sp, #0]
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2200      	movs	r2, #0
 800485e:	2140      	movs	r1, #64	; 0x40
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f000 ff88 	bl	8005776 <UART_WaitOnFlagUntilTimeout>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d001      	beq.n	8004870 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e006      	b.n	800487e <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2220      	movs	r2, #32
 8004874:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004878:	2300      	movs	r3, #0
 800487a:	e000      	b.n	800487e <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800487c:	2302      	movs	r3, #2
  }
}
 800487e:	4618      	mov	r0, r3
 8004880:	3720      	adds	r7, #32
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
	...

08004888 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b08a      	sub	sp, #40	; 0x28
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	4613      	mov	r3, r2
 8004894:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800489c:	2b20      	cmp	r3, #32
 800489e:	d142      	bne.n	8004926 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d002      	beq.n	80048ac <HAL_UART_Receive_IT+0x24>
 80048a6:	88fb      	ldrh	r3, [r7, #6]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d101      	bne.n	80048b0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e03b      	b.n	8004928 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d101      	bne.n	80048be <HAL_UART_Receive_IT+0x36>
 80048ba:	2302      	movs	r3, #2
 80048bc:	e034      	b.n	8004928 <HAL_UART_Receive_IT+0xa0>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2201      	movs	r2, #1
 80048c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a17      	ldr	r2, [pc, #92]	; (8004930 <HAL_UART_Receive_IT+0xa8>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d01f      	beq.n	8004916 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d018      	beq.n	8004916 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	e853 3f00 	ldrex	r3, [r3]
 80048f0:	613b      	str	r3, [r7, #16]
   return(result);
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048f8:	627b      	str	r3, [r7, #36]	; 0x24
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	461a      	mov	r2, r3
 8004900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004902:	623b      	str	r3, [r7, #32]
 8004904:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004906:	69f9      	ldr	r1, [r7, #28]
 8004908:	6a3a      	ldr	r2, [r7, #32]
 800490a:	e841 2300 	strex	r3, r2, [r1]
 800490e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1e6      	bne.n	80048e4 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004916:	88fb      	ldrh	r3, [r7, #6]
 8004918:	461a      	mov	r2, r3
 800491a:	68b9      	ldr	r1, [r7, #8]
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	f000 fff3 	bl	8005908 <UART_Start_Receive_IT>
 8004922:	4603      	mov	r3, r0
 8004924:	e000      	b.n	8004928 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004926:	2302      	movs	r3, #2
  }
}
 8004928:	4618      	mov	r0, r3
 800492a:	3728      	adds	r7, #40	; 0x28
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	40008000 	.word	0x40008000

08004934 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b0ba      	sub	sp, #232	; 0xe8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	69db      	ldr	r3, [r3, #28]
 8004942:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800495a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800495e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004962:	4013      	ands	r3, r2
 8004964:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004968:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800496c:	2b00      	cmp	r3, #0
 800496e:	d11b      	bne.n	80049a8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004974:	f003 0320 	and.w	r3, r3, #32
 8004978:	2b00      	cmp	r3, #0
 800497a:	d015      	beq.n	80049a8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800497c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004980:	f003 0320 	and.w	r3, r3, #32
 8004984:	2b00      	cmp	r3, #0
 8004986:	d105      	bne.n	8004994 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004988:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800498c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d009      	beq.n	80049a8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004998:	2b00      	cmp	r3, #0
 800499a:	f000 82d6 	beq.w	8004f4a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	4798      	blx	r3
      }
      return;
 80049a6:	e2d0      	b.n	8004f4a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80049a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f000 811f 	beq.w	8004bf0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80049b2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80049b6:	4b8b      	ldr	r3, [pc, #556]	; (8004be4 <HAL_UART_IRQHandler+0x2b0>)
 80049b8:	4013      	ands	r3, r2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d106      	bne.n	80049cc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80049be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80049c2:	4b89      	ldr	r3, [pc, #548]	; (8004be8 <HAL_UART_IRQHandler+0x2b4>)
 80049c4:	4013      	ands	r3, r2
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	f000 8112 	beq.w	8004bf0 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80049cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d011      	beq.n	80049fc <HAL_UART_IRQHandler+0xc8>
 80049d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00b      	beq.n	80049fc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2201      	movs	r2, #1
 80049ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049f2:	f043 0201 	orr.w	r2, r3, #1
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a00:	f003 0302 	and.w	r3, r3, #2
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d011      	beq.n	8004a2c <HAL_UART_IRQHandler+0xf8>
 8004a08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a0c:	f003 0301 	and.w	r3, r3, #1
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00b      	beq.n	8004a2c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2202      	movs	r2, #2
 8004a1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a22:	f043 0204 	orr.w	r2, r3, #4
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a30:	f003 0304 	and.w	r3, r3, #4
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d011      	beq.n	8004a5c <HAL_UART_IRQHandler+0x128>
 8004a38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a3c:	f003 0301 	and.w	r3, r3, #1
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00b      	beq.n	8004a5c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2204      	movs	r2, #4
 8004a4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a52:	f043 0202 	orr.w	r2, r3, #2
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a60:	f003 0308 	and.w	r3, r3, #8
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d017      	beq.n	8004a98 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a6c:	f003 0320 	and.w	r3, r3, #32
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d105      	bne.n	8004a80 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004a74:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004a78:	4b5a      	ldr	r3, [pc, #360]	; (8004be4 <HAL_UART_IRQHandler+0x2b0>)
 8004a7a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00b      	beq.n	8004a98 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2208      	movs	r2, #8
 8004a86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a8e:	f043 0208 	orr.w	r2, r3, #8
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d012      	beq.n	8004aca <HAL_UART_IRQHandler+0x196>
 8004aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aa8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00c      	beq.n	8004aca <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ab8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ac0:	f043 0220 	orr.w	r2, r3, #32
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f000 823c 	beq.w	8004f4e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ada:	f003 0320 	and.w	r3, r3, #32
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d013      	beq.n	8004b0a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004ae2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ae6:	f003 0320 	and.w	r3, r3, #32
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d105      	bne.n	8004afa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004aee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d007      	beq.n	8004b0a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b10:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b1e:	2b40      	cmp	r3, #64	; 0x40
 8004b20:	d005      	beq.n	8004b2e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004b22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b26:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d04f      	beq.n	8004bce <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f001 f814 	bl	8005b5c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b3e:	2b40      	cmp	r3, #64	; 0x40
 8004b40:	d141      	bne.n	8004bc6 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	3308      	adds	r3, #8
 8004b48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b50:	e853 3f00 	ldrex	r3, [r3]
 8004b54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004b58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	3308      	adds	r3, #8
 8004b6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004b6e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004b72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004b7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004b7e:	e841 2300 	strex	r3, r2, [r1]
 8004b82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004b86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1d9      	bne.n	8004b42 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d013      	beq.n	8004bbe <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b9a:	4a14      	ldr	r2, [pc, #80]	; (8004bec <HAL_UART_IRQHandler+0x2b8>)
 8004b9c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7fc fdcf 	bl	8001746 <HAL_DMA_Abort_IT>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d017      	beq.n	8004bde <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004bb8:	4610      	mov	r0, r2
 8004bba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bbc:	e00f      	b.n	8004bde <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f9da 	bl	8004f78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bc4:	e00b      	b.n	8004bde <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f9d6 	bl	8004f78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bcc:	e007      	b.n	8004bde <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f9d2 	bl	8004f78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004bdc:	e1b7      	b.n	8004f4e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bde:	bf00      	nop
    return;
 8004be0:	e1b5      	b.n	8004f4e <HAL_UART_IRQHandler+0x61a>
 8004be2:	bf00      	nop
 8004be4:	10000001 	.word	0x10000001
 8004be8:	04000120 	.word	0x04000120
 8004bec:	08005c29 	.word	0x08005c29

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	f040 814a 	bne.w	8004e8e <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bfe:	f003 0310 	and.w	r3, r3, #16
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f000 8143 	beq.w	8004e8e <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004c08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c0c:	f003 0310 	and.w	r3, r3, #16
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f000 813c 	beq.w	8004e8e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2210      	movs	r2, #16
 8004c1c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c28:	2b40      	cmp	r3, #64	; 0x40
 8004c2a:	f040 80b5 	bne.w	8004d98 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c3a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	f000 8187 	beq.w	8004f52 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004c4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	f080 817f 	bcs.w	8004f52 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c5a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0320 	and.w	r3, r3, #32
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f040 8086 	bne.w	8004d7c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c7c:	e853 3f00 	ldrex	r3, [r3]
 8004c80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004c84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	461a      	mov	r2, r3
 8004c96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004c9e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004ca6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004caa:	e841 2300 	strex	r3, r2, [r1]
 8004cae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004cb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d1da      	bne.n	8004c70 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	3308      	adds	r3, #8
 8004cc0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cc4:	e853 3f00 	ldrex	r3, [r3]
 8004cc8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004cca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ccc:	f023 0301 	bic.w	r3, r3, #1
 8004cd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	3308      	adds	r3, #8
 8004cda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004cde:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004ce2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004ce6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004cea:	e841 2300 	strex	r3, r2, [r1]
 8004cee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004cf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1e1      	bne.n	8004cba <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	3308      	adds	r3, #8
 8004cfc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d00:	e853 3f00 	ldrex	r3, [r3]
 8004d04:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	3308      	adds	r3, #8
 8004d16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d22:	e841 2300 	strex	r3, r2, [r1]
 8004d26:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1e3      	bne.n	8004cf6 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2220      	movs	r2, #32
 8004d32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d44:	e853 3f00 	ldrex	r3, [r3]
 8004d48:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d4c:	f023 0310 	bic.w	r3, r3, #16
 8004d50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	461a      	mov	r2, r3
 8004d5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d5e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d60:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d62:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d66:	e841 2300 	strex	r3, r2, [r1]
 8004d6a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1e4      	bne.n	8004d3c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7fc fc8c 	bl	8001694 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	4619      	mov	r1, r3
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 f8fb 	bl	8004f8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d96:	e0dc      	b.n	8004f52 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f000 80ce 	beq.w	8004f56 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8004dba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f000 80c9 	beq.w	8004f56 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dcc:	e853 3f00 	ldrex	r3, [r3]
 8004dd0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004dd8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	461a      	mov	r2, r3
 8004de2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004de6:	647b      	str	r3, [r7, #68]	; 0x44
 8004de8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004dec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dee:	e841 2300 	strex	r3, r2, [r1]
 8004df2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1e4      	bne.n	8004dc4 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	3308      	adds	r3, #8
 8004e00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e04:	e853 3f00 	ldrex	r3, [r3]
 8004e08:	623b      	str	r3, [r7, #32]
   return(result);
 8004e0a:	6a3b      	ldr	r3, [r7, #32]
 8004e0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e10:	f023 0301 	bic.w	r3, r3, #1
 8004e14:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	3308      	adds	r3, #8
 8004e1e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e22:	633a      	str	r2, [r7, #48]	; 0x30
 8004e24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e2a:	e841 2300 	strex	r3, r2, [r1]
 8004e2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1e1      	bne.n	8004dfa <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2220      	movs	r2, #32
 8004e3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	e853 3f00 	ldrex	r3, [r3]
 8004e56:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f023 0310 	bic.w	r3, r3, #16
 8004e5e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	461a      	mov	r2, r3
 8004e68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004e6c:	61fb      	str	r3, [r7, #28]
 8004e6e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e70:	69b9      	ldr	r1, [r7, #24]
 8004e72:	69fa      	ldr	r2, [r7, #28]
 8004e74:	e841 2300 	strex	r3, r2, [r1]
 8004e78:	617b      	str	r3, [r7, #20]
   return(result);
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1e4      	bne.n	8004e4a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e84:	4619      	mov	r1, r3
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 f880 	bl	8004f8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e8c:	e063      	b.n	8004f56 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00e      	beq.n	8004eb8 <HAL_UART_IRQHandler+0x584>
 8004e9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d008      	beq.n	8004eb8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004eae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f001 fb57 	bl	8006564 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004eb6:	e051      	b.n	8004f5c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d014      	beq.n	8004eee <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d105      	bne.n	8004edc <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004ed0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ed4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d008      	beq.n	8004eee <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d03a      	beq.n	8004f5a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	4798      	blx	r3
    }
    return;
 8004eec:	e035      	b.n	8004f5a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d009      	beq.n	8004f0e <HAL_UART_IRQHandler+0x5da>
 8004efa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d003      	beq.n	8004f0e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 fea4 	bl	8005c54 <UART_EndTransmit_IT>
    return;
 8004f0c:	e026      	b.n	8004f5c <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d009      	beq.n	8004f2e <HAL_UART_IRQHandler+0x5fa>
 8004f1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f1e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d003      	beq.n	8004f2e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f001 fb30 	bl	800658c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f2c:	e016      	b.n	8004f5c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d010      	beq.n	8004f5c <HAL_UART_IRQHandler+0x628>
 8004f3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	da0c      	bge.n	8004f5c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f001 fb18 	bl	8006578 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f48:	e008      	b.n	8004f5c <HAL_UART_IRQHandler+0x628>
      return;
 8004f4a:	bf00      	nop
 8004f4c:	e006      	b.n	8004f5c <HAL_UART_IRQHandler+0x628>
    return;
 8004f4e:	bf00      	nop
 8004f50:	e004      	b.n	8004f5c <HAL_UART_IRQHandler+0x628>
      return;
 8004f52:	bf00      	nop
 8004f54:	e002      	b.n	8004f5c <HAL_UART_IRQHandler+0x628>
      return;
 8004f56:	bf00      	nop
 8004f58:	e000      	b.n	8004f5c <HAL_UART_IRQHandler+0x628>
    return;
 8004f5a:	bf00      	nop
  }
}
 8004f5c:	37e8      	adds	r7, #232	; 0xe8
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop

08004f64 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	460b      	mov	r3, r1
 8004f96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fa8:	b08c      	sub	sp, #48	; 0x30
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	689a      	ldr	r2, [r3, #8]
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	431a      	orrs	r2, r3
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	69db      	ldr	r3, [r3, #28]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	4baa      	ldr	r3, [pc, #680]	; (800527c <UART_SetConfig+0x2d8>)
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	6812      	ldr	r2, [r2, #0]
 8004fda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fdc:	430b      	orrs	r3, r1
 8004fde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	68da      	ldr	r2, [r3, #12]
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a9f      	ldr	r2, [pc, #636]	; (8005280 <UART_SetConfig+0x2dc>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d004      	beq.n	8005010 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800500c:	4313      	orrs	r3, r2
 800500e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800501a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	6812      	ldr	r2, [r2, #0]
 8005022:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005024:	430b      	orrs	r3, r1
 8005026:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502e:	f023 010f 	bic.w	r1, r3, #15
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	430a      	orrs	r2, r1
 800503c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a90      	ldr	r2, [pc, #576]	; (8005284 <UART_SetConfig+0x2e0>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d125      	bne.n	8005094 <UART_SetConfig+0xf0>
 8005048:	4b8f      	ldr	r3, [pc, #572]	; (8005288 <UART_SetConfig+0x2e4>)
 800504a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800504e:	f003 0303 	and.w	r3, r3, #3
 8005052:	2b03      	cmp	r3, #3
 8005054:	d81a      	bhi.n	800508c <UART_SetConfig+0xe8>
 8005056:	a201      	add	r2, pc, #4	; (adr r2, 800505c <UART_SetConfig+0xb8>)
 8005058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800505c:	0800506d 	.word	0x0800506d
 8005060:	0800507d 	.word	0x0800507d
 8005064:	08005075 	.word	0x08005075
 8005068:	08005085 	.word	0x08005085
 800506c:	2301      	movs	r3, #1
 800506e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005072:	e116      	b.n	80052a2 <UART_SetConfig+0x2fe>
 8005074:	2302      	movs	r3, #2
 8005076:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800507a:	e112      	b.n	80052a2 <UART_SetConfig+0x2fe>
 800507c:	2304      	movs	r3, #4
 800507e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005082:	e10e      	b.n	80052a2 <UART_SetConfig+0x2fe>
 8005084:	2308      	movs	r3, #8
 8005086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800508a:	e10a      	b.n	80052a2 <UART_SetConfig+0x2fe>
 800508c:	2310      	movs	r3, #16
 800508e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005092:	e106      	b.n	80052a2 <UART_SetConfig+0x2fe>
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a7c      	ldr	r2, [pc, #496]	; (800528c <UART_SetConfig+0x2e8>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d138      	bne.n	8005110 <UART_SetConfig+0x16c>
 800509e:	4b7a      	ldr	r3, [pc, #488]	; (8005288 <UART_SetConfig+0x2e4>)
 80050a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a4:	f003 030c 	and.w	r3, r3, #12
 80050a8:	2b0c      	cmp	r3, #12
 80050aa:	d82d      	bhi.n	8005108 <UART_SetConfig+0x164>
 80050ac:	a201      	add	r2, pc, #4	; (adr r2, 80050b4 <UART_SetConfig+0x110>)
 80050ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b2:	bf00      	nop
 80050b4:	080050e9 	.word	0x080050e9
 80050b8:	08005109 	.word	0x08005109
 80050bc:	08005109 	.word	0x08005109
 80050c0:	08005109 	.word	0x08005109
 80050c4:	080050f9 	.word	0x080050f9
 80050c8:	08005109 	.word	0x08005109
 80050cc:	08005109 	.word	0x08005109
 80050d0:	08005109 	.word	0x08005109
 80050d4:	080050f1 	.word	0x080050f1
 80050d8:	08005109 	.word	0x08005109
 80050dc:	08005109 	.word	0x08005109
 80050e0:	08005109 	.word	0x08005109
 80050e4:	08005101 	.word	0x08005101
 80050e8:	2300      	movs	r3, #0
 80050ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050ee:	e0d8      	b.n	80052a2 <UART_SetConfig+0x2fe>
 80050f0:	2302      	movs	r3, #2
 80050f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050f6:	e0d4      	b.n	80052a2 <UART_SetConfig+0x2fe>
 80050f8:	2304      	movs	r3, #4
 80050fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050fe:	e0d0      	b.n	80052a2 <UART_SetConfig+0x2fe>
 8005100:	2308      	movs	r3, #8
 8005102:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005106:	e0cc      	b.n	80052a2 <UART_SetConfig+0x2fe>
 8005108:	2310      	movs	r3, #16
 800510a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800510e:	e0c8      	b.n	80052a2 <UART_SetConfig+0x2fe>
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a5e      	ldr	r2, [pc, #376]	; (8005290 <UART_SetConfig+0x2ec>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d125      	bne.n	8005166 <UART_SetConfig+0x1c2>
 800511a:	4b5b      	ldr	r3, [pc, #364]	; (8005288 <UART_SetConfig+0x2e4>)
 800511c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005120:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005124:	2b30      	cmp	r3, #48	; 0x30
 8005126:	d016      	beq.n	8005156 <UART_SetConfig+0x1b2>
 8005128:	2b30      	cmp	r3, #48	; 0x30
 800512a:	d818      	bhi.n	800515e <UART_SetConfig+0x1ba>
 800512c:	2b20      	cmp	r3, #32
 800512e:	d00a      	beq.n	8005146 <UART_SetConfig+0x1a2>
 8005130:	2b20      	cmp	r3, #32
 8005132:	d814      	bhi.n	800515e <UART_SetConfig+0x1ba>
 8005134:	2b00      	cmp	r3, #0
 8005136:	d002      	beq.n	800513e <UART_SetConfig+0x19a>
 8005138:	2b10      	cmp	r3, #16
 800513a:	d008      	beq.n	800514e <UART_SetConfig+0x1aa>
 800513c:	e00f      	b.n	800515e <UART_SetConfig+0x1ba>
 800513e:	2300      	movs	r3, #0
 8005140:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005144:	e0ad      	b.n	80052a2 <UART_SetConfig+0x2fe>
 8005146:	2302      	movs	r3, #2
 8005148:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800514c:	e0a9      	b.n	80052a2 <UART_SetConfig+0x2fe>
 800514e:	2304      	movs	r3, #4
 8005150:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005154:	e0a5      	b.n	80052a2 <UART_SetConfig+0x2fe>
 8005156:	2308      	movs	r3, #8
 8005158:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800515c:	e0a1      	b.n	80052a2 <UART_SetConfig+0x2fe>
 800515e:	2310      	movs	r3, #16
 8005160:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005164:	e09d      	b.n	80052a2 <UART_SetConfig+0x2fe>
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a4a      	ldr	r2, [pc, #296]	; (8005294 <UART_SetConfig+0x2f0>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d125      	bne.n	80051bc <UART_SetConfig+0x218>
 8005170:	4b45      	ldr	r3, [pc, #276]	; (8005288 <UART_SetConfig+0x2e4>)
 8005172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005176:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800517a:	2bc0      	cmp	r3, #192	; 0xc0
 800517c:	d016      	beq.n	80051ac <UART_SetConfig+0x208>
 800517e:	2bc0      	cmp	r3, #192	; 0xc0
 8005180:	d818      	bhi.n	80051b4 <UART_SetConfig+0x210>
 8005182:	2b80      	cmp	r3, #128	; 0x80
 8005184:	d00a      	beq.n	800519c <UART_SetConfig+0x1f8>
 8005186:	2b80      	cmp	r3, #128	; 0x80
 8005188:	d814      	bhi.n	80051b4 <UART_SetConfig+0x210>
 800518a:	2b00      	cmp	r3, #0
 800518c:	d002      	beq.n	8005194 <UART_SetConfig+0x1f0>
 800518e:	2b40      	cmp	r3, #64	; 0x40
 8005190:	d008      	beq.n	80051a4 <UART_SetConfig+0x200>
 8005192:	e00f      	b.n	80051b4 <UART_SetConfig+0x210>
 8005194:	2300      	movs	r3, #0
 8005196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800519a:	e082      	b.n	80052a2 <UART_SetConfig+0x2fe>
 800519c:	2302      	movs	r3, #2
 800519e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051a2:	e07e      	b.n	80052a2 <UART_SetConfig+0x2fe>
 80051a4:	2304      	movs	r3, #4
 80051a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051aa:	e07a      	b.n	80052a2 <UART_SetConfig+0x2fe>
 80051ac:	2308      	movs	r3, #8
 80051ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051b2:	e076      	b.n	80052a2 <UART_SetConfig+0x2fe>
 80051b4:	2310      	movs	r3, #16
 80051b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051ba:	e072      	b.n	80052a2 <UART_SetConfig+0x2fe>
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a35      	ldr	r2, [pc, #212]	; (8005298 <UART_SetConfig+0x2f4>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d12a      	bne.n	800521c <UART_SetConfig+0x278>
 80051c6:	4b30      	ldr	r3, [pc, #192]	; (8005288 <UART_SetConfig+0x2e4>)
 80051c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051d4:	d01a      	beq.n	800520c <UART_SetConfig+0x268>
 80051d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051da:	d81b      	bhi.n	8005214 <UART_SetConfig+0x270>
 80051dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051e0:	d00c      	beq.n	80051fc <UART_SetConfig+0x258>
 80051e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051e6:	d815      	bhi.n	8005214 <UART_SetConfig+0x270>
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d003      	beq.n	80051f4 <UART_SetConfig+0x250>
 80051ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051f0:	d008      	beq.n	8005204 <UART_SetConfig+0x260>
 80051f2:	e00f      	b.n	8005214 <UART_SetConfig+0x270>
 80051f4:	2300      	movs	r3, #0
 80051f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051fa:	e052      	b.n	80052a2 <UART_SetConfig+0x2fe>
 80051fc:	2302      	movs	r3, #2
 80051fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005202:	e04e      	b.n	80052a2 <UART_SetConfig+0x2fe>
 8005204:	2304      	movs	r3, #4
 8005206:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800520a:	e04a      	b.n	80052a2 <UART_SetConfig+0x2fe>
 800520c:	2308      	movs	r3, #8
 800520e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005212:	e046      	b.n	80052a2 <UART_SetConfig+0x2fe>
 8005214:	2310      	movs	r3, #16
 8005216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800521a:	e042      	b.n	80052a2 <UART_SetConfig+0x2fe>
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a17      	ldr	r2, [pc, #92]	; (8005280 <UART_SetConfig+0x2dc>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d13a      	bne.n	800529c <UART_SetConfig+0x2f8>
 8005226:	4b18      	ldr	r3, [pc, #96]	; (8005288 <UART_SetConfig+0x2e4>)
 8005228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800522c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005230:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005234:	d01a      	beq.n	800526c <UART_SetConfig+0x2c8>
 8005236:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800523a:	d81b      	bhi.n	8005274 <UART_SetConfig+0x2d0>
 800523c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005240:	d00c      	beq.n	800525c <UART_SetConfig+0x2b8>
 8005242:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005246:	d815      	bhi.n	8005274 <UART_SetConfig+0x2d0>
 8005248:	2b00      	cmp	r3, #0
 800524a:	d003      	beq.n	8005254 <UART_SetConfig+0x2b0>
 800524c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005250:	d008      	beq.n	8005264 <UART_SetConfig+0x2c0>
 8005252:	e00f      	b.n	8005274 <UART_SetConfig+0x2d0>
 8005254:	2300      	movs	r3, #0
 8005256:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800525a:	e022      	b.n	80052a2 <UART_SetConfig+0x2fe>
 800525c:	2302      	movs	r3, #2
 800525e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005262:	e01e      	b.n	80052a2 <UART_SetConfig+0x2fe>
 8005264:	2304      	movs	r3, #4
 8005266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800526a:	e01a      	b.n	80052a2 <UART_SetConfig+0x2fe>
 800526c:	2308      	movs	r3, #8
 800526e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005272:	e016      	b.n	80052a2 <UART_SetConfig+0x2fe>
 8005274:	2310      	movs	r3, #16
 8005276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800527a:	e012      	b.n	80052a2 <UART_SetConfig+0x2fe>
 800527c:	cfff69f3 	.word	0xcfff69f3
 8005280:	40008000 	.word	0x40008000
 8005284:	40013800 	.word	0x40013800
 8005288:	40021000 	.word	0x40021000
 800528c:	40004400 	.word	0x40004400
 8005290:	40004800 	.word	0x40004800
 8005294:	40004c00 	.word	0x40004c00
 8005298:	40005000 	.word	0x40005000
 800529c:	2310      	movs	r3, #16
 800529e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4aae      	ldr	r2, [pc, #696]	; (8005560 <UART_SetConfig+0x5bc>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	f040 8097 	bne.w	80053dc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80052ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80052b2:	2b08      	cmp	r3, #8
 80052b4:	d823      	bhi.n	80052fe <UART_SetConfig+0x35a>
 80052b6:	a201      	add	r2, pc, #4	; (adr r2, 80052bc <UART_SetConfig+0x318>)
 80052b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052bc:	080052e1 	.word	0x080052e1
 80052c0:	080052ff 	.word	0x080052ff
 80052c4:	080052e9 	.word	0x080052e9
 80052c8:	080052ff 	.word	0x080052ff
 80052cc:	080052ef 	.word	0x080052ef
 80052d0:	080052ff 	.word	0x080052ff
 80052d4:	080052ff 	.word	0x080052ff
 80052d8:	080052ff 	.word	0x080052ff
 80052dc:	080052f7 	.word	0x080052f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052e0:	f7fd f9da 	bl	8002698 <HAL_RCC_GetPCLK1Freq>
 80052e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80052e6:	e010      	b.n	800530a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052e8:	4b9e      	ldr	r3, [pc, #632]	; (8005564 <UART_SetConfig+0x5c0>)
 80052ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80052ec:	e00d      	b.n	800530a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052ee:	f7fd f965 	bl	80025bc <HAL_RCC_GetSysClockFreq>
 80052f2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80052f4:	e009      	b.n	800530a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80052fc:	e005      	b.n	800530a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80052fe:	2300      	movs	r3, #0
 8005300:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005308:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800530a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530c:	2b00      	cmp	r3, #0
 800530e:	f000 8130 	beq.w	8005572 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005316:	4a94      	ldr	r2, [pc, #592]	; (8005568 <UART_SetConfig+0x5c4>)
 8005318:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800531c:	461a      	mov	r2, r3
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	fbb3 f3f2 	udiv	r3, r3, r2
 8005324:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	685a      	ldr	r2, [r3, #4]
 800532a:	4613      	mov	r3, r2
 800532c:	005b      	lsls	r3, r3, #1
 800532e:	4413      	add	r3, r2
 8005330:	69ba      	ldr	r2, [r7, #24]
 8005332:	429a      	cmp	r2, r3
 8005334:	d305      	bcc.n	8005342 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	429a      	cmp	r2, r3
 8005340:	d903      	bls.n	800534a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005348:	e113      	b.n	8005572 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534c:	2200      	movs	r2, #0
 800534e:	60bb      	str	r3, [r7, #8]
 8005350:	60fa      	str	r2, [r7, #12]
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005356:	4a84      	ldr	r2, [pc, #528]	; (8005568 <UART_SetConfig+0x5c4>)
 8005358:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800535c:	b29b      	uxth	r3, r3
 800535e:	2200      	movs	r2, #0
 8005360:	603b      	str	r3, [r7, #0]
 8005362:	607a      	str	r2, [r7, #4]
 8005364:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005368:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800536c:	f7fa ffb8 	bl	80002e0 <__aeabi_uldivmod>
 8005370:	4602      	mov	r2, r0
 8005372:	460b      	mov	r3, r1
 8005374:	4610      	mov	r0, r2
 8005376:	4619      	mov	r1, r3
 8005378:	f04f 0200 	mov.w	r2, #0
 800537c:	f04f 0300 	mov.w	r3, #0
 8005380:	020b      	lsls	r3, r1, #8
 8005382:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005386:	0202      	lsls	r2, r0, #8
 8005388:	6979      	ldr	r1, [r7, #20]
 800538a:	6849      	ldr	r1, [r1, #4]
 800538c:	0849      	lsrs	r1, r1, #1
 800538e:	2000      	movs	r0, #0
 8005390:	460c      	mov	r4, r1
 8005392:	4605      	mov	r5, r0
 8005394:	eb12 0804 	adds.w	r8, r2, r4
 8005398:	eb43 0905 	adc.w	r9, r3, r5
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	469a      	mov	sl, r3
 80053a4:	4693      	mov	fp, r2
 80053a6:	4652      	mov	r2, sl
 80053a8:	465b      	mov	r3, fp
 80053aa:	4640      	mov	r0, r8
 80053ac:	4649      	mov	r1, r9
 80053ae:	f7fa ff97 	bl	80002e0 <__aeabi_uldivmod>
 80053b2:	4602      	mov	r2, r0
 80053b4:	460b      	mov	r3, r1
 80053b6:	4613      	mov	r3, r2
 80053b8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80053ba:	6a3b      	ldr	r3, [r7, #32]
 80053bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053c0:	d308      	bcc.n	80053d4 <UART_SetConfig+0x430>
 80053c2:	6a3b      	ldr	r3, [r7, #32]
 80053c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053c8:	d204      	bcs.n	80053d4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	6a3a      	ldr	r2, [r7, #32]
 80053d0:	60da      	str	r2, [r3, #12]
 80053d2:	e0ce      	b.n	8005572 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80053da:	e0ca      	b.n	8005572 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	69db      	ldr	r3, [r3, #28]
 80053e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053e4:	d166      	bne.n	80054b4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80053e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80053ea:	2b08      	cmp	r3, #8
 80053ec:	d827      	bhi.n	800543e <UART_SetConfig+0x49a>
 80053ee:	a201      	add	r2, pc, #4	; (adr r2, 80053f4 <UART_SetConfig+0x450>)
 80053f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f4:	08005419 	.word	0x08005419
 80053f8:	08005421 	.word	0x08005421
 80053fc:	08005429 	.word	0x08005429
 8005400:	0800543f 	.word	0x0800543f
 8005404:	0800542f 	.word	0x0800542f
 8005408:	0800543f 	.word	0x0800543f
 800540c:	0800543f 	.word	0x0800543f
 8005410:	0800543f 	.word	0x0800543f
 8005414:	08005437 	.word	0x08005437
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005418:	f7fd f93e 	bl	8002698 <HAL_RCC_GetPCLK1Freq>
 800541c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800541e:	e014      	b.n	800544a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005420:	f7fd f950 	bl	80026c4 <HAL_RCC_GetPCLK2Freq>
 8005424:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005426:	e010      	b.n	800544a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005428:	4b4e      	ldr	r3, [pc, #312]	; (8005564 <UART_SetConfig+0x5c0>)
 800542a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800542c:	e00d      	b.n	800544a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800542e:	f7fd f8c5 	bl	80025bc <HAL_RCC_GetSysClockFreq>
 8005432:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005434:	e009      	b.n	800544a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005436:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800543a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800543c:	e005      	b.n	800544a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800543e:	2300      	movs	r3, #0
 8005440:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005448:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	2b00      	cmp	r3, #0
 800544e:	f000 8090 	beq.w	8005572 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005456:	4a44      	ldr	r2, [pc, #272]	; (8005568 <UART_SetConfig+0x5c4>)
 8005458:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800545c:	461a      	mov	r2, r3
 800545e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005460:	fbb3 f3f2 	udiv	r3, r3, r2
 8005464:	005a      	lsls	r2, r3, #1
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	085b      	lsrs	r3, r3, #1
 800546c:	441a      	add	r2, r3
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	fbb2 f3f3 	udiv	r3, r2, r3
 8005476:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005478:	6a3b      	ldr	r3, [r7, #32]
 800547a:	2b0f      	cmp	r3, #15
 800547c:	d916      	bls.n	80054ac <UART_SetConfig+0x508>
 800547e:	6a3b      	ldr	r3, [r7, #32]
 8005480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005484:	d212      	bcs.n	80054ac <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005486:	6a3b      	ldr	r3, [r7, #32]
 8005488:	b29b      	uxth	r3, r3
 800548a:	f023 030f 	bic.w	r3, r3, #15
 800548e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005490:	6a3b      	ldr	r3, [r7, #32]
 8005492:	085b      	lsrs	r3, r3, #1
 8005494:	b29b      	uxth	r3, r3
 8005496:	f003 0307 	and.w	r3, r3, #7
 800549a:	b29a      	uxth	r2, r3
 800549c:	8bfb      	ldrh	r3, [r7, #30]
 800549e:	4313      	orrs	r3, r2
 80054a0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	8bfa      	ldrh	r2, [r7, #30]
 80054a8:	60da      	str	r2, [r3, #12]
 80054aa:	e062      	b.n	8005572 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80054b2:	e05e      	b.n	8005572 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80054b8:	2b08      	cmp	r3, #8
 80054ba:	d828      	bhi.n	800550e <UART_SetConfig+0x56a>
 80054bc:	a201      	add	r2, pc, #4	; (adr r2, 80054c4 <UART_SetConfig+0x520>)
 80054be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c2:	bf00      	nop
 80054c4:	080054e9 	.word	0x080054e9
 80054c8:	080054f1 	.word	0x080054f1
 80054cc:	080054f9 	.word	0x080054f9
 80054d0:	0800550f 	.word	0x0800550f
 80054d4:	080054ff 	.word	0x080054ff
 80054d8:	0800550f 	.word	0x0800550f
 80054dc:	0800550f 	.word	0x0800550f
 80054e0:	0800550f 	.word	0x0800550f
 80054e4:	08005507 	.word	0x08005507
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054e8:	f7fd f8d6 	bl	8002698 <HAL_RCC_GetPCLK1Freq>
 80054ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80054ee:	e014      	b.n	800551a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054f0:	f7fd f8e8 	bl	80026c4 <HAL_RCC_GetPCLK2Freq>
 80054f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80054f6:	e010      	b.n	800551a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054f8:	4b1a      	ldr	r3, [pc, #104]	; (8005564 <UART_SetConfig+0x5c0>)
 80054fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80054fc:	e00d      	b.n	800551a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054fe:	f7fd f85d 	bl	80025bc <HAL_RCC_GetSysClockFreq>
 8005502:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005504:	e009      	b.n	800551a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800550a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800550c:	e005      	b.n	800551a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800550e:	2300      	movs	r3, #0
 8005510:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005518:	bf00      	nop
    }

    if (pclk != 0U)
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	2b00      	cmp	r3, #0
 800551e:	d028      	beq.n	8005572 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005524:	4a10      	ldr	r2, [pc, #64]	; (8005568 <UART_SetConfig+0x5c4>)
 8005526:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800552a:	461a      	mov	r2, r3
 800552c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	085b      	lsrs	r3, r3, #1
 8005538:	441a      	add	r2, r3
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005542:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005544:	6a3b      	ldr	r3, [r7, #32]
 8005546:	2b0f      	cmp	r3, #15
 8005548:	d910      	bls.n	800556c <UART_SetConfig+0x5c8>
 800554a:	6a3b      	ldr	r3, [r7, #32]
 800554c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005550:	d20c      	bcs.n	800556c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005552:	6a3b      	ldr	r3, [r7, #32]
 8005554:	b29a      	uxth	r2, r3
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	60da      	str	r2, [r3, #12]
 800555c:	e009      	b.n	8005572 <UART_SetConfig+0x5ce>
 800555e:	bf00      	nop
 8005560:	40008000 	.word	0x40008000
 8005564:	00f42400 	.word	0x00f42400
 8005568:	0800816c 	.word	0x0800816c
      }
      else
      {
        ret = HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	2201      	movs	r2, #1
 8005576:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	2201      	movs	r2, #1
 800557e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	2200      	movs	r2, #0
 8005586:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	2200      	movs	r2, #0
 800558c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800558e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005592:	4618      	mov	r0, r3
 8005594:	3730      	adds	r7, #48	; 0x30
 8005596:	46bd      	mov	sp, r7
 8005598:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800559c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a8:	f003 0301 	and.w	r3, r3, #1
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00a      	beq.n	80055c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	430a      	orrs	r2, r1
 80055c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ca:	f003 0302 	and.w	r3, r3, #2
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00a      	beq.n	80055e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	430a      	orrs	r2, r1
 80055e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ec:	f003 0304 	and.w	r3, r3, #4
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d00a      	beq.n	800560a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	430a      	orrs	r2, r1
 8005608:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560e:	f003 0308 	and.w	r3, r3, #8
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00a      	beq.n	800562c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	430a      	orrs	r2, r1
 800562a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005630:	f003 0310 	and.w	r3, r3, #16
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00a      	beq.n	800564e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	430a      	orrs	r2, r1
 800564c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005652:	f003 0320 	and.w	r3, r3, #32
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00a      	beq.n	8005670 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	430a      	orrs	r2, r1
 800566e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005678:	2b00      	cmp	r3, #0
 800567a:	d01a      	beq.n	80056b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	430a      	orrs	r2, r1
 8005690:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005696:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800569a:	d10a      	bne.n	80056b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	430a      	orrs	r2, r1
 80056b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00a      	beq.n	80056d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	430a      	orrs	r2, r1
 80056d2:	605a      	str	r2, [r3, #4]
  }
}
 80056d4:	bf00      	nop
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af02      	add	r7, sp, #8
 80056e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056f0:	f7fb fec2 	bl	8001478 <HAL_GetTick>
 80056f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0308 	and.w	r3, r3, #8
 8005700:	2b08      	cmp	r3, #8
 8005702:	d10e      	bne.n	8005722 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005704:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005708:	9300      	str	r3, [sp, #0]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 f82f 	bl	8005776 <UART_WaitOnFlagUntilTimeout>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d001      	beq.n	8005722 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e025      	b.n	800576e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0304 	and.w	r3, r3, #4
 800572c:	2b04      	cmp	r3, #4
 800572e:	d10e      	bne.n	800574e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005730:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005734:	9300      	str	r3, [sp, #0]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 f819 	bl	8005776 <UART_WaitOnFlagUntilTimeout>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d001      	beq.n	800574e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e00f      	b.n	800576e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2220      	movs	r2, #32
 8005752:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2220      	movs	r2, #32
 800575a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3710      	adds	r7, #16
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}

08005776 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005776:	b580      	push	{r7, lr}
 8005778:	b09c      	sub	sp, #112	; 0x70
 800577a:	af00      	add	r7, sp, #0
 800577c:	60f8      	str	r0, [r7, #12]
 800577e:	60b9      	str	r1, [r7, #8]
 8005780:	603b      	str	r3, [r7, #0]
 8005782:	4613      	mov	r3, r2
 8005784:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005786:	e0a9      	b.n	80058dc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005788:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800578a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800578e:	f000 80a5 	beq.w	80058dc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005792:	f7fb fe71 	bl	8001478 <HAL_GetTick>
 8005796:	4602      	mov	r2, r0
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800579e:	429a      	cmp	r2, r3
 80057a0:	d302      	bcc.n	80057a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80057a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d140      	bne.n	800582a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057b0:	e853 3f00 	ldrex	r3, [r3]
 80057b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80057b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057bc:	667b      	str	r3, [r7, #100]	; 0x64
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	461a      	mov	r2, r3
 80057c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057c8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80057cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80057ce:	e841 2300 	strex	r3, r2, [r1]
 80057d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80057d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1e6      	bne.n	80057a8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	3308      	adds	r3, #8
 80057e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057e4:	e853 3f00 	ldrex	r3, [r3]
 80057e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ec:	f023 0301 	bic.w	r3, r3, #1
 80057f0:	663b      	str	r3, [r7, #96]	; 0x60
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	3308      	adds	r3, #8
 80057f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80057fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80057fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005800:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005802:	e841 2300 	strex	r3, r2, [r1]
 8005806:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1e5      	bne.n	80057da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2220      	movs	r2, #32
 8005812:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2220      	movs	r2, #32
 800581a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e069      	b.n	80058fe <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0304 	and.w	r3, r3, #4
 8005834:	2b00      	cmp	r3, #0
 8005836:	d051      	beq.n	80058dc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	69db      	ldr	r3, [r3, #28]
 800583e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005842:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005846:	d149      	bne.n	80058dc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005850:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585a:	e853 3f00 	ldrex	r3, [r3]
 800585e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005862:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005866:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	461a      	mov	r2, r3
 800586e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005870:	637b      	str	r3, [r7, #52]	; 0x34
 8005872:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005874:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005876:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005878:	e841 2300 	strex	r3, r2, [r1]
 800587c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800587e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005880:	2b00      	cmp	r3, #0
 8005882:	d1e6      	bne.n	8005852 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	3308      	adds	r3, #8
 800588a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	e853 3f00 	ldrex	r3, [r3]
 8005892:	613b      	str	r3, [r7, #16]
   return(result);
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	f023 0301 	bic.w	r3, r3, #1
 800589a:	66bb      	str	r3, [r7, #104]	; 0x68
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	3308      	adds	r3, #8
 80058a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80058a4:	623a      	str	r2, [r7, #32]
 80058a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a8:	69f9      	ldr	r1, [r7, #28]
 80058aa:	6a3a      	ldr	r2, [r7, #32]
 80058ac:	e841 2300 	strex	r3, r2, [r1]
 80058b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1e5      	bne.n	8005884 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2220      	movs	r2, #32
 80058bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2220      	movs	r2, #32
 80058c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2220      	movs	r2, #32
 80058cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e010      	b.n	80058fe <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	69da      	ldr	r2, [r3, #28]
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	4013      	ands	r3, r2
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	bf0c      	ite	eq
 80058ec:	2301      	moveq	r3, #1
 80058ee:	2300      	movne	r3, #0
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	461a      	mov	r2, r3
 80058f4:	79fb      	ldrb	r3, [r7, #7]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	f43f af46 	beq.w	8005788 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3770      	adds	r7, #112	; 0x70
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
	...

08005908 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005908:	b480      	push	{r7}
 800590a:	b0a3      	sub	sp, #140	; 0x8c
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	4613      	mov	r3, r2
 8005914:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	68ba      	ldr	r2, [r7, #8]
 800591a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	88fa      	ldrh	r2, [r7, #6]
 8005920:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	88fa      	ldrh	r2, [r7, #6]
 8005928:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800593a:	d10e      	bne.n	800595a <UART_Start_Receive_IT+0x52>
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d105      	bne.n	8005950 <UART_Start_Receive_IT+0x48>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f240 12ff 	movw	r2, #511	; 0x1ff
 800594a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800594e:	e02d      	b.n	80059ac <UART_Start_Receive_IT+0xa4>
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	22ff      	movs	r2, #255	; 0xff
 8005954:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005958:	e028      	b.n	80059ac <UART_Start_Receive_IT+0xa4>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d10d      	bne.n	800597e <UART_Start_Receive_IT+0x76>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d104      	bne.n	8005974 <UART_Start_Receive_IT+0x6c>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	22ff      	movs	r2, #255	; 0xff
 800596e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005972:	e01b      	b.n	80059ac <UART_Start_Receive_IT+0xa4>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	227f      	movs	r2, #127	; 0x7f
 8005978:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800597c:	e016      	b.n	80059ac <UART_Start_Receive_IT+0xa4>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005986:	d10d      	bne.n	80059a4 <UART_Start_Receive_IT+0x9c>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d104      	bne.n	800599a <UART_Start_Receive_IT+0x92>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	227f      	movs	r2, #127	; 0x7f
 8005994:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005998:	e008      	b.n	80059ac <UART_Start_Receive_IT+0xa4>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	223f      	movs	r2, #63	; 0x3f
 800599e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80059a2:	e003      	b.n	80059ac <UART_Start_Receive_IT+0xa4>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2222      	movs	r2, #34	; 0x22
 80059b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	3308      	adds	r3, #8
 80059c2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059c6:	e853 3f00 	ldrex	r3, [r3]
 80059ca:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80059cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059ce:	f043 0301 	orr.w	r3, r3, #1
 80059d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	3308      	adds	r3, #8
 80059dc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80059e0:	673a      	str	r2, [r7, #112]	; 0x70
 80059e2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80059e6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80059e8:	e841 2300 	strex	r3, r2, [r1]
 80059ec:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80059ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1e3      	bne.n	80059bc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059fc:	d153      	bne.n	8005aa6 <UART_Start_Receive_IT+0x19e>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005a04:	88fa      	ldrh	r2, [r7, #6]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d34d      	bcc.n	8005aa6 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a12:	d107      	bne.n	8005a24 <UART_Start_Receive_IT+0x11c>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d103      	bne.n	8005a24 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	4a4b      	ldr	r2, [pc, #300]	; (8005b4c <UART_Start_Receive_IT+0x244>)
 8005a20:	671a      	str	r2, [r3, #112]	; 0x70
 8005a22:	e002      	b.n	8005a2a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	4a4a      	ldr	r2, [pc, #296]	; (8005b50 <UART_Start_Receive_IT+0x248>)
 8005a28:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d01a      	beq.n	8005a70 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a42:	e853 3f00 	ldrex	r3, [r3]
 8005a46:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005a48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	461a      	mov	r2, r3
 8005a58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005a5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a5e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a60:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005a62:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005a64:	e841 2300 	strex	r3, r2, [r1]
 8005a68:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005a6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1e4      	bne.n	8005a3a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	3308      	adds	r3, #8
 8005a76:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a7a:	e853 3f00 	ldrex	r3, [r3]
 8005a7e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a86:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	3308      	adds	r3, #8
 8005a8e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005a90:	64ba      	str	r2, [r7, #72]	; 0x48
 8005a92:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a94:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a98:	e841 2300 	strex	r3, r2, [r1]
 8005a9c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005a9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1e5      	bne.n	8005a70 <UART_Start_Receive_IT+0x168>
 8005aa4:	e04a      	b.n	8005b3c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aae:	d107      	bne.n	8005ac0 <UART_Start_Receive_IT+0x1b8>
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d103      	bne.n	8005ac0 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	4a26      	ldr	r2, [pc, #152]	; (8005b54 <UART_Start_Receive_IT+0x24c>)
 8005abc:	671a      	str	r2, [r3, #112]	; 0x70
 8005abe:	e002      	b.n	8005ac6 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	4a25      	ldr	r2, [pc, #148]	; (8005b58 <UART_Start_Receive_IT+0x250>)
 8005ac4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d019      	beq.n	8005b0a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ade:	e853 3f00 	ldrex	r3, [r3]
 8005ae2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005aea:	677b      	str	r3, [r7, #116]	; 0x74
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	461a      	mov	r2, r3
 8005af2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005af4:	637b      	str	r3, [r7, #52]	; 0x34
 8005af6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005afa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005afc:	e841 2300 	strex	r3, r2, [r1]
 8005b00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d1e6      	bne.n	8005ad6 <UART_Start_Receive_IT+0x1ce>
 8005b08:	e018      	b.n	8005b3c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	e853 3f00 	ldrex	r3, [r3]
 8005b16:	613b      	str	r3, [r7, #16]
   return(result);
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	f043 0320 	orr.w	r3, r3, #32
 8005b1e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	461a      	mov	r2, r3
 8005b26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b28:	623b      	str	r3, [r7, #32]
 8005b2a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2c:	69f9      	ldr	r1, [r7, #28]
 8005b2e:	6a3a      	ldr	r2, [r7, #32]
 8005b30:	e841 2300 	strex	r3, r2, [r1]
 8005b34:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1e6      	bne.n	8005b0a <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	378c      	adds	r7, #140	; 0x8c
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	08006265 	.word	0x08006265
 8005b50:	08005f6d 	.word	0x08005f6d
 8005b54:	08005e0b 	.word	0x08005e0b
 8005b58:	08005cab 	.word	0x08005cab

08005b5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b095      	sub	sp, #84	; 0x54
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b6c:	e853 3f00 	ldrex	r3, [r3]
 8005b70:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	461a      	mov	r2, r3
 8005b80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b82:	643b      	str	r3, [r7, #64]	; 0x40
 8005b84:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b86:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b8a:	e841 2300 	strex	r3, r2, [r1]
 8005b8e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1e6      	bne.n	8005b64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	3308      	adds	r3, #8
 8005b9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9e:	6a3b      	ldr	r3, [r7, #32]
 8005ba0:	e853 3f00 	ldrex	r3, [r3]
 8005ba4:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bac:	f023 0301 	bic.w	r3, r3, #1
 8005bb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	3308      	adds	r3, #8
 8005bb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bbc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005bc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bc2:	e841 2300 	strex	r3, r2, [r1]
 8005bc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1e3      	bne.n	8005b96 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d118      	bne.n	8005c08 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	e853 3f00 	ldrex	r3, [r3]
 8005be2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	f023 0310 	bic.w	r3, r3, #16
 8005bea:	647b      	str	r3, [r7, #68]	; 0x44
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bf4:	61bb      	str	r3, [r7, #24]
 8005bf6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf8:	6979      	ldr	r1, [r7, #20]
 8005bfa:	69ba      	ldr	r2, [r7, #24]
 8005bfc:	e841 2300 	strex	r3, r2, [r1]
 8005c00:	613b      	str	r3, [r7, #16]
   return(result);
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d1e6      	bne.n	8005bd6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005c1c:	bf00      	nop
 8005c1e:	3754      	adds	r7, #84	; 0x54
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	f7ff f996 	bl	8004f78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c4c:	bf00      	nop
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b088      	sub	sp, #32
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	e853 3f00 	ldrex	r3, [r3]
 8005c68:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c70:	61fb      	str	r3, [r7, #28]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	461a      	mov	r2, r3
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	61bb      	str	r3, [r7, #24]
 8005c7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7e:	6979      	ldr	r1, [r7, #20]
 8005c80:	69ba      	ldr	r2, [r7, #24]
 8005c82:	e841 2300 	strex	r3, r2, [r1]
 8005c86:	613b      	str	r3, [r7, #16]
   return(result);
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d1e6      	bne.n	8005c5c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2220      	movs	r2, #32
 8005c92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f7ff f961 	bl	8004f64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ca2:	bf00      	nop
 8005ca4:	3720      	adds	r7, #32
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b096      	sub	sp, #88	; 0x58
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005cb8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cc2:	2b22      	cmp	r3, #34	; 0x22
 8005cc4:	f040 8095 	bne.w	8005df2 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cce:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005cd2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005cd6:	b2d9      	uxtb	r1, r3
 8005cd8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005cdc:	b2da      	uxtb	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ce2:	400a      	ands	r2, r1
 8005ce4:	b2d2      	uxtb	r2, r2
 8005ce6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cec:	1c5a      	adds	r2, r3, #1
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	b29a      	uxth	r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d178      	bne.n	8005e02 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d18:	e853 3f00 	ldrex	r3, [r3]
 8005d1c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d24:	653b      	str	r3, [r7, #80]	; 0x50
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d2e:	647b      	str	r3, [r7, #68]	; 0x44
 8005d30:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d36:	e841 2300 	strex	r3, r2, [r1]
 8005d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1e6      	bne.n	8005d10 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	3308      	adds	r3, #8
 8005d48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4c:	e853 3f00 	ldrex	r3, [r3]
 8005d50:	623b      	str	r3, [r7, #32]
   return(result);
 8005d52:	6a3b      	ldr	r3, [r7, #32]
 8005d54:	f023 0301 	bic.w	r3, r3, #1
 8005d58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	3308      	adds	r3, #8
 8005d60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d62:	633a      	str	r2, [r7, #48]	; 0x30
 8005d64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d6a:	e841 2300 	strex	r3, r2, [r1]
 8005d6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1e5      	bne.n	8005d42 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2220      	movs	r2, #32
 8005d7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d12e      	bne.n	8005dea <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	e853 3f00 	ldrex	r3, [r3]
 8005d9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f023 0310 	bic.w	r3, r3, #16
 8005da6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	461a      	mov	r2, r3
 8005dae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005db0:	61fb      	str	r3, [r7, #28]
 8005db2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db4:	69b9      	ldr	r1, [r7, #24]
 8005db6:	69fa      	ldr	r2, [r7, #28]
 8005db8:	e841 2300 	strex	r3, r2, [r1]
 8005dbc:	617b      	str	r3, [r7, #20]
   return(result);
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d1e6      	bne.n	8005d92 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	f003 0310 	and.w	r3, r3, #16
 8005dce:	2b10      	cmp	r3, #16
 8005dd0:	d103      	bne.n	8005dda <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2210      	movs	r2, #16
 8005dd8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005de0:	4619      	mov	r1, r3
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f7ff f8d2 	bl	8004f8c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005de8:	e00b      	b.n	8005e02 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7fb fa2e 	bl	800124c <HAL_UART_RxCpltCallback>
}
 8005df0:	e007      	b.n	8005e02 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	699a      	ldr	r2, [r3, #24]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f042 0208 	orr.w	r2, r2, #8
 8005e00:	619a      	str	r2, [r3, #24]
}
 8005e02:	bf00      	nop
 8005e04:	3758      	adds	r7, #88	; 0x58
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b096      	sub	sp, #88	; 0x58
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005e18:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e22:	2b22      	cmp	r3, #34	; 0x22
 8005e24:	f040 8095 	bne.w	8005f52 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e36:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005e38:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005e3c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005e40:	4013      	ands	r3, r2
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e46:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e4c:	1c9a      	adds	r2, r3, #2
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	b29a      	uxth	r2, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d178      	bne.n	8005f62 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e78:	e853 3f00 	ldrex	r3, [r3]
 8005e7c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e8e:	643b      	str	r3, [r7, #64]	; 0x40
 8005e90:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e92:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e96:	e841 2300 	strex	r3, r2, [r1]
 8005e9a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d1e6      	bne.n	8005e70 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	3308      	adds	r3, #8
 8005ea8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eaa:	6a3b      	ldr	r3, [r7, #32]
 8005eac:	e853 3f00 	ldrex	r3, [r3]
 8005eb0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	f023 0301 	bic.w	r3, r3, #1
 8005eb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	3308      	adds	r3, #8
 8005ec0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ec2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ec4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ec8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005eca:	e841 2300 	strex	r3, r2, [r1]
 8005ece:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1e5      	bne.n	8005ea2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2220      	movs	r2, #32
 8005eda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d12e      	bne.n	8005f4a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	e853 3f00 	ldrex	r3, [r3]
 8005efe:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	f023 0310 	bic.w	r3, r3, #16
 8005f06:	647b      	str	r3, [r7, #68]	; 0x44
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f10:	61bb      	str	r3, [r7, #24]
 8005f12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f14:	6979      	ldr	r1, [r7, #20]
 8005f16:	69ba      	ldr	r2, [r7, #24]
 8005f18:	e841 2300 	strex	r3, r2, [r1]
 8005f1c:	613b      	str	r3, [r7, #16]
   return(result);
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d1e6      	bne.n	8005ef2 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	69db      	ldr	r3, [r3, #28]
 8005f2a:	f003 0310 	and.w	r3, r3, #16
 8005f2e:	2b10      	cmp	r3, #16
 8005f30:	d103      	bne.n	8005f3a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2210      	movs	r2, #16
 8005f38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005f40:	4619      	mov	r1, r3
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f7ff f822 	bl	8004f8c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005f48:	e00b      	b.n	8005f62 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f7fb f97e 	bl	800124c <HAL_UART_RxCpltCallback>
}
 8005f50:	e007      	b.n	8005f62 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	699a      	ldr	r2, [r3, #24]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f042 0208 	orr.w	r2, r2, #8
 8005f60:	619a      	str	r2, [r3, #24]
}
 8005f62:	bf00      	nop
 8005f64:	3758      	adds	r7, #88	; 0x58
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
	...

08005f6c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b0a6      	sub	sp, #152	; 0x98
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005f7a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	69db      	ldr	r3, [r3, #28]
 8005f84:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fa2:	2b22      	cmp	r3, #34	; 0x22
 8005fa4:	f040 814f 	bne.w	8006246 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005fae:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005fb2:	e0f6      	b.n	80061a2 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fba:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005fbe:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8005fc2:	b2d9      	uxtb	r1, r3
 8005fc4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8005fc8:	b2da      	uxtb	r2, r3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fce:	400a      	ands	r2, r1
 8005fd0:	b2d2      	uxtb	r2, r2
 8005fd2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fd8:	1c5a      	adds	r2, r3, #1
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	69db      	ldr	r3, [r3, #28]
 8005ff6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005ffa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005ffe:	f003 0307 	and.w	r3, r3, #7
 8006002:	2b00      	cmp	r3, #0
 8006004:	d053      	beq.n	80060ae <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006006:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800600a:	f003 0301 	and.w	r3, r3, #1
 800600e:	2b00      	cmp	r3, #0
 8006010:	d011      	beq.n	8006036 <UART_RxISR_8BIT_FIFOEN+0xca>
 8006012:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00b      	beq.n	8006036 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2201      	movs	r2, #1
 8006024:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800602c:	f043 0201 	orr.w	r2, r3, #1
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006036:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800603a:	f003 0302 	and.w	r3, r3, #2
 800603e:	2b00      	cmp	r3, #0
 8006040:	d011      	beq.n	8006066 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006042:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006046:	f003 0301 	and.w	r3, r3, #1
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00b      	beq.n	8006066 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2202      	movs	r2, #2
 8006054:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800605c:	f043 0204 	orr.w	r2, r3, #4
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006066:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800606a:	f003 0304 	and.w	r3, r3, #4
 800606e:	2b00      	cmp	r3, #0
 8006070:	d011      	beq.n	8006096 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006072:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006076:	f003 0301 	and.w	r3, r3, #1
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00b      	beq.n	8006096 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2204      	movs	r2, #4
 8006084:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800608c:	f043 0202 	orr.w	r2, r3, #2
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800609c:	2b00      	cmp	r3, #0
 800609e:	d006      	beq.n	80060ae <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f7fe ff69 	bl	8004f78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d173      	bne.n	80061a2 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060c2:	e853 3f00 	ldrex	r3, [r3]
 80060c6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80060c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	461a      	mov	r2, r3
 80060d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80060dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80060de:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80060e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80060e4:	e841 2300 	strex	r3, r2, [r1]
 80060e8:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80060ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d1e4      	bne.n	80060ba <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	3308      	adds	r3, #8
 80060f6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060fa:	e853 3f00 	ldrex	r3, [r3]
 80060fe:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006100:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006102:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006106:	f023 0301 	bic.w	r3, r3, #1
 800610a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	3308      	adds	r3, #8
 8006112:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006114:	657a      	str	r2, [r7, #84]	; 0x54
 8006116:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006118:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800611a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800611c:	e841 2300 	strex	r3, r2, [r1]
 8006120:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006124:	2b00      	cmp	r3, #0
 8006126:	d1e3      	bne.n	80060f0 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2220      	movs	r2, #32
 800612c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800613a:	2b01      	cmp	r3, #1
 800613c:	d12e      	bne.n	800619c <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800614c:	e853 3f00 	ldrex	r3, [r3]
 8006150:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006154:	f023 0310 	bic.w	r3, r3, #16
 8006158:	67bb      	str	r3, [r7, #120]	; 0x78
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	461a      	mov	r2, r3
 8006160:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006162:	643b      	str	r3, [r7, #64]	; 0x40
 8006164:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006166:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006168:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800616a:	e841 2300 	strex	r3, r2, [r1]
 800616e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006172:	2b00      	cmp	r3, #0
 8006174:	d1e6      	bne.n	8006144 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	69db      	ldr	r3, [r3, #28]
 800617c:	f003 0310 	and.w	r3, r3, #16
 8006180:	2b10      	cmp	r3, #16
 8006182:	d103      	bne.n	800618c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2210      	movs	r2, #16
 800618a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006192:	4619      	mov	r1, r3
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f7fe fef9 	bl	8004f8c <HAL_UARTEx_RxEventCallback>
 800619a:	e002      	b.n	80061a2 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f7fb f855 	bl	800124c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80061a2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d006      	beq.n	80061b8 <UART_RxISR_8BIT_FIFOEN+0x24c>
 80061aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80061ae:	f003 0320 	and.w	r3, r3, #32
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	f47f aefe 	bne.w	8005fb4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80061be:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80061c2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d045      	beq.n	8006256 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80061d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d23e      	bcs.n	8006256 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	3308      	adds	r3, #8
 80061de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e0:	6a3b      	ldr	r3, [r7, #32]
 80061e2:	e853 3f00 	ldrex	r3, [r3]
 80061e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061ee:	673b      	str	r3, [r7, #112]	; 0x70
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	3308      	adds	r3, #8
 80061f6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80061f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006200:	e841 2300 	strex	r3, r2, [r1]
 8006204:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006208:	2b00      	cmp	r3, #0
 800620a:	d1e5      	bne.n	80061d8 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a14      	ldr	r2, [pc, #80]	; (8006260 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8006210:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	e853 3f00 	ldrex	r3, [r3]
 800621e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	f043 0320 	orr.w	r3, r3, #32
 8006226:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	461a      	mov	r2, r3
 800622e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006230:	61bb      	str	r3, [r7, #24]
 8006232:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006234:	6979      	ldr	r1, [r7, #20]
 8006236:	69ba      	ldr	r2, [r7, #24]
 8006238:	e841 2300 	strex	r3, r2, [r1]
 800623c:	613b      	str	r3, [r7, #16]
   return(result);
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d1e6      	bne.n	8006212 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006244:	e007      	b.n	8006256 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	699a      	ldr	r2, [r3, #24]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f042 0208 	orr.w	r2, r2, #8
 8006254:	619a      	str	r2, [r3, #24]
}
 8006256:	bf00      	nop
 8006258:	3798      	adds	r7, #152	; 0x98
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	08005cab 	.word	0x08005cab

08006264 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b0a8      	sub	sp, #160	; 0xa0
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006272:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	69db      	ldr	r3, [r3, #28]
 800627c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800629a:	2b22      	cmp	r3, #34	; 0x22
 800629c:	f040 8153 	bne.w	8006546 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80062a6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80062aa:	e0fa      	b.n	80064a2 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80062be:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80062c2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80062c6:	4013      	ands	r3, r2
 80062c8:	b29a      	uxth	r2, r3
 80062ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80062ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062d4:	1c9a      	adds	r2, r3, #2
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	3b01      	subs	r3, #1
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	69db      	ldr	r3, [r3, #28]
 80062f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80062f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062fa:	f003 0307 	and.w	r3, r3, #7
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d053      	beq.n	80063aa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006302:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006306:	f003 0301 	and.w	r3, r3, #1
 800630a:	2b00      	cmp	r3, #0
 800630c:	d011      	beq.n	8006332 <UART_RxISR_16BIT_FIFOEN+0xce>
 800630e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00b      	beq.n	8006332 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2201      	movs	r2, #1
 8006320:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006328:	f043 0201 	orr.w	r2, r3, #1
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006332:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006336:	f003 0302 	and.w	r3, r3, #2
 800633a:	2b00      	cmp	r3, #0
 800633c:	d011      	beq.n	8006362 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800633e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006342:	f003 0301 	and.w	r3, r3, #1
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00b      	beq.n	8006362 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2202      	movs	r2, #2
 8006350:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006358:	f043 0204 	orr.w	r2, r3, #4
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006362:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006366:	f003 0304 	and.w	r3, r3, #4
 800636a:	2b00      	cmp	r3, #0
 800636c:	d011      	beq.n	8006392 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800636e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006372:	f003 0301 	and.w	r3, r3, #1
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00b      	beq.n	8006392 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2204      	movs	r2, #4
 8006380:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006388:	f043 0202 	orr.w	r2, r3, #2
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006398:	2b00      	cmp	r3, #0
 800639a:	d006      	beq.n	80063aa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f7fe fdeb 	bl	8004f78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d175      	bne.n	80064a2 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063be:	e853 3f00 	ldrex	r3, [r3]
 80063c2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80063c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	461a      	mov	r2, r3
 80063d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063da:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063dc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80063de:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80063e0:	e841 2300 	strex	r3, r2, [r1]
 80063e4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80063e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d1e4      	bne.n	80063b6 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	3308      	adds	r3, #8
 80063f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063f6:	e853 3f00 	ldrex	r3, [r3]
 80063fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80063fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006402:	f023 0301 	bic.w	r3, r3, #1
 8006406:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	3308      	adds	r3, #8
 8006410:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006414:	65ba      	str	r2, [r7, #88]	; 0x58
 8006416:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006418:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800641a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800641c:	e841 2300 	strex	r3, r2, [r1]
 8006420:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006422:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1e1      	bne.n	80063ec <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2220      	movs	r2, #32
 800642c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800643a:	2b01      	cmp	r3, #1
 800643c:	d12e      	bne.n	800649c <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800644a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800644c:	e853 3f00 	ldrex	r3, [r3]
 8006450:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006454:	f023 0310 	bic.w	r3, r3, #16
 8006458:	67fb      	str	r3, [r7, #124]	; 0x7c
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	461a      	mov	r2, r3
 8006460:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006462:	647b      	str	r3, [r7, #68]	; 0x44
 8006464:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006466:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006468:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800646a:	e841 2300 	strex	r3, r2, [r1]
 800646e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1e6      	bne.n	8006444 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	69db      	ldr	r3, [r3, #28]
 800647c:	f003 0310 	and.w	r3, r3, #16
 8006480:	2b10      	cmp	r3, #16
 8006482:	d103      	bne.n	800648c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2210      	movs	r2, #16
 800648a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006492:	4619      	mov	r1, r3
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f7fe fd79 	bl	8004f8c <HAL_UARTEx_RxEventCallback>
 800649a:	e002      	b.n	80064a2 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f7fa fed5 	bl	800124c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80064a2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d006      	beq.n	80064b8 <UART_RxISR_16BIT_FIFOEN+0x254>
 80064aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064ae:	f003 0320 	and.w	r3, r3, #32
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	f47f aefa 	bne.w	80062ac <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80064be:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80064c2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d045      	beq.n	8006556 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80064d0:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d23e      	bcs.n	8006556 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	3308      	adds	r3, #8
 80064de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e2:	e853 3f00 	ldrex	r3, [r3]
 80064e6:	623b      	str	r3, [r7, #32]
   return(result);
 80064e8:	6a3b      	ldr	r3, [r7, #32]
 80064ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064ee:	677b      	str	r3, [r7, #116]	; 0x74
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	3308      	adds	r3, #8
 80064f6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80064f8:	633a      	str	r2, [r7, #48]	; 0x30
 80064fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006500:	e841 2300 	strex	r3, r2, [r1]
 8006504:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006508:	2b00      	cmp	r3, #0
 800650a:	d1e5      	bne.n	80064d8 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a14      	ldr	r2, [pc, #80]	; (8006560 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8006510:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	e853 3f00 	ldrex	r3, [r3]
 800651e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f043 0320 	orr.w	r3, r3, #32
 8006526:	673b      	str	r3, [r7, #112]	; 0x70
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	461a      	mov	r2, r3
 800652e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006530:	61fb      	str	r3, [r7, #28]
 8006532:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006534:	69b9      	ldr	r1, [r7, #24]
 8006536:	69fa      	ldr	r2, [r7, #28]
 8006538:	e841 2300 	strex	r3, r2, [r1]
 800653c:	617b      	str	r3, [r7, #20]
   return(result);
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d1e6      	bne.n	8006512 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006544:	e007      	b.n	8006556 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	699a      	ldr	r2, [r3, #24]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f042 0208 	orr.w	r2, r2, #8
 8006554:	619a      	str	r2, [r3, #24]
}
 8006556:	bf00      	nop
 8006558:	37a0      	adds	r7, #160	; 0xa0
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	08005e0b 	.word	0x08005e0b

08006564 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800656c:	bf00      	nop
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006580:	bf00      	nop
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006594:	bf00      	nop
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d101      	bne.n	80065b6 <HAL_UARTEx_DisableFifoMode+0x16>
 80065b2:	2302      	movs	r3, #2
 80065b4:	e027      	b.n	8006606 <HAL_UARTEx_DisableFifoMode+0x66>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2201      	movs	r2, #1
 80065ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2224      	movs	r2, #36	; 0x24
 80065c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f022 0201 	bic.w	r2, r2, #1
 80065dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80065e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2220      	movs	r2, #32
 80065f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3714      	adds	r7, #20
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr

08006612 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006612:	b580      	push	{r7, lr}
 8006614:	b084      	sub	sp, #16
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
 800661a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006622:	2b01      	cmp	r3, #1
 8006624:	d101      	bne.n	800662a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006626:	2302      	movs	r3, #2
 8006628:	e02d      	b.n	8006686 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2201      	movs	r2, #1
 800662e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2224      	movs	r2, #36	; 0x24
 8006636:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f022 0201 	bic.w	r2, r2, #1
 8006650:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	683a      	ldr	r2, [r7, #0]
 8006662:	430a      	orrs	r2, r1
 8006664:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f850 	bl	800670c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2220      	movs	r2, #32
 8006678:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b084      	sub	sp, #16
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
 8006696:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d101      	bne.n	80066a6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80066a2:	2302      	movs	r3, #2
 80066a4:	e02d      	b.n	8006702 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2201      	movs	r2, #1
 80066aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2224      	movs	r2, #36	; 0x24
 80066b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f022 0201 	bic.w	r2, r2, #1
 80066cc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	683a      	ldr	r2, [r7, #0]
 80066de:	430a      	orrs	r2, r1
 80066e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 f812 	bl	800670c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2220      	movs	r2, #32
 80066f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	3710      	adds	r7, #16
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
	...

0800670c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800670c:	b480      	push	{r7}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006718:	2b00      	cmp	r3, #0
 800671a:	d108      	bne.n	800672e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800672c:	e031      	b.n	8006792 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800672e:	2308      	movs	r3, #8
 8006730:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006732:	2308      	movs	r3, #8
 8006734:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	0e5b      	lsrs	r3, r3, #25
 800673e:	b2db      	uxtb	r3, r3
 8006740:	f003 0307 	and.w	r3, r3, #7
 8006744:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	0f5b      	lsrs	r3, r3, #29
 800674e:	b2db      	uxtb	r3, r3
 8006750:	f003 0307 	and.w	r3, r3, #7
 8006754:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006756:	7bbb      	ldrb	r3, [r7, #14]
 8006758:	7b3a      	ldrb	r2, [r7, #12]
 800675a:	4911      	ldr	r1, [pc, #68]	; (80067a0 <UARTEx_SetNbDataToProcess+0x94>)
 800675c:	5c8a      	ldrb	r2, [r1, r2]
 800675e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006762:	7b3a      	ldrb	r2, [r7, #12]
 8006764:	490f      	ldr	r1, [pc, #60]	; (80067a4 <UARTEx_SetNbDataToProcess+0x98>)
 8006766:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006768:	fb93 f3f2 	sdiv	r3, r3, r2
 800676c:	b29a      	uxth	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006774:	7bfb      	ldrb	r3, [r7, #15]
 8006776:	7b7a      	ldrb	r2, [r7, #13]
 8006778:	4909      	ldr	r1, [pc, #36]	; (80067a0 <UARTEx_SetNbDataToProcess+0x94>)
 800677a:	5c8a      	ldrb	r2, [r1, r2]
 800677c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006780:	7b7a      	ldrb	r2, [r7, #13]
 8006782:	4908      	ldr	r1, [pc, #32]	; (80067a4 <UARTEx_SetNbDataToProcess+0x98>)
 8006784:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006786:	fb93 f3f2 	sdiv	r3, r3, r2
 800678a:	b29a      	uxth	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006792:	bf00      	nop
 8006794:	3714      	adds	r7, #20
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	08008184 	.word	0x08008184
 80067a4:	0800818c 	.word	0x0800818c

080067a8 <atoi>:
 80067a8:	220a      	movs	r2, #10
 80067aa:	2100      	movs	r1, #0
 80067ac:	f000 b944 	b.w	8006a38 <strtol>

080067b0 <__errno>:
 80067b0:	4b01      	ldr	r3, [pc, #4]	; (80067b8 <__errno+0x8>)
 80067b2:	6818      	ldr	r0, [r3, #0]
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	2000000c 	.word	0x2000000c

080067bc <__libc_init_array>:
 80067bc:	b570      	push	{r4, r5, r6, lr}
 80067be:	4d0d      	ldr	r5, [pc, #52]	; (80067f4 <__libc_init_array+0x38>)
 80067c0:	4c0d      	ldr	r4, [pc, #52]	; (80067f8 <__libc_init_array+0x3c>)
 80067c2:	1b64      	subs	r4, r4, r5
 80067c4:	10a4      	asrs	r4, r4, #2
 80067c6:	2600      	movs	r6, #0
 80067c8:	42a6      	cmp	r6, r4
 80067ca:	d109      	bne.n	80067e0 <__libc_init_array+0x24>
 80067cc:	4d0b      	ldr	r5, [pc, #44]	; (80067fc <__libc_init_array+0x40>)
 80067ce:	4c0c      	ldr	r4, [pc, #48]	; (8006800 <__libc_init_array+0x44>)
 80067d0:	f001 faf2 	bl	8007db8 <_init>
 80067d4:	1b64      	subs	r4, r4, r5
 80067d6:	10a4      	asrs	r4, r4, #2
 80067d8:	2600      	movs	r6, #0
 80067da:	42a6      	cmp	r6, r4
 80067dc:	d105      	bne.n	80067ea <__libc_init_array+0x2e>
 80067de:	bd70      	pop	{r4, r5, r6, pc}
 80067e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80067e4:	4798      	blx	r3
 80067e6:	3601      	adds	r6, #1
 80067e8:	e7ee      	b.n	80067c8 <__libc_init_array+0xc>
 80067ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80067ee:	4798      	blx	r3
 80067f0:	3601      	adds	r6, #1
 80067f2:	e7f2      	b.n	80067da <__libc_init_array+0x1e>
 80067f4:	080083e4 	.word	0x080083e4
 80067f8:	080083e4 	.word	0x080083e4
 80067fc:	080083e4 	.word	0x080083e4
 8006800:	080083e8 	.word	0x080083e8

08006804 <memset>:
 8006804:	4402      	add	r2, r0
 8006806:	4603      	mov	r3, r0
 8006808:	4293      	cmp	r3, r2
 800680a:	d100      	bne.n	800680e <memset+0xa>
 800680c:	4770      	bx	lr
 800680e:	f803 1b01 	strb.w	r1, [r3], #1
 8006812:	e7f9      	b.n	8006808 <memset+0x4>

08006814 <sniprintf>:
 8006814:	b40c      	push	{r2, r3}
 8006816:	b530      	push	{r4, r5, lr}
 8006818:	4b17      	ldr	r3, [pc, #92]	; (8006878 <sniprintf+0x64>)
 800681a:	1e0c      	subs	r4, r1, #0
 800681c:	681d      	ldr	r5, [r3, #0]
 800681e:	b09d      	sub	sp, #116	; 0x74
 8006820:	da08      	bge.n	8006834 <sniprintf+0x20>
 8006822:	238b      	movs	r3, #139	; 0x8b
 8006824:	602b      	str	r3, [r5, #0]
 8006826:	f04f 30ff 	mov.w	r0, #4294967295
 800682a:	b01d      	add	sp, #116	; 0x74
 800682c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006830:	b002      	add	sp, #8
 8006832:	4770      	bx	lr
 8006834:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006838:	f8ad 3014 	strh.w	r3, [sp, #20]
 800683c:	bf14      	ite	ne
 800683e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006842:	4623      	moveq	r3, r4
 8006844:	9304      	str	r3, [sp, #16]
 8006846:	9307      	str	r3, [sp, #28]
 8006848:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800684c:	9002      	str	r0, [sp, #8]
 800684e:	9006      	str	r0, [sp, #24]
 8006850:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006854:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006856:	ab21      	add	r3, sp, #132	; 0x84
 8006858:	a902      	add	r1, sp, #8
 800685a:	4628      	mov	r0, r5
 800685c:	9301      	str	r3, [sp, #4]
 800685e:	f000 fa69 	bl	8006d34 <_svfiprintf_r>
 8006862:	1c43      	adds	r3, r0, #1
 8006864:	bfbc      	itt	lt
 8006866:	238b      	movlt	r3, #139	; 0x8b
 8006868:	602b      	strlt	r3, [r5, #0]
 800686a:	2c00      	cmp	r4, #0
 800686c:	d0dd      	beq.n	800682a <sniprintf+0x16>
 800686e:	9b02      	ldr	r3, [sp, #8]
 8006870:	2200      	movs	r2, #0
 8006872:	701a      	strb	r2, [r3, #0]
 8006874:	e7d9      	b.n	800682a <sniprintf+0x16>
 8006876:	bf00      	nop
 8006878:	2000000c 	.word	0x2000000c

0800687c <strtok>:
 800687c:	4b16      	ldr	r3, [pc, #88]	; (80068d8 <strtok+0x5c>)
 800687e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006880:	681e      	ldr	r6, [r3, #0]
 8006882:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8006884:	4605      	mov	r5, r0
 8006886:	b9fc      	cbnz	r4, 80068c8 <strtok+0x4c>
 8006888:	2050      	movs	r0, #80	; 0x50
 800688a:	9101      	str	r1, [sp, #4]
 800688c:	f000 f90e 	bl	8006aac <malloc>
 8006890:	9901      	ldr	r1, [sp, #4]
 8006892:	65b0      	str	r0, [r6, #88]	; 0x58
 8006894:	4602      	mov	r2, r0
 8006896:	b920      	cbnz	r0, 80068a2 <strtok+0x26>
 8006898:	4b10      	ldr	r3, [pc, #64]	; (80068dc <strtok+0x60>)
 800689a:	4811      	ldr	r0, [pc, #68]	; (80068e0 <strtok+0x64>)
 800689c:	2157      	movs	r1, #87	; 0x57
 800689e:	f000 f8d5 	bl	8006a4c <__assert_func>
 80068a2:	e9c0 4400 	strd	r4, r4, [r0]
 80068a6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80068aa:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80068ae:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80068b2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80068b6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80068ba:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80068be:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80068c2:	6184      	str	r4, [r0, #24]
 80068c4:	7704      	strb	r4, [r0, #28]
 80068c6:	6244      	str	r4, [r0, #36]	; 0x24
 80068c8:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80068ca:	2301      	movs	r3, #1
 80068cc:	4628      	mov	r0, r5
 80068ce:	b002      	add	sp, #8
 80068d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80068d4:	f000 b806 	b.w	80068e4 <__strtok_r>
 80068d8:	2000000c 	.word	0x2000000c
 80068dc:	08008198 	.word	0x08008198
 80068e0:	080081af 	.word	0x080081af

080068e4 <__strtok_r>:
 80068e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068e6:	b908      	cbnz	r0, 80068ec <__strtok_r+0x8>
 80068e8:	6810      	ldr	r0, [r2, #0]
 80068ea:	b188      	cbz	r0, 8006910 <__strtok_r+0x2c>
 80068ec:	4604      	mov	r4, r0
 80068ee:	4620      	mov	r0, r4
 80068f0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80068f4:	460f      	mov	r7, r1
 80068f6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80068fa:	b91e      	cbnz	r6, 8006904 <__strtok_r+0x20>
 80068fc:	b965      	cbnz	r5, 8006918 <__strtok_r+0x34>
 80068fe:	6015      	str	r5, [r2, #0]
 8006900:	4628      	mov	r0, r5
 8006902:	e005      	b.n	8006910 <__strtok_r+0x2c>
 8006904:	42b5      	cmp	r5, r6
 8006906:	d1f6      	bne.n	80068f6 <__strtok_r+0x12>
 8006908:	2b00      	cmp	r3, #0
 800690a:	d1f0      	bne.n	80068ee <__strtok_r+0xa>
 800690c:	6014      	str	r4, [r2, #0]
 800690e:	7003      	strb	r3, [r0, #0]
 8006910:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006912:	461c      	mov	r4, r3
 8006914:	e00c      	b.n	8006930 <__strtok_r+0x4c>
 8006916:	b915      	cbnz	r5, 800691e <__strtok_r+0x3a>
 8006918:	f814 3b01 	ldrb.w	r3, [r4], #1
 800691c:	460e      	mov	r6, r1
 800691e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006922:	42ab      	cmp	r3, r5
 8006924:	d1f7      	bne.n	8006916 <__strtok_r+0x32>
 8006926:	2b00      	cmp	r3, #0
 8006928:	d0f3      	beq.n	8006912 <__strtok_r+0x2e>
 800692a:	2300      	movs	r3, #0
 800692c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006930:	6014      	str	r4, [r2, #0]
 8006932:	e7ed      	b.n	8006910 <__strtok_r+0x2c>

08006934 <_strtol_l.constprop.0>:
 8006934:	2b01      	cmp	r3, #1
 8006936:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800693a:	d001      	beq.n	8006940 <_strtol_l.constprop.0+0xc>
 800693c:	2b24      	cmp	r3, #36	; 0x24
 800693e:	d906      	bls.n	800694e <_strtol_l.constprop.0+0x1a>
 8006940:	f7ff ff36 	bl	80067b0 <__errno>
 8006944:	2316      	movs	r3, #22
 8006946:	6003      	str	r3, [r0, #0]
 8006948:	2000      	movs	r0, #0
 800694a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800694e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006a34 <_strtol_l.constprop.0+0x100>
 8006952:	460d      	mov	r5, r1
 8006954:	462e      	mov	r6, r5
 8006956:	f815 4b01 	ldrb.w	r4, [r5], #1
 800695a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800695e:	f017 0708 	ands.w	r7, r7, #8
 8006962:	d1f7      	bne.n	8006954 <_strtol_l.constprop.0+0x20>
 8006964:	2c2d      	cmp	r4, #45	; 0x2d
 8006966:	d132      	bne.n	80069ce <_strtol_l.constprop.0+0x9a>
 8006968:	782c      	ldrb	r4, [r5, #0]
 800696a:	2701      	movs	r7, #1
 800696c:	1cb5      	adds	r5, r6, #2
 800696e:	2b00      	cmp	r3, #0
 8006970:	d05b      	beq.n	8006a2a <_strtol_l.constprop.0+0xf6>
 8006972:	2b10      	cmp	r3, #16
 8006974:	d109      	bne.n	800698a <_strtol_l.constprop.0+0x56>
 8006976:	2c30      	cmp	r4, #48	; 0x30
 8006978:	d107      	bne.n	800698a <_strtol_l.constprop.0+0x56>
 800697a:	782c      	ldrb	r4, [r5, #0]
 800697c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006980:	2c58      	cmp	r4, #88	; 0x58
 8006982:	d14d      	bne.n	8006a20 <_strtol_l.constprop.0+0xec>
 8006984:	786c      	ldrb	r4, [r5, #1]
 8006986:	2310      	movs	r3, #16
 8006988:	3502      	adds	r5, #2
 800698a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800698e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006992:	f04f 0c00 	mov.w	ip, #0
 8006996:	fbb8 f9f3 	udiv	r9, r8, r3
 800699a:	4666      	mov	r6, ip
 800699c:	fb03 8a19 	mls	sl, r3, r9, r8
 80069a0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80069a4:	f1be 0f09 	cmp.w	lr, #9
 80069a8:	d816      	bhi.n	80069d8 <_strtol_l.constprop.0+0xa4>
 80069aa:	4674      	mov	r4, lr
 80069ac:	42a3      	cmp	r3, r4
 80069ae:	dd24      	ble.n	80069fa <_strtol_l.constprop.0+0xc6>
 80069b0:	f1bc 0f00 	cmp.w	ip, #0
 80069b4:	db1e      	blt.n	80069f4 <_strtol_l.constprop.0+0xc0>
 80069b6:	45b1      	cmp	r9, r6
 80069b8:	d31c      	bcc.n	80069f4 <_strtol_l.constprop.0+0xc0>
 80069ba:	d101      	bne.n	80069c0 <_strtol_l.constprop.0+0x8c>
 80069bc:	45a2      	cmp	sl, r4
 80069be:	db19      	blt.n	80069f4 <_strtol_l.constprop.0+0xc0>
 80069c0:	fb06 4603 	mla	r6, r6, r3, r4
 80069c4:	f04f 0c01 	mov.w	ip, #1
 80069c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80069cc:	e7e8      	b.n	80069a0 <_strtol_l.constprop.0+0x6c>
 80069ce:	2c2b      	cmp	r4, #43	; 0x2b
 80069d0:	bf04      	itt	eq
 80069d2:	782c      	ldrbeq	r4, [r5, #0]
 80069d4:	1cb5      	addeq	r5, r6, #2
 80069d6:	e7ca      	b.n	800696e <_strtol_l.constprop.0+0x3a>
 80069d8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80069dc:	f1be 0f19 	cmp.w	lr, #25
 80069e0:	d801      	bhi.n	80069e6 <_strtol_l.constprop.0+0xb2>
 80069e2:	3c37      	subs	r4, #55	; 0x37
 80069e4:	e7e2      	b.n	80069ac <_strtol_l.constprop.0+0x78>
 80069e6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80069ea:	f1be 0f19 	cmp.w	lr, #25
 80069ee:	d804      	bhi.n	80069fa <_strtol_l.constprop.0+0xc6>
 80069f0:	3c57      	subs	r4, #87	; 0x57
 80069f2:	e7db      	b.n	80069ac <_strtol_l.constprop.0+0x78>
 80069f4:	f04f 3cff 	mov.w	ip, #4294967295
 80069f8:	e7e6      	b.n	80069c8 <_strtol_l.constprop.0+0x94>
 80069fa:	f1bc 0f00 	cmp.w	ip, #0
 80069fe:	da05      	bge.n	8006a0c <_strtol_l.constprop.0+0xd8>
 8006a00:	2322      	movs	r3, #34	; 0x22
 8006a02:	6003      	str	r3, [r0, #0]
 8006a04:	4646      	mov	r6, r8
 8006a06:	b942      	cbnz	r2, 8006a1a <_strtol_l.constprop.0+0xe6>
 8006a08:	4630      	mov	r0, r6
 8006a0a:	e79e      	b.n	800694a <_strtol_l.constprop.0+0x16>
 8006a0c:	b107      	cbz	r7, 8006a10 <_strtol_l.constprop.0+0xdc>
 8006a0e:	4276      	negs	r6, r6
 8006a10:	2a00      	cmp	r2, #0
 8006a12:	d0f9      	beq.n	8006a08 <_strtol_l.constprop.0+0xd4>
 8006a14:	f1bc 0f00 	cmp.w	ip, #0
 8006a18:	d000      	beq.n	8006a1c <_strtol_l.constprop.0+0xe8>
 8006a1a:	1e69      	subs	r1, r5, #1
 8006a1c:	6011      	str	r1, [r2, #0]
 8006a1e:	e7f3      	b.n	8006a08 <_strtol_l.constprop.0+0xd4>
 8006a20:	2430      	movs	r4, #48	; 0x30
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1b1      	bne.n	800698a <_strtol_l.constprop.0+0x56>
 8006a26:	2308      	movs	r3, #8
 8006a28:	e7af      	b.n	800698a <_strtol_l.constprop.0+0x56>
 8006a2a:	2c30      	cmp	r4, #48	; 0x30
 8006a2c:	d0a5      	beq.n	800697a <_strtol_l.constprop.0+0x46>
 8006a2e:	230a      	movs	r3, #10
 8006a30:	e7ab      	b.n	800698a <_strtol_l.constprop.0+0x56>
 8006a32:	bf00      	nop
 8006a34:	08008249 	.word	0x08008249

08006a38 <strtol>:
 8006a38:	4613      	mov	r3, r2
 8006a3a:	460a      	mov	r2, r1
 8006a3c:	4601      	mov	r1, r0
 8006a3e:	4802      	ldr	r0, [pc, #8]	; (8006a48 <strtol+0x10>)
 8006a40:	6800      	ldr	r0, [r0, #0]
 8006a42:	f7ff bf77 	b.w	8006934 <_strtol_l.constprop.0>
 8006a46:	bf00      	nop
 8006a48:	2000000c 	.word	0x2000000c

08006a4c <__assert_func>:
 8006a4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a4e:	4614      	mov	r4, r2
 8006a50:	461a      	mov	r2, r3
 8006a52:	4b09      	ldr	r3, [pc, #36]	; (8006a78 <__assert_func+0x2c>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4605      	mov	r5, r0
 8006a58:	68d8      	ldr	r0, [r3, #12]
 8006a5a:	b14c      	cbz	r4, 8006a70 <__assert_func+0x24>
 8006a5c:	4b07      	ldr	r3, [pc, #28]	; (8006a7c <__assert_func+0x30>)
 8006a5e:	9100      	str	r1, [sp, #0]
 8006a60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006a64:	4906      	ldr	r1, [pc, #24]	; (8006a80 <__assert_func+0x34>)
 8006a66:	462b      	mov	r3, r5
 8006a68:	f000 f80e 	bl	8006a88 <fiprintf>
 8006a6c:	f000 fe20 	bl	80076b0 <abort>
 8006a70:	4b04      	ldr	r3, [pc, #16]	; (8006a84 <__assert_func+0x38>)
 8006a72:	461c      	mov	r4, r3
 8006a74:	e7f3      	b.n	8006a5e <__assert_func+0x12>
 8006a76:	bf00      	nop
 8006a78:	2000000c 	.word	0x2000000c
 8006a7c:	0800820c 	.word	0x0800820c
 8006a80:	08008219 	.word	0x08008219
 8006a84:	08008247 	.word	0x08008247

08006a88 <fiprintf>:
 8006a88:	b40e      	push	{r1, r2, r3}
 8006a8a:	b503      	push	{r0, r1, lr}
 8006a8c:	4601      	mov	r1, r0
 8006a8e:	ab03      	add	r3, sp, #12
 8006a90:	4805      	ldr	r0, [pc, #20]	; (8006aa8 <fiprintf+0x20>)
 8006a92:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a96:	6800      	ldr	r0, [r0, #0]
 8006a98:	9301      	str	r3, [sp, #4]
 8006a9a:	f000 fa75 	bl	8006f88 <_vfiprintf_r>
 8006a9e:	b002      	add	sp, #8
 8006aa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006aa4:	b003      	add	sp, #12
 8006aa6:	4770      	bx	lr
 8006aa8:	2000000c 	.word	0x2000000c

08006aac <malloc>:
 8006aac:	4b02      	ldr	r3, [pc, #8]	; (8006ab8 <malloc+0xc>)
 8006aae:	4601      	mov	r1, r0
 8006ab0:	6818      	ldr	r0, [r3, #0]
 8006ab2:	f000 b86f 	b.w	8006b94 <_malloc_r>
 8006ab6:	bf00      	nop
 8006ab8:	2000000c 	.word	0x2000000c

08006abc <_free_r>:
 8006abc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006abe:	2900      	cmp	r1, #0
 8006ac0:	d044      	beq.n	8006b4c <_free_r+0x90>
 8006ac2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ac6:	9001      	str	r0, [sp, #4]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	f1a1 0404 	sub.w	r4, r1, #4
 8006ace:	bfb8      	it	lt
 8006ad0:	18e4      	addlt	r4, r4, r3
 8006ad2:	f001 f83d 	bl	8007b50 <__malloc_lock>
 8006ad6:	4a1e      	ldr	r2, [pc, #120]	; (8006b50 <_free_r+0x94>)
 8006ad8:	9801      	ldr	r0, [sp, #4]
 8006ada:	6813      	ldr	r3, [r2, #0]
 8006adc:	b933      	cbnz	r3, 8006aec <_free_r+0x30>
 8006ade:	6063      	str	r3, [r4, #4]
 8006ae0:	6014      	str	r4, [r2, #0]
 8006ae2:	b003      	add	sp, #12
 8006ae4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ae8:	f001 b838 	b.w	8007b5c <__malloc_unlock>
 8006aec:	42a3      	cmp	r3, r4
 8006aee:	d908      	bls.n	8006b02 <_free_r+0x46>
 8006af0:	6825      	ldr	r5, [r4, #0]
 8006af2:	1961      	adds	r1, r4, r5
 8006af4:	428b      	cmp	r3, r1
 8006af6:	bf01      	itttt	eq
 8006af8:	6819      	ldreq	r1, [r3, #0]
 8006afa:	685b      	ldreq	r3, [r3, #4]
 8006afc:	1949      	addeq	r1, r1, r5
 8006afe:	6021      	streq	r1, [r4, #0]
 8006b00:	e7ed      	b.n	8006ade <_free_r+0x22>
 8006b02:	461a      	mov	r2, r3
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	b10b      	cbz	r3, 8006b0c <_free_r+0x50>
 8006b08:	42a3      	cmp	r3, r4
 8006b0a:	d9fa      	bls.n	8006b02 <_free_r+0x46>
 8006b0c:	6811      	ldr	r1, [r2, #0]
 8006b0e:	1855      	adds	r5, r2, r1
 8006b10:	42a5      	cmp	r5, r4
 8006b12:	d10b      	bne.n	8006b2c <_free_r+0x70>
 8006b14:	6824      	ldr	r4, [r4, #0]
 8006b16:	4421      	add	r1, r4
 8006b18:	1854      	adds	r4, r2, r1
 8006b1a:	42a3      	cmp	r3, r4
 8006b1c:	6011      	str	r1, [r2, #0]
 8006b1e:	d1e0      	bne.n	8006ae2 <_free_r+0x26>
 8006b20:	681c      	ldr	r4, [r3, #0]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	6053      	str	r3, [r2, #4]
 8006b26:	4421      	add	r1, r4
 8006b28:	6011      	str	r1, [r2, #0]
 8006b2a:	e7da      	b.n	8006ae2 <_free_r+0x26>
 8006b2c:	d902      	bls.n	8006b34 <_free_r+0x78>
 8006b2e:	230c      	movs	r3, #12
 8006b30:	6003      	str	r3, [r0, #0]
 8006b32:	e7d6      	b.n	8006ae2 <_free_r+0x26>
 8006b34:	6825      	ldr	r5, [r4, #0]
 8006b36:	1961      	adds	r1, r4, r5
 8006b38:	428b      	cmp	r3, r1
 8006b3a:	bf04      	itt	eq
 8006b3c:	6819      	ldreq	r1, [r3, #0]
 8006b3e:	685b      	ldreq	r3, [r3, #4]
 8006b40:	6063      	str	r3, [r4, #4]
 8006b42:	bf04      	itt	eq
 8006b44:	1949      	addeq	r1, r1, r5
 8006b46:	6021      	streq	r1, [r4, #0]
 8006b48:	6054      	str	r4, [r2, #4]
 8006b4a:	e7ca      	b.n	8006ae2 <_free_r+0x26>
 8006b4c:	b003      	add	sp, #12
 8006b4e:	bd30      	pop	{r4, r5, pc}
 8006b50:	20000278 	.word	0x20000278

08006b54 <sbrk_aligned>:
 8006b54:	b570      	push	{r4, r5, r6, lr}
 8006b56:	4e0e      	ldr	r6, [pc, #56]	; (8006b90 <sbrk_aligned+0x3c>)
 8006b58:	460c      	mov	r4, r1
 8006b5a:	6831      	ldr	r1, [r6, #0]
 8006b5c:	4605      	mov	r5, r0
 8006b5e:	b911      	cbnz	r1, 8006b66 <sbrk_aligned+0x12>
 8006b60:	f000 fcd6 	bl	8007510 <_sbrk_r>
 8006b64:	6030      	str	r0, [r6, #0]
 8006b66:	4621      	mov	r1, r4
 8006b68:	4628      	mov	r0, r5
 8006b6a:	f000 fcd1 	bl	8007510 <_sbrk_r>
 8006b6e:	1c43      	adds	r3, r0, #1
 8006b70:	d00a      	beq.n	8006b88 <sbrk_aligned+0x34>
 8006b72:	1cc4      	adds	r4, r0, #3
 8006b74:	f024 0403 	bic.w	r4, r4, #3
 8006b78:	42a0      	cmp	r0, r4
 8006b7a:	d007      	beq.n	8006b8c <sbrk_aligned+0x38>
 8006b7c:	1a21      	subs	r1, r4, r0
 8006b7e:	4628      	mov	r0, r5
 8006b80:	f000 fcc6 	bl	8007510 <_sbrk_r>
 8006b84:	3001      	adds	r0, #1
 8006b86:	d101      	bne.n	8006b8c <sbrk_aligned+0x38>
 8006b88:	f04f 34ff 	mov.w	r4, #4294967295
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	bd70      	pop	{r4, r5, r6, pc}
 8006b90:	2000027c 	.word	0x2000027c

08006b94 <_malloc_r>:
 8006b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b98:	1ccd      	adds	r5, r1, #3
 8006b9a:	f025 0503 	bic.w	r5, r5, #3
 8006b9e:	3508      	adds	r5, #8
 8006ba0:	2d0c      	cmp	r5, #12
 8006ba2:	bf38      	it	cc
 8006ba4:	250c      	movcc	r5, #12
 8006ba6:	2d00      	cmp	r5, #0
 8006ba8:	4607      	mov	r7, r0
 8006baa:	db01      	blt.n	8006bb0 <_malloc_r+0x1c>
 8006bac:	42a9      	cmp	r1, r5
 8006bae:	d905      	bls.n	8006bbc <_malloc_r+0x28>
 8006bb0:	230c      	movs	r3, #12
 8006bb2:	603b      	str	r3, [r7, #0]
 8006bb4:	2600      	movs	r6, #0
 8006bb6:	4630      	mov	r0, r6
 8006bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bbc:	4e2e      	ldr	r6, [pc, #184]	; (8006c78 <_malloc_r+0xe4>)
 8006bbe:	f000 ffc7 	bl	8007b50 <__malloc_lock>
 8006bc2:	6833      	ldr	r3, [r6, #0]
 8006bc4:	461c      	mov	r4, r3
 8006bc6:	bb34      	cbnz	r4, 8006c16 <_malloc_r+0x82>
 8006bc8:	4629      	mov	r1, r5
 8006bca:	4638      	mov	r0, r7
 8006bcc:	f7ff ffc2 	bl	8006b54 <sbrk_aligned>
 8006bd0:	1c43      	adds	r3, r0, #1
 8006bd2:	4604      	mov	r4, r0
 8006bd4:	d14d      	bne.n	8006c72 <_malloc_r+0xde>
 8006bd6:	6834      	ldr	r4, [r6, #0]
 8006bd8:	4626      	mov	r6, r4
 8006bda:	2e00      	cmp	r6, #0
 8006bdc:	d140      	bne.n	8006c60 <_malloc_r+0xcc>
 8006bde:	6823      	ldr	r3, [r4, #0]
 8006be0:	4631      	mov	r1, r6
 8006be2:	4638      	mov	r0, r7
 8006be4:	eb04 0803 	add.w	r8, r4, r3
 8006be8:	f000 fc92 	bl	8007510 <_sbrk_r>
 8006bec:	4580      	cmp	r8, r0
 8006bee:	d13a      	bne.n	8006c66 <_malloc_r+0xd2>
 8006bf0:	6821      	ldr	r1, [r4, #0]
 8006bf2:	3503      	adds	r5, #3
 8006bf4:	1a6d      	subs	r5, r5, r1
 8006bf6:	f025 0503 	bic.w	r5, r5, #3
 8006bfa:	3508      	adds	r5, #8
 8006bfc:	2d0c      	cmp	r5, #12
 8006bfe:	bf38      	it	cc
 8006c00:	250c      	movcc	r5, #12
 8006c02:	4629      	mov	r1, r5
 8006c04:	4638      	mov	r0, r7
 8006c06:	f7ff ffa5 	bl	8006b54 <sbrk_aligned>
 8006c0a:	3001      	adds	r0, #1
 8006c0c:	d02b      	beq.n	8006c66 <_malloc_r+0xd2>
 8006c0e:	6823      	ldr	r3, [r4, #0]
 8006c10:	442b      	add	r3, r5
 8006c12:	6023      	str	r3, [r4, #0]
 8006c14:	e00e      	b.n	8006c34 <_malloc_r+0xa0>
 8006c16:	6822      	ldr	r2, [r4, #0]
 8006c18:	1b52      	subs	r2, r2, r5
 8006c1a:	d41e      	bmi.n	8006c5a <_malloc_r+0xc6>
 8006c1c:	2a0b      	cmp	r2, #11
 8006c1e:	d916      	bls.n	8006c4e <_malloc_r+0xba>
 8006c20:	1961      	adds	r1, r4, r5
 8006c22:	42a3      	cmp	r3, r4
 8006c24:	6025      	str	r5, [r4, #0]
 8006c26:	bf18      	it	ne
 8006c28:	6059      	strne	r1, [r3, #4]
 8006c2a:	6863      	ldr	r3, [r4, #4]
 8006c2c:	bf08      	it	eq
 8006c2e:	6031      	streq	r1, [r6, #0]
 8006c30:	5162      	str	r2, [r4, r5]
 8006c32:	604b      	str	r3, [r1, #4]
 8006c34:	4638      	mov	r0, r7
 8006c36:	f104 060b 	add.w	r6, r4, #11
 8006c3a:	f000 ff8f 	bl	8007b5c <__malloc_unlock>
 8006c3e:	f026 0607 	bic.w	r6, r6, #7
 8006c42:	1d23      	adds	r3, r4, #4
 8006c44:	1af2      	subs	r2, r6, r3
 8006c46:	d0b6      	beq.n	8006bb6 <_malloc_r+0x22>
 8006c48:	1b9b      	subs	r3, r3, r6
 8006c4a:	50a3      	str	r3, [r4, r2]
 8006c4c:	e7b3      	b.n	8006bb6 <_malloc_r+0x22>
 8006c4e:	6862      	ldr	r2, [r4, #4]
 8006c50:	42a3      	cmp	r3, r4
 8006c52:	bf0c      	ite	eq
 8006c54:	6032      	streq	r2, [r6, #0]
 8006c56:	605a      	strne	r2, [r3, #4]
 8006c58:	e7ec      	b.n	8006c34 <_malloc_r+0xa0>
 8006c5a:	4623      	mov	r3, r4
 8006c5c:	6864      	ldr	r4, [r4, #4]
 8006c5e:	e7b2      	b.n	8006bc6 <_malloc_r+0x32>
 8006c60:	4634      	mov	r4, r6
 8006c62:	6876      	ldr	r6, [r6, #4]
 8006c64:	e7b9      	b.n	8006bda <_malloc_r+0x46>
 8006c66:	230c      	movs	r3, #12
 8006c68:	603b      	str	r3, [r7, #0]
 8006c6a:	4638      	mov	r0, r7
 8006c6c:	f000 ff76 	bl	8007b5c <__malloc_unlock>
 8006c70:	e7a1      	b.n	8006bb6 <_malloc_r+0x22>
 8006c72:	6025      	str	r5, [r4, #0]
 8006c74:	e7de      	b.n	8006c34 <_malloc_r+0xa0>
 8006c76:	bf00      	nop
 8006c78:	20000278 	.word	0x20000278

08006c7c <__ssputs_r>:
 8006c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c80:	688e      	ldr	r6, [r1, #8]
 8006c82:	429e      	cmp	r6, r3
 8006c84:	4682      	mov	sl, r0
 8006c86:	460c      	mov	r4, r1
 8006c88:	4690      	mov	r8, r2
 8006c8a:	461f      	mov	r7, r3
 8006c8c:	d838      	bhi.n	8006d00 <__ssputs_r+0x84>
 8006c8e:	898a      	ldrh	r2, [r1, #12]
 8006c90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c94:	d032      	beq.n	8006cfc <__ssputs_r+0x80>
 8006c96:	6825      	ldr	r5, [r4, #0]
 8006c98:	6909      	ldr	r1, [r1, #16]
 8006c9a:	eba5 0901 	sub.w	r9, r5, r1
 8006c9e:	6965      	ldr	r5, [r4, #20]
 8006ca0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ca4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006ca8:	3301      	adds	r3, #1
 8006caa:	444b      	add	r3, r9
 8006cac:	106d      	asrs	r5, r5, #1
 8006cae:	429d      	cmp	r5, r3
 8006cb0:	bf38      	it	cc
 8006cb2:	461d      	movcc	r5, r3
 8006cb4:	0553      	lsls	r3, r2, #21
 8006cb6:	d531      	bpl.n	8006d1c <__ssputs_r+0xa0>
 8006cb8:	4629      	mov	r1, r5
 8006cba:	f7ff ff6b 	bl	8006b94 <_malloc_r>
 8006cbe:	4606      	mov	r6, r0
 8006cc0:	b950      	cbnz	r0, 8006cd8 <__ssputs_r+0x5c>
 8006cc2:	230c      	movs	r3, #12
 8006cc4:	f8ca 3000 	str.w	r3, [sl]
 8006cc8:	89a3      	ldrh	r3, [r4, #12]
 8006cca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cce:	81a3      	strh	r3, [r4, #12]
 8006cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cd8:	6921      	ldr	r1, [r4, #16]
 8006cda:	464a      	mov	r2, r9
 8006cdc:	f000 ff10 	bl	8007b00 <memcpy>
 8006ce0:	89a3      	ldrh	r3, [r4, #12]
 8006ce2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cea:	81a3      	strh	r3, [r4, #12]
 8006cec:	6126      	str	r6, [r4, #16]
 8006cee:	6165      	str	r5, [r4, #20]
 8006cf0:	444e      	add	r6, r9
 8006cf2:	eba5 0509 	sub.w	r5, r5, r9
 8006cf6:	6026      	str	r6, [r4, #0]
 8006cf8:	60a5      	str	r5, [r4, #8]
 8006cfa:	463e      	mov	r6, r7
 8006cfc:	42be      	cmp	r6, r7
 8006cfe:	d900      	bls.n	8006d02 <__ssputs_r+0x86>
 8006d00:	463e      	mov	r6, r7
 8006d02:	6820      	ldr	r0, [r4, #0]
 8006d04:	4632      	mov	r2, r6
 8006d06:	4641      	mov	r1, r8
 8006d08:	f000 ff08 	bl	8007b1c <memmove>
 8006d0c:	68a3      	ldr	r3, [r4, #8]
 8006d0e:	1b9b      	subs	r3, r3, r6
 8006d10:	60a3      	str	r3, [r4, #8]
 8006d12:	6823      	ldr	r3, [r4, #0]
 8006d14:	4433      	add	r3, r6
 8006d16:	6023      	str	r3, [r4, #0]
 8006d18:	2000      	movs	r0, #0
 8006d1a:	e7db      	b.n	8006cd4 <__ssputs_r+0x58>
 8006d1c:	462a      	mov	r2, r5
 8006d1e:	f000 ff23 	bl	8007b68 <_realloc_r>
 8006d22:	4606      	mov	r6, r0
 8006d24:	2800      	cmp	r0, #0
 8006d26:	d1e1      	bne.n	8006cec <__ssputs_r+0x70>
 8006d28:	6921      	ldr	r1, [r4, #16]
 8006d2a:	4650      	mov	r0, sl
 8006d2c:	f7ff fec6 	bl	8006abc <_free_r>
 8006d30:	e7c7      	b.n	8006cc2 <__ssputs_r+0x46>
	...

08006d34 <_svfiprintf_r>:
 8006d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d38:	4698      	mov	r8, r3
 8006d3a:	898b      	ldrh	r3, [r1, #12]
 8006d3c:	061b      	lsls	r3, r3, #24
 8006d3e:	b09d      	sub	sp, #116	; 0x74
 8006d40:	4607      	mov	r7, r0
 8006d42:	460d      	mov	r5, r1
 8006d44:	4614      	mov	r4, r2
 8006d46:	d50e      	bpl.n	8006d66 <_svfiprintf_r+0x32>
 8006d48:	690b      	ldr	r3, [r1, #16]
 8006d4a:	b963      	cbnz	r3, 8006d66 <_svfiprintf_r+0x32>
 8006d4c:	2140      	movs	r1, #64	; 0x40
 8006d4e:	f7ff ff21 	bl	8006b94 <_malloc_r>
 8006d52:	6028      	str	r0, [r5, #0]
 8006d54:	6128      	str	r0, [r5, #16]
 8006d56:	b920      	cbnz	r0, 8006d62 <_svfiprintf_r+0x2e>
 8006d58:	230c      	movs	r3, #12
 8006d5a:	603b      	str	r3, [r7, #0]
 8006d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d60:	e0d1      	b.n	8006f06 <_svfiprintf_r+0x1d2>
 8006d62:	2340      	movs	r3, #64	; 0x40
 8006d64:	616b      	str	r3, [r5, #20]
 8006d66:	2300      	movs	r3, #0
 8006d68:	9309      	str	r3, [sp, #36]	; 0x24
 8006d6a:	2320      	movs	r3, #32
 8006d6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d70:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d74:	2330      	movs	r3, #48	; 0x30
 8006d76:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006f20 <_svfiprintf_r+0x1ec>
 8006d7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d7e:	f04f 0901 	mov.w	r9, #1
 8006d82:	4623      	mov	r3, r4
 8006d84:	469a      	mov	sl, r3
 8006d86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d8a:	b10a      	cbz	r2, 8006d90 <_svfiprintf_r+0x5c>
 8006d8c:	2a25      	cmp	r2, #37	; 0x25
 8006d8e:	d1f9      	bne.n	8006d84 <_svfiprintf_r+0x50>
 8006d90:	ebba 0b04 	subs.w	fp, sl, r4
 8006d94:	d00b      	beq.n	8006dae <_svfiprintf_r+0x7a>
 8006d96:	465b      	mov	r3, fp
 8006d98:	4622      	mov	r2, r4
 8006d9a:	4629      	mov	r1, r5
 8006d9c:	4638      	mov	r0, r7
 8006d9e:	f7ff ff6d 	bl	8006c7c <__ssputs_r>
 8006da2:	3001      	adds	r0, #1
 8006da4:	f000 80aa 	beq.w	8006efc <_svfiprintf_r+0x1c8>
 8006da8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006daa:	445a      	add	r2, fp
 8006dac:	9209      	str	r2, [sp, #36]	; 0x24
 8006dae:	f89a 3000 	ldrb.w	r3, [sl]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	f000 80a2 	beq.w	8006efc <_svfiprintf_r+0x1c8>
 8006db8:	2300      	movs	r3, #0
 8006dba:	f04f 32ff 	mov.w	r2, #4294967295
 8006dbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006dc2:	f10a 0a01 	add.w	sl, sl, #1
 8006dc6:	9304      	str	r3, [sp, #16]
 8006dc8:	9307      	str	r3, [sp, #28]
 8006dca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006dce:	931a      	str	r3, [sp, #104]	; 0x68
 8006dd0:	4654      	mov	r4, sl
 8006dd2:	2205      	movs	r2, #5
 8006dd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dd8:	4851      	ldr	r0, [pc, #324]	; (8006f20 <_svfiprintf_r+0x1ec>)
 8006dda:	f7f9 fa31 	bl	8000240 <memchr>
 8006dde:	9a04      	ldr	r2, [sp, #16]
 8006de0:	b9d8      	cbnz	r0, 8006e1a <_svfiprintf_r+0xe6>
 8006de2:	06d0      	lsls	r0, r2, #27
 8006de4:	bf44      	itt	mi
 8006de6:	2320      	movmi	r3, #32
 8006de8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006dec:	0711      	lsls	r1, r2, #28
 8006dee:	bf44      	itt	mi
 8006df0:	232b      	movmi	r3, #43	; 0x2b
 8006df2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006df6:	f89a 3000 	ldrb.w	r3, [sl]
 8006dfa:	2b2a      	cmp	r3, #42	; 0x2a
 8006dfc:	d015      	beq.n	8006e2a <_svfiprintf_r+0xf6>
 8006dfe:	9a07      	ldr	r2, [sp, #28]
 8006e00:	4654      	mov	r4, sl
 8006e02:	2000      	movs	r0, #0
 8006e04:	f04f 0c0a 	mov.w	ip, #10
 8006e08:	4621      	mov	r1, r4
 8006e0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e0e:	3b30      	subs	r3, #48	; 0x30
 8006e10:	2b09      	cmp	r3, #9
 8006e12:	d94e      	bls.n	8006eb2 <_svfiprintf_r+0x17e>
 8006e14:	b1b0      	cbz	r0, 8006e44 <_svfiprintf_r+0x110>
 8006e16:	9207      	str	r2, [sp, #28]
 8006e18:	e014      	b.n	8006e44 <_svfiprintf_r+0x110>
 8006e1a:	eba0 0308 	sub.w	r3, r0, r8
 8006e1e:	fa09 f303 	lsl.w	r3, r9, r3
 8006e22:	4313      	orrs	r3, r2
 8006e24:	9304      	str	r3, [sp, #16]
 8006e26:	46a2      	mov	sl, r4
 8006e28:	e7d2      	b.n	8006dd0 <_svfiprintf_r+0x9c>
 8006e2a:	9b03      	ldr	r3, [sp, #12]
 8006e2c:	1d19      	adds	r1, r3, #4
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	9103      	str	r1, [sp, #12]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	bfbb      	ittet	lt
 8006e36:	425b      	neglt	r3, r3
 8006e38:	f042 0202 	orrlt.w	r2, r2, #2
 8006e3c:	9307      	strge	r3, [sp, #28]
 8006e3e:	9307      	strlt	r3, [sp, #28]
 8006e40:	bfb8      	it	lt
 8006e42:	9204      	strlt	r2, [sp, #16]
 8006e44:	7823      	ldrb	r3, [r4, #0]
 8006e46:	2b2e      	cmp	r3, #46	; 0x2e
 8006e48:	d10c      	bne.n	8006e64 <_svfiprintf_r+0x130>
 8006e4a:	7863      	ldrb	r3, [r4, #1]
 8006e4c:	2b2a      	cmp	r3, #42	; 0x2a
 8006e4e:	d135      	bne.n	8006ebc <_svfiprintf_r+0x188>
 8006e50:	9b03      	ldr	r3, [sp, #12]
 8006e52:	1d1a      	adds	r2, r3, #4
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	9203      	str	r2, [sp, #12]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	bfb8      	it	lt
 8006e5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e60:	3402      	adds	r4, #2
 8006e62:	9305      	str	r3, [sp, #20]
 8006e64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006f30 <_svfiprintf_r+0x1fc>
 8006e68:	7821      	ldrb	r1, [r4, #0]
 8006e6a:	2203      	movs	r2, #3
 8006e6c:	4650      	mov	r0, sl
 8006e6e:	f7f9 f9e7 	bl	8000240 <memchr>
 8006e72:	b140      	cbz	r0, 8006e86 <_svfiprintf_r+0x152>
 8006e74:	2340      	movs	r3, #64	; 0x40
 8006e76:	eba0 000a 	sub.w	r0, r0, sl
 8006e7a:	fa03 f000 	lsl.w	r0, r3, r0
 8006e7e:	9b04      	ldr	r3, [sp, #16]
 8006e80:	4303      	orrs	r3, r0
 8006e82:	3401      	adds	r4, #1
 8006e84:	9304      	str	r3, [sp, #16]
 8006e86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e8a:	4826      	ldr	r0, [pc, #152]	; (8006f24 <_svfiprintf_r+0x1f0>)
 8006e8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e90:	2206      	movs	r2, #6
 8006e92:	f7f9 f9d5 	bl	8000240 <memchr>
 8006e96:	2800      	cmp	r0, #0
 8006e98:	d038      	beq.n	8006f0c <_svfiprintf_r+0x1d8>
 8006e9a:	4b23      	ldr	r3, [pc, #140]	; (8006f28 <_svfiprintf_r+0x1f4>)
 8006e9c:	bb1b      	cbnz	r3, 8006ee6 <_svfiprintf_r+0x1b2>
 8006e9e:	9b03      	ldr	r3, [sp, #12]
 8006ea0:	3307      	adds	r3, #7
 8006ea2:	f023 0307 	bic.w	r3, r3, #7
 8006ea6:	3308      	adds	r3, #8
 8006ea8:	9303      	str	r3, [sp, #12]
 8006eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eac:	4433      	add	r3, r6
 8006eae:	9309      	str	r3, [sp, #36]	; 0x24
 8006eb0:	e767      	b.n	8006d82 <_svfiprintf_r+0x4e>
 8006eb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006eb6:	460c      	mov	r4, r1
 8006eb8:	2001      	movs	r0, #1
 8006eba:	e7a5      	b.n	8006e08 <_svfiprintf_r+0xd4>
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	3401      	adds	r4, #1
 8006ec0:	9305      	str	r3, [sp, #20]
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	f04f 0c0a 	mov.w	ip, #10
 8006ec8:	4620      	mov	r0, r4
 8006eca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ece:	3a30      	subs	r2, #48	; 0x30
 8006ed0:	2a09      	cmp	r2, #9
 8006ed2:	d903      	bls.n	8006edc <_svfiprintf_r+0x1a8>
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d0c5      	beq.n	8006e64 <_svfiprintf_r+0x130>
 8006ed8:	9105      	str	r1, [sp, #20]
 8006eda:	e7c3      	b.n	8006e64 <_svfiprintf_r+0x130>
 8006edc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ee0:	4604      	mov	r4, r0
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e7f0      	b.n	8006ec8 <_svfiprintf_r+0x194>
 8006ee6:	ab03      	add	r3, sp, #12
 8006ee8:	9300      	str	r3, [sp, #0]
 8006eea:	462a      	mov	r2, r5
 8006eec:	4b0f      	ldr	r3, [pc, #60]	; (8006f2c <_svfiprintf_r+0x1f8>)
 8006eee:	a904      	add	r1, sp, #16
 8006ef0:	4638      	mov	r0, r7
 8006ef2:	f3af 8000 	nop.w
 8006ef6:	1c42      	adds	r2, r0, #1
 8006ef8:	4606      	mov	r6, r0
 8006efa:	d1d6      	bne.n	8006eaa <_svfiprintf_r+0x176>
 8006efc:	89ab      	ldrh	r3, [r5, #12]
 8006efe:	065b      	lsls	r3, r3, #25
 8006f00:	f53f af2c 	bmi.w	8006d5c <_svfiprintf_r+0x28>
 8006f04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f06:	b01d      	add	sp, #116	; 0x74
 8006f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f0c:	ab03      	add	r3, sp, #12
 8006f0e:	9300      	str	r3, [sp, #0]
 8006f10:	462a      	mov	r2, r5
 8006f12:	4b06      	ldr	r3, [pc, #24]	; (8006f2c <_svfiprintf_r+0x1f8>)
 8006f14:	a904      	add	r1, sp, #16
 8006f16:	4638      	mov	r0, r7
 8006f18:	f000 f9d4 	bl	80072c4 <_printf_i>
 8006f1c:	e7eb      	b.n	8006ef6 <_svfiprintf_r+0x1c2>
 8006f1e:	bf00      	nop
 8006f20:	08008349 	.word	0x08008349
 8006f24:	08008353 	.word	0x08008353
 8006f28:	00000000 	.word	0x00000000
 8006f2c:	08006c7d 	.word	0x08006c7d
 8006f30:	0800834f 	.word	0x0800834f

08006f34 <__sfputc_r>:
 8006f34:	6893      	ldr	r3, [r2, #8]
 8006f36:	3b01      	subs	r3, #1
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	b410      	push	{r4}
 8006f3c:	6093      	str	r3, [r2, #8]
 8006f3e:	da08      	bge.n	8006f52 <__sfputc_r+0x1e>
 8006f40:	6994      	ldr	r4, [r2, #24]
 8006f42:	42a3      	cmp	r3, r4
 8006f44:	db01      	blt.n	8006f4a <__sfputc_r+0x16>
 8006f46:	290a      	cmp	r1, #10
 8006f48:	d103      	bne.n	8006f52 <__sfputc_r+0x1e>
 8006f4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f4e:	f000 baef 	b.w	8007530 <__swbuf_r>
 8006f52:	6813      	ldr	r3, [r2, #0]
 8006f54:	1c58      	adds	r0, r3, #1
 8006f56:	6010      	str	r0, [r2, #0]
 8006f58:	7019      	strb	r1, [r3, #0]
 8006f5a:	4608      	mov	r0, r1
 8006f5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f60:	4770      	bx	lr

08006f62 <__sfputs_r>:
 8006f62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f64:	4606      	mov	r6, r0
 8006f66:	460f      	mov	r7, r1
 8006f68:	4614      	mov	r4, r2
 8006f6a:	18d5      	adds	r5, r2, r3
 8006f6c:	42ac      	cmp	r4, r5
 8006f6e:	d101      	bne.n	8006f74 <__sfputs_r+0x12>
 8006f70:	2000      	movs	r0, #0
 8006f72:	e007      	b.n	8006f84 <__sfputs_r+0x22>
 8006f74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f78:	463a      	mov	r2, r7
 8006f7a:	4630      	mov	r0, r6
 8006f7c:	f7ff ffda 	bl	8006f34 <__sfputc_r>
 8006f80:	1c43      	adds	r3, r0, #1
 8006f82:	d1f3      	bne.n	8006f6c <__sfputs_r+0xa>
 8006f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006f88 <_vfiprintf_r>:
 8006f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f8c:	460d      	mov	r5, r1
 8006f8e:	b09d      	sub	sp, #116	; 0x74
 8006f90:	4614      	mov	r4, r2
 8006f92:	4698      	mov	r8, r3
 8006f94:	4606      	mov	r6, r0
 8006f96:	b118      	cbz	r0, 8006fa0 <_vfiprintf_r+0x18>
 8006f98:	6983      	ldr	r3, [r0, #24]
 8006f9a:	b90b      	cbnz	r3, 8006fa0 <_vfiprintf_r+0x18>
 8006f9c:	f000 fcaa 	bl	80078f4 <__sinit>
 8006fa0:	4b89      	ldr	r3, [pc, #548]	; (80071c8 <_vfiprintf_r+0x240>)
 8006fa2:	429d      	cmp	r5, r3
 8006fa4:	d11b      	bne.n	8006fde <_vfiprintf_r+0x56>
 8006fa6:	6875      	ldr	r5, [r6, #4]
 8006fa8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006faa:	07d9      	lsls	r1, r3, #31
 8006fac:	d405      	bmi.n	8006fba <_vfiprintf_r+0x32>
 8006fae:	89ab      	ldrh	r3, [r5, #12]
 8006fb0:	059a      	lsls	r2, r3, #22
 8006fb2:	d402      	bmi.n	8006fba <_vfiprintf_r+0x32>
 8006fb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fb6:	f000 fd3b 	bl	8007a30 <__retarget_lock_acquire_recursive>
 8006fba:	89ab      	ldrh	r3, [r5, #12]
 8006fbc:	071b      	lsls	r3, r3, #28
 8006fbe:	d501      	bpl.n	8006fc4 <_vfiprintf_r+0x3c>
 8006fc0:	692b      	ldr	r3, [r5, #16]
 8006fc2:	b9eb      	cbnz	r3, 8007000 <_vfiprintf_r+0x78>
 8006fc4:	4629      	mov	r1, r5
 8006fc6:	4630      	mov	r0, r6
 8006fc8:	f000 fb04 	bl	80075d4 <__swsetup_r>
 8006fcc:	b1c0      	cbz	r0, 8007000 <_vfiprintf_r+0x78>
 8006fce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fd0:	07dc      	lsls	r4, r3, #31
 8006fd2:	d50e      	bpl.n	8006ff2 <_vfiprintf_r+0x6a>
 8006fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006fd8:	b01d      	add	sp, #116	; 0x74
 8006fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fde:	4b7b      	ldr	r3, [pc, #492]	; (80071cc <_vfiprintf_r+0x244>)
 8006fe0:	429d      	cmp	r5, r3
 8006fe2:	d101      	bne.n	8006fe8 <_vfiprintf_r+0x60>
 8006fe4:	68b5      	ldr	r5, [r6, #8]
 8006fe6:	e7df      	b.n	8006fa8 <_vfiprintf_r+0x20>
 8006fe8:	4b79      	ldr	r3, [pc, #484]	; (80071d0 <_vfiprintf_r+0x248>)
 8006fea:	429d      	cmp	r5, r3
 8006fec:	bf08      	it	eq
 8006fee:	68f5      	ldreq	r5, [r6, #12]
 8006ff0:	e7da      	b.n	8006fa8 <_vfiprintf_r+0x20>
 8006ff2:	89ab      	ldrh	r3, [r5, #12]
 8006ff4:	0598      	lsls	r0, r3, #22
 8006ff6:	d4ed      	bmi.n	8006fd4 <_vfiprintf_r+0x4c>
 8006ff8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ffa:	f000 fd1a 	bl	8007a32 <__retarget_lock_release_recursive>
 8006ffe:	e7e9      	b.n	8006fd4 <_vfiprintf_r+0x4c>
 8007000:	2300      	movs	r3, #0
 8007002:	9309      	str	r3, [sp, #36]	; 0x24
 8007004:	2320      	movs	r3, #32
 8007006:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800700a:	f8cd 800c 	str.w	r8, [sp, #12]
 800700e:	2330      	movs	r3, #48	; 0x30
 8007010:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80071d4 <_vfiprintf_r+0x24c>
 8007014:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007018:	f04f 0901 	mov.w	r9, #1
 800701c:	4623      	mov	r3, r4
 800701e:	469a      	mov	sl, r3
 8007020:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007024:	b10a      	cbz	r2, 800702a <_vfiprintf_r+0xa2>
 8007026:	2a25      	cmp	r2, #37	; 0x25
 8007028:	d1f9      	bne.n	800701e <_vfiprintf_r+0x96>
 800702a:	ebba 0b04 	subs.w	fp, sl, r4
 800702e:	d00b      	beq.n	8007048 <_vfiprintf_r+0xc0>
 8007030:	465b      	mov	r3, fp
 8007032:	4622      	mov	r2, r4
 8007034:	4629      	mov	r1, r5
 8007036:	4630      	mov	r0, r6
 8007038:	f7ff ff93 	bl	8006f62 <__sfputs_r>
 800703c:	3001      	adds	r0, #1
 800703e:	f000 80aa 	beq.w	8007196 <_vfiprintf_r+0x20e>
 8007042:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007044:	445a      	add	r2, fp
 8007046:	9209      	str	r2, [sp, #36]	; 0x24
 8007048:	f89a 3000 	ldrb.w	r3, [sl]
 800704c:	2b00      	cmp	r3, #0
 800704e:	f000 80a2 	beq.w	8007196 <_vfiprintf_r+0x20e>
 8007052:	2300      	movs	r3, #0
 8007054:	f04f 32ff 	mov.w	r2, #4294967295
 8007058:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800705c:	f10a 0a01 	add.w	sl, sl, #1
 8007060:	9304      	str	r3, [sp, #16]
 8007062:	9307      	str	r3, [sp, #28]
 8007064:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007068:	931a      	str	r3, [sp, #104]	; 0x68
 800706a:	4654      	mov	r4, sl
 800706c:	2205      	movs	r2, #5
 800706e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007072:	4858      	ldr	r0, [pc, #352]	; (80071d4 <_vfiprintf_r+0x24c>)
 8007074:	f7f9 f8e4 	bl	8000240 <memchr>
 8007078:	9a04      	ldr	r2, [sp, #16]
 800707a:	b9d8      	cbnz	r0, 80070b4 <_vfiprintf_r+0x12c>
 800707c:	06d1      	lsls	r1, r2, #27
 800707e:	bf44      	itt	mi
 8007080:	2320      	movmi	r3, #32
 8007082:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007086:	0713      	lsls	r3, r2, #28
 8007088:	bf44      	itt	mi
 800708a:	232b      	movmi	r3, #43	; 0x2b
 800708c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007090:	f89a 3000 	ldrb.w	r3, [sl]
 8007094:	2b2a      	cmp	r3, #42	; 0x2a
 8007096:	d015      	beq.n	80070c4 <_vfiprintf_r+0x13c>
 8007098:	9a07      	ldr	r2, [sp, #28]
 800709a:	4654      	mov	r4, sl
 800709c:	2000      	movs	r0, #0
 800709e:	f04f 0c0a 	mov.w	ip, #10
 80070a2:	4621      	mov	r1, r4
 80070a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070a8:	3b30      	subs	r3, #48	; 0x30
 80070aa:	2b09      	cmp	r3, #9
 80070ac:	d94e      	bls.n	800714c <_vfiprintf_r+0x1c4>
 80070ae:	b1b0      	cbz	r0, 80070de <_vfiprintf_r+0x156>
 80070b0:	9207      	str	r2, [sp, #28]
 80070b2:	e014      	b.n	80070de <_vfiprintf_r+0x156>
 80070b4:	eba0 0308 	sub.w	r3, r0, r8
 80070b8:	fa09 f303 	lsl.w	r3, r9, r3
 80070bc:	4313      	orrs	r3, r2
 80070be:	9304      	str	r3, [sp, #16]
 80070c0:	46a2      	mov	sl, r4
 80070c2:	e7d2      	b.n	800706a <_vfiprintf_r+0xe2>
 80070c4:	9b03      	ldr	r3, [sp, #12]
 80070c6:	1d19      	adds	r1, r3, #4
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	9103      	str	r1, [sp, #12]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	bfbb      	ittet	lt
 80070d0:	425b      	neglt	r3, r3
 80070d2:	f042 0202 	orrlt.w	r2, r2, #2
 80070d6:	9307      	strge	r3, [sp, #28]
 80070d8:	9307      	strlt	r3, [sp, #28]
 80070da:	bfb8      	it	lt
 80070dc:	9204      	strlt	r2, [sp, #16]
 80070de:	7823      	ldrb	r3, [r4, #0]
 80070e0:	2b2e      	cmp	r3, #46	; 0x2e
 80070e2:	d10c      	bne.n	80070fe <_vfiprintf_r+0x176>
 80070e4:	7863      	ldrb	r3, [r4, #1]
 80070e6:	2b2a      	cmp	r3, #42	; 0x2a
 80070e8:	d135      	bne.n	8007156 <_vfiprintf_r+0x1ce>
 80070ea:	9b03      	ldr	r3, [sp, #12]
 80070ec:	1d1a      	adds	r2, r3, #4
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	9203      	str	r2, [sp, #12]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	bfb8      	it	lt
 80070f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80070fa:	3402      	adds	r4, #2
 80070fc:	9305      	str	r3, [sp, #20]
 80070fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80071e4 <_vfiprintf_r+0x25c>
 8007102:	7821      	ldrb	r1, [r4, #0]
 8007104:	2203      	movs	r2, #3
 8007106:	4650      	mov	r0, sl
 8007108:	f7f9 f89a 	bl	8000240 <memchr>
 800710c:	b140      	cbz	r0, 8007120 <_vfiprintf_r+0x198>
 800710e:	2340      	movs	r3, #64	; 0x40
 8007110:	eba0 000a 	sub.w	r0, r0, sl
 8007114:	fa03 f000 	lsl.w	r0, r3, r0
 8007118:	9b04      	ldr	r3, [sp, #16]
 800711a:	4303      	orrs	r3, r0
 800711c:	3401      	adds	r4, #1
 800711e:	9304      	str	r3, [sp, #16]
 8007120:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007124:	482c      	ldr	r0, [pc, #176]	; (80071d8 <_vfiprintf_r+0x250>)
 8007126:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800712a:	2206      	movs	r2, #6
 800712c:	f7f9 f888 	bl	8000240 <memchr>
 8007130:	2800      	cmp	r0, #0
 8007132:	d03f      	beq.n	80071b4 <_vfiprintf_r+0x22c>
 8007134:	4b29      	ldr	r3, [pc, #164]	; (80071dc <_vfiprintf_r+0x254>)
 8007136:	bb1b      	cbnz	r3, 8007180 <_vfiprintf_r+0x1f8>
 8007138:	9b03      	ldr	r3, [sp, #12]
 800713a:	3307      	adds	r3, #7
 800713c:	f023 0307 	bic.w	r3, r3, #7
 8007140:	3308      	adds	r3, #8
 8007142:	9303      	str	r3, [sp, #12]
 8007144:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007146:	443b      	add	r3, r7
 8007148:	9309      	str	r3, [sp, #36]	; 0x24
 800714a:	e767      	b.n	800701c <_vfiprintf_r+0x94>
 800714c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007150:	460c      	mov	r4, r1
 8007152:	2001      	movs	r0, #1
 8007154:	e7a5      	b.n	80070a2 <_vfiprintf_r+0x11a>
 8007156:	2300      	movs	r3, #0
 8007158:	3401      	adds	r4, #1
 800715a:	9305      	str	r3, [sp, #20]
 800715c:	4619      	mov	r1, r3
 800715e:	f04f 0c0a 	mov.w	ip, #10
 8007162:	4620      	mov	r0, r4
 8007164:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007168:	3a30      	subs	r2, #48	; 0x30
 800716a:	2a09      	cmp	r2, #9
 800716c:	d903      	bls.n	8007176 <_vfiprintf_r+0x1ee>
 800716e:	2b00      	cmp	r3, #0
 8007170:	d0c5      	beq.n	80070fe <_vfiprintf_r+0x176>
 8007172:	9105      	str	r1, [sp, #20]
 8007174:	e7c3      	b.n	80070fe <_vfiprintf_r+0x176>
 8007176:	fb0c 2101 	mla	r1, ip, r1, r2
 800717a:	4604      	mov	r4, r0
 800717c:	2301      	movs	r3, #1
 800717e:	e7f0      	b.n	8007162 <_vfiprintf_r+0x1da>
 8007180:	ab03      	add	r3, sp, #12
 8007182:	9300      	str	r3, [sp, #0]
 8007184:	462a      	mov	r2, r5
 8007186:	4b16      	ldr	r3, [pc, #88]	; (80071e0 <_vfiprintf_r+0x258>)
 8007188:	a904      	add	r1, sp, #16
 800718a:	4630      	mov	r0, r6
 800718c:	f3af 8000 	nop.w
 8007190:	4607      	mov	r7, r0
 8007192:	1c78      	adds	r0, r7, #1
 8007194:	d1d6      	bne.n	8007144 <_vfiprintf_r+0x1bc>
 8007196:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007198:	07d9      	lsls	r1, r3, #31
 800719a:	d405      	bmi.n	80071a8 <_vfiprintf_r+0x220>
 800719c:	89ab      	ldrh	r3, [r5, #12]
 800719e:	059a      	lsls	r2, r3, #22
 80071a0:	d402      	bmi.n	80071a8 <_vfiprintf_r+0x220>
 80071a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071a4:	f000 fc45 	bl	8007a32 <__retarget_lock_release_recursive>
 80071a8:	89ab      	ldrh	r3, [r5, #12]
 80071aa:	065b      	lsls	r3, r3, #25
 80071ac:	f53f af12 	bmi.w	8006fd4 <_vfiprintf_r+0x4c>
 80071b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071b2:	e711      	b.n	8006fd8 <_vfiprintf_r+0x50>
 80071b4:	ab03      	add	r3, sp, #12
 80071b6:	9300      	str	r3, [sp, #0]
 80071b8:	462a      	mov	r2, r5
 80071ba:	4b09      	ldr	r3, [pc, #36]	; (80071e0 <_vfiprintf_r+0x258>)
 80071bc:	a904      	add	r1, sp, #16
 80071be:	4630      	mov	r0, r6
 80071c0:	f000 f880 	bl	80072c4 <_printf_i>
 80071c4:	e7e4      	b.n	8007190 <_vfiprintf_r+0x208>
 80071c6:	bf00      	nop
 80071c8:	0800839c 	.word	0x0800839c
 80071cc:	080083bc 	.word	0x080083bc
 80071d0:	0800837c 	.word	0x0800837c
 80071d4:	08008349 	.word	0x08008349
 80071d8:	08008353 	.word	0x08008353
 80071dc:	00000000 	.word	0x00000000
 80071e0:	08006f63 	.word	0x08006f63
 80071e4:	0800834f 	.word	0x0800834f

080071e8 <_printf_common>:
 80071e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071ec:	4616      	mov	r6, r2
 80071ee:	4699      	mov	r9, r3
 80071f0:	688a      	ldr	r2, [r1, #8]
 80071f2:	690b      	ldr	r3, [r1, #16]
 80071f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80071f8:	4293      	cmp	r3, r2
 80071fa:	bfb8      	it	lt
 80071fc:	4613      	movlt	r3, r2
 80071fe:	6033      	str	r3, [r6, #0]
 8007200:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007204:	4607      	mov	r7, r0
 8007206:	460c      	mov	r4, r1
 8007208:	b10a      	cbz	r2, 800720e <_printf_common+0x26>
 800720a:	3301      	adds	r3, #1
 800720c:	6033      	str	r3, [r6, #0]
 800720e:	6823      	ldr	r3, [r4, #0]
 8007210:	0699      	lsls	r1, r3, #26
 8007212:	bf42      	ittt	mi
 8007214:	6833      	ldrmi	r3, [r6, #0]
 8007216:	3302      	addmi	r3, #2
 8007218:	6033      	strmi	r3, [r6, #0]
 800721a:	6825      	ldr	r5, [r4, #0]
 800721c:	f015 0506 	ands.w	r5, r5, #6
 8007220:	d106      	bne.n	8007230 <_printf_common+0x48>
 8007222:	f104 0a19 	add.w	sl, r4, #25
 8007226:	68e3      	ldr	r3, [r4, #12]
 8007228:	6832      	ldr	r2, [r6, #0]
 800722a:	1a9b      	subs	r3, r3, r2
 800722c:	42ab      	cmp	r3, r5
 800722e:	dc26      	bgt.n	800727e <_printf_common+0x96>
 8007230:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007234:	1e13      	subs	r3, r2, #0
 8007236:	6822      	ldr	r2, [r4, #0]
 8007238:	bf18      	it	ne
 800723a:	2301      	movne	r3, #1
 800723c:	0692      	lsls	r2, r2, #26
 800723e:	d42b      	bmi.n	8007298 <_printf_common+0xb0>
 8007240:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007244:	4649      	mov	r1, r9
 8007246:	4638      	mov	r0, r7
 8007248:	47c0      	blx	r8
 800724a:	3001      	adds	r0, #1
 800724c:	d01e      	beq.n	800728c <_printf_common+0xa4>
 800724e:	6823      	ldr	r3, [r4, #0]
 8007250:	68e5      	ldr	r5, [r4, #12]
 8007252:	6832      	ldr	r2, [r6, #0]
 8007254:	f003 0306 	and.w	r3, r3, #6
 8007258:	2b04      	cmp	r3, #4
 800725a:	bf08      	it	eq
 800725c:	1aad      	subeq	r5, r5, r2
 800725e:	68a3      	ldr	r3, [r4, #8]
 8007260:	6922      	ldr	r2, [r4, #16]
 8007262:	bf0c      	ite	eq
 8007264:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007268:	2500      	movne	r5, #0
 800726a:	4293      	cmp	r3, r2
 800726c:	bfc4      	itt	gt
 800726e:	1a9b      	subgt	r3, r3, r2
 8007270:	18ed      	addgt	r5, r5, r3
 8007272:	2600      	movs	r6, #0
 8007274:	341a      	adds	r4, #26
 8007276:	42b5      	cmp	r5, r6
 8007278:	d11a      	bne.n	80072b0 <_printf_common+0xc8>
 800727a:	2000      	movs	r0, #0
 800727c:	e008      	b.n	8007290 <_printf_common+0xa8>
 800727e:	2301      	movs	r3, #1
 8007280:	4652      	mov	r2, sl
 8007282:	4649      	mov	r1, r9
 8007284:	4638      	mov	r0, r7
 8007286:	47c0      	blx	r8
 8007288:	3001      	adds	r0, #1
 800728a:	d103      	bne.n	8007294 <_printf_common+0xac>
 800728c:	f04f 30ff 	mov.w	r0, #4294967295
 8007290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007294:	3501      	adds	r5, #1
 8007296:	e7c6      	b.n	8007226 <_printf_common+0x3e>
 8007298:	18e1      	adds	r1, r4, r3
 800729a:	1c5a      	adds	r2, r3, #1
 800729c:	2030      	movs	r0, #48	; 0x30
 800729e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072a2:	4422      	add	r2, r4
 80072a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072ac:	3302      	adds	r3, #2
 80072ae:	e7c7      	b.n	8007240 <_printf_common+0x58>
 80072b0:	2301      	movs	r3, #1
 80072b2:	4622      	mov	r2, r4
 80072b4:	4649      	mov	r1, r9
 80072b6:	4638      	mov	r0, r7
 80072b8:	47c0      	blx	r8
 80072ba:	3001      	adds	r0, #1
 80072bc:	d0e6      	beq.n	800728c <_printf_common+0xa4>
 80072be:	3601      	adds	r6, #1
 80072c0:	e7d9      	b.n	8007276 <_printf_common+0x8e>
	...

080072c4 <_printf_i>:
 80072c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072c8:	7e0f      	ldrb	r7, [r1, #24]
 80072ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80072cc:	2f78      	cmp	r7, #120	; 0x78
 80072ce:	4691      	mov	r9, r2
 80072d0:	4680      	mov	r8, r0
 80072d2:	460c      	mov	r4, r1
 80072d4:	469a      	mov	sl, r3
 80072d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80072da:	d807      	bhi.n	80072ec <_printf_i+0x28>
 80072dc:	2f62      	cmp	r7, #98	; 0x62
 80072de:	d80a      	bhi.n	80072f6 <_printf_i+0x32>
 80072e0:	2f00      	cmp	r7, #0
 80072e2:	f000 80d8 	beq.w	8007496 <_printf_i+0x1d2>
 80072e6:	2f58      	cmp	r7, #88	; 0x58
 80072e8:	f000 80a3 	beq.w	8007432 <_printf_i+0x16e>
 80072ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80072f4:	e03a      	b.n	800736c <_printf_i+0xa8>
 80072f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80072fa:	2b15      	cmp	r3, #21
 80072fc:	d8f6      	bhi.n	80072ec <_printf_i+0x28>
 80072fe:	a101      	add	r1, pc, #4	; (adr r1, 8007304 <_printf_i+0x40>)
 8007300:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007304:	0800735d 	.word	0x0800735d
 8007308:	08007371 	.word	0x08007371
 800730c:	080072ed 	.word	0x080072ed
 8007310:	080072ed 	.word	0x080072ed
 8007314:	080072ed 	.word	0x080072ed
 8007318:	080072ed 	.word	0x080072ed
 800731c:	08007371 	.word	0x08007371
 8007320:	080072ed 	.word	0x080072ed
 8007324:	080072ed 	.word	0x080072ed
 8007328:	080072ed 	.word	0x080072ed
 800732c:	080072ed 	.word	0x080072ed
 8007330:	0800747d 	.word	0x0800747d
 8007334:	080073a1 	.word	0x080073a1
 8007338:	0800745f 	.word	0x0800745f
 800733c:	080072ed 	.word	0x080072ed
 8007340:	080072ed 	.word	0x080072ed
 8007344:	0800749f 	.word	0x0800749f
 8007348:	080072ed 	.word	0x080072ed
 800734c:	080073a1 	.word	0x080073a1
 8007350:	080072ed 	.word	0x080072ed
 8007354:	080072ed 	.word	0x080072ed
 8007358:	08007467 	.word	0x08007467
 800735c:	682b      	ldr	r3, [r5, #0]
 800735e:	1d1a      	adds	r2, r3, #4
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	602a      	str	r2, [r5, #0]
 8007364:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007368:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800736c:	2301      	movs	r3, #1
 800736e:	e0a3      	b.n	80074b8 <_printf_i+0x1f4>
 8007370:	6820      	ldr	r0, [r4, #0]
 8007372:	6829      	ldr	r1, [r5, #0]
 8007374:	0606      	lsls	r6, r0, #24
 8007376:	f101 0304 	add.w	r3, r1, #4
 800737a:	d50a      	bpl.n	8007392 <_printf_i+0xce>
 800737c:	680e      	ldr	r6, [r1, #0]
 800737e:	602b      	str	r3, [r5, #0]
 8007380:	2e00      	cmp	r6, #0
 8007382:	da03      	bge.n	800738c <_printf_i+0xc8>
 8007384:	232d      	movs	r3, #45	; 0x2d
 8007386:	4276      	negs	r6, r6
 8007388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800738c:	485e      	ldr	r0, [pc, #376]	; (8007508 <_printf_i+0x244>)
 800738e:	230a      	movs	r3, #10
 8007390:	e019      	b.n	80073c6 <_printf_i+0x102>
 8007392:	680e      	ldr	r6, [r1, #0]
 8007394:	602b      	str	r3, [r5, #0]
 8007396:	f010 0f40 	tst.w	r0, #64	; 0x40
 800739a:	bf18      	it	ne
 800739c:	b236      	sxthne	r6, r6
 800739e:	e7ef      	b.n	8007380 <_printf_i+0xbc>
 80073a0:	682b      	ldr	r3, [r5, #0]
 80073a2:	6820      	ldr	r0, [r4, #0]
 80073a4:	1d19      	adds	r1, r3, #4
 80073a6:	6029      	str	r1, [r5, #0]
 80073a8:	0601      	lsls	r1, r0, #24
 80073aa:	d501      	bpl.n	80073b0 <_printf_i+0xec>
 80073ac:	681e      	ldr	r6, [r3, #0]
 80073ae:	e002      	b.n	80073b6 <_printf_i+0xf2>
 80073b0:	0646      	lsls	r6, r0, #25
 80073b2:	d5fb      	bpl.n	80073ac <_printf_i+0xe8>
 80073b4:	881e      	ldrh	r6, [r3, #0]
 80073b6:	4854      	ldr	r0, [pc, #336]	; (8007508 <_printf_i+0x244>)
 80073b8:	2f6f      	cmp	r7, #111	; 0x6f
 80073ba:	bf0c      	ite	eq
 80073bc:	2308      	moveq	r3, #8
 80073be:	230a      	movne	r3, #10
 80073c0:	2100      	movs	r1, #0
 80073c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80073c6:	6865      	ldr	r5, [r4, #4]
 80073c8:	60a5      	str	r5, [r4, #8]
 80073ca:	2d00      	cmp	r5, #0
 80073cc:	bfa2      	ittt	ge
 80073ce:	6821      	ldrge	r1, [r4, #0]
 80073d0:	f021 0104 	bicge.w	r1, r1, #4
 80073d4:	6021      	strge	r1, [r4, #0]
 80073d6:	b90e      	cbnz	r6, 80073dc <_printf_i+0x118>
 80073d8:	2d00      	cmp	r5, #0
 80073da:	d04d      	beq.n	8007478 <_printf_i+0x1b4>
 80073dc:	4615      	mov	r5, r2
 80073de:	fbb6 f1f3 	udiv	r1, r6, r3
 80073e2:	fb03 6711 	mls	r7, r3, r1, r6
 80073e6:	5dc7      	ldrb	r7, [r0, r7]
 80073e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80073ec:	4637      	mov	r7, r6
 80073ee:	42bb      	cmp	r3, r7
 80073f0:	460e      	mov	r6, r1
 80073f2:	d9f4      	bls.n	80073de <_printf_i+0x11a>
 80073f4:	2b08      	cmp	r3, #8
 80073f6:	d10b      	bne.n	8007410 <_printf_i+0x14c>
 80073f8:	6823      	ldr	r3, [r4, #0]
 80073fa:	07de      	lsls	r6, r3, #31
 80073fc:	d508      	bpl.n	8007410 <_printf_i+0x14c>
 80073fe:	6923      	ldr	r3, [r4, #16]
 8007400:	6861      	ldr	r1, [r4, #4]
 8007402:	4299      	cmp	r1, r3
 8007404:	bfde      	ittt	le
 8007406:	2330      	movle	r3, #48	; 0x30
 8007408:	f805 3c01 	strble.w	r3, [r5, #-1]
 800740c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007410:	1b52      	subs	r2, r2, r5
 8007412:	6122      	str	r2, [r4, #16]
 8007414:	f8cd a000 	str.w	sl, [sp]
 8007418:	464b      	mov	r3, r9
 800741a:	aa03      	add	r2, sp, #12
 800741c:	4621      	mov	r1, r4
 800741e:	4640      	mov	r0, r8
 8007420:	f7ff fee2 	bl	80071e8 <_printf_common>
 8007424:	3001      	adds	r0, #1
 8007426:	d14c      	bne.n	80074c2 <_printf_i+0x1fe>
 8007428:	f04f 30ff 	mov.w	r0, #4294967295
 800742c:	b004      	add	sp, #16
 800742e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007432:	4835      	ldr	r0, [pc, #212]	; (8007508 <_printf_i+0x244>)
 8007434:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007438:	6829      	ldr	r1, [r5, #0]
 800743a:	6823      	ldr	r3, [r4, #0]
 800743c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007440:	6029      	str	r1, [r5, #0]
 8007442:	061d      	lsls	r5, r3, #24
 8007444:	d514      	bpl.n	8007470 <_printf_i+0x1ac>
 8007446:	07df      	lsls	r7, r3, #31
 8007448:	bf44      	itt	mi
 800744a:	f043 0320 	orrmi.w	r3, r3, #32
 800744e:	6023      	strmi	r3, [r4, #0]
 8007450:	b91e      	cbnz	r6, 800745a <_printf_i+0x196>
 8007452:	6823      	ldr	r3, [r4, #0]
 8007454:	f023 0320 	bic.w	r3, r3, #32
 8007458:	6023      	str	r3, [r4, #0]
 800745a:	2310      	movs	r3, #16
 800745c:	e7b0      	b.n	80073c0 <_printf_i+0xfc>
 800745e:	6823      	ldr	r3, [r4, #0]
 8007460:	f043 0320 	orr.w	r3, r3, #32
 8007464:	6023      	str	r3, [r4, #0]
 8007466:	2378      	movs	r3, #120	; 0x78
 8007468:	4828      	ldr	r0, [pc, #160]	; (800750c <_printf_i+0x248>)
 800746a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800746e:	e7e3      	b.n	8007438 <_printf_i+0x174>
 8007470:	0659      	lsls	r1, r3, #25
 8007472:	bf48      	it	mi
 8007474:	b2b6      	uxthmi	r6, r6
 8007476:	e7e6      	b.n	8007446 <_printf_i+0x182>
 8007478:	4615      	mov	r5, r2
 800747a:	e7bb      	b.n	80073f4 <_printf_i+0x130>
 800747c:	682b      	ldr	r3, [r5, #0]
 800747e:	6826      	ldr	r6, [r4, #0]
 8007480:	6961      	ldr	r1, [r4, #20]
 8007482:	1d18      	adds	r0, r3, #4
 8007484:	6028      	str	r0, [r5, #0]
 8007486:	0635      	lsls	r5, r6, #24
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	d501      	bpl.n	8007490 <_printf_i+0x1cc>
 800748c:	6019      	str	r1, [r3, #0]
 800748e:	e002      	b.n	8007496 <_printf_i+0x1d2>
 8007490:	0670      	lsls	r0, r6, #25
 8007492:	d5fb      	bpl.n	800748c <_printf_i+0x1c8>
 8007494:	8019      	strh	r1, [r3, #0]
 8007496:	2300      	movs	r3, #0
 8007498:	6123      	str	r3, [r4, #16]
 800749a:	4615      	mov	r5, r2
 800749c:	e7ba      	b.n	8007414 <_printf_i+0x150>
 800749e:	682b      	ldr	r3, [r5, #0]
 80074a0:	1d1a      	adds	r2, r3, #4
 80074a2:	602a      	str	r2, [r5, #0]
 80074a4:	681d      	ldr	r5, [r3, #0]
 80074a6:	6862      	ldr	r2, [r4, #4]
 80074a8:	2100      	movs	r1, #0
 80074aa:	4628      	mov	r0, r5
 80074ac:	f7f8 fec8 	bl	8000240 <memchr>
 80074b0:	b108      	cbz	r0, 80074b6 <_printf_i+0x1f2>
 80074b2:	1b40      	subs	r0, r0, r5
 80074b4:	6060      	str	r0, [r4, #4]
 80074b6:	6863      	ldr	r3, [r4, #4]
 80074b8:	6123      	str	r3, [r4, #16]
 80074ba:	2300      	movs	r3, #0
 80074bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074c0:	e7a8      	b.n	8007414 <_printf_i+0x150>
 80074c2:	6923      	ldr	r3, [r4, #16]
 80074c4:	462a      	mov	r2, r5
 80074c6:	4649      	mov	r1, r9
 80074c8:	4640      	mov	r0, r8
 80074ca:	47d0      	blx	sl
 80074cc:	3001      	adds	r0, #1
 80074ce:	d0ab      	beq.n	8007428 <_printf_i+0x164>
 80074d0:	6823      	ldr	r3, [r4, #0]
 80074d2:	079b      	lsls	r3, r3, #30
 80074d4:	d413      	bmi.n	80074fe <_printf_i+0x23a>
 80074d6:	68e0      	ldr	r0, [r4, #12]
 80074d8:	9b03      	ldr	r3, [sp, #12]
 80074da:	4298      	cmp	r0, r3
 80074dc:	bfb8      	it	lt
 80074de:	4618      	movlt	r0, r3
 80074e0:	e7a4      	b.n	800742c <_printf_i+0x168>
 80074e2:	2301      	movs	r3, #1
 80074e4:	4632      	mov	r2, r6
 80074e6:	4649      	mov	r1, r9
 80074e8:	4640      	mov	r0, r8
 80074ea:	47d0      	blx	sl
 80074ec:	3001      	adds	r0, #1
 80074ee:	d09b      	beq.n	8007428 <_printf_i+0x164>
 80074f0:	3501      	adds	r5, #1
 80074f2:	68e3      	ldr	r3, [r4, #12]
 80074f4:	9903      	ldr	r1, [sp, #12]
 80074f6:	1a5b      	subs	r3, r3, r1
 80074f8:	42ab      	cmp	r3, r5
 80074fa:	dcf2      	bgt.n	80074e2 <_printf_i+0x21e>
 80074fc:	e7eb      	b.n	80074d6 <_printf_i+0x212>
 80074fe:	2500      	movs	r5, #0
 8007500:	f104 0619 	add.w	r6, r4, #25
 8007504:	e7f5      	b.n	80074f2 <_printf_i+0x22e>
 8007506:	bf00      	nop
 8007508:	0800835a 	.word	0x0800835a
 800750c:	0800836b 	.word	0x0800836b

08007510 <_sbrk_r>:
 8007510:	b538      	push	{r3, r4, r5, lr}
 8007512:	4d06      	ldr	r5, [pc, #24]	; (800752c <_sbrk_r+0x1c>)
 8007514:	2300      	movs	r3, #0
 8007516:	4604      	mov	r4, r0
 8007518:	4608      	mov	r0, r1
 800751a:	602b      	str	r3, [r5, #0]
 800751c:	f7f9 fd38 	bl	8000f90 <_sbrk>
 8007520:	1c43      	adds	r3, r0, #1
 8007522:	d102      	bne.n	800752a <_sbrk_r+0x1a>
 8007524:	682b      	ldr	r3, [r5, #0]
 8007526:	b103      	cbz	r3, 800752a <_sbrk_r+0x1a>
 8007528:	6023      	str	r3, [r4, #0]
 800752a:	bd38      	pop	{r3, r4, r5, pc}
 800752c:	20000284 	.word	0x20000284

08007530 <__swbuf_r>:
 8007530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007532:	460e      	mov	r6, r1
 8007534:	4614      	mov	r4, r2
 8007536:	4605      	mov	r5, r0
 8007538:	b118      	cbz	r0, 8007542 <__swbuf_r+0x12>
 800753a:	6983      	ldr	r3, [r0, #24]
 800753c:	b90b      	cbnz	r3, 8007542 <__swbuf_r+0x12>
 800753e:	f000 f9d9 	bl	80078f4 <__sinit>
 8007542:	4b21      	ldr	r3, [pc, #132]	; (80075c8 <__swbuf_r+0x98>)
 8007544:	429c      	cmp	r4, r3
 8007546:	d12b      	bne.n	80075a0 <__swbuf_r+0x70>
 8007548:	686c      	ldr	r4, [r5, #4]
 800754a:	69a3      	ldr	r3, [r4, #24]
 800754c:	60a3      	str	r3, [r4, #8]
 800754e:	89a3      	ldrh	r3, [r4, #12]
 8007550:	071a      	lsls	r2, r3, #28
 8007552:	d52f      	bpl.n	80075b4 <__swbuf_r+0x84>
 8007554:	6923      	ldr	r3, [r4, #16]
 8007556:	b36b      	cbz	r3, 80075b4 <__swbuf_r+0x84>
 8007558:	6923      	ldr	r3, [r4, #16]
 800755a:	6820      	ldr	r0, [r4, #0]
 800755c:	1ac0      	subs	r0, r0, r3
 800755e:	6963      	ldr	r3, [r4, #20]
 8007560:	b2f6      	uxtb	r6, r6
 8007562:	4283      	cmp	r3, r0
 8007564:	4637      	mov	r7, r6
 8007566:	dc04      	bgt.n	8007572 <__swbuf_r+0x42>
 8007568:	4621      	mov	r1, r4
 800756a:	4628      	mov	r0, r5
 800756c:	f000 f92e 	bl	80077cc <_fflush_r>
 8007570:	bb30      	cbnz	r0, 80075c0 <__swbuf_r+0x90>
 8007572:	68a3      	ldr	r3, [r4, #8]
 8007574:	3b01      	subs	r3, #1
 8007576:	60a3      	str	r3, [r4, #8]
 8007578:	6823      	ldr	r3, [r4, #0]
 800757a:	1c5a      	adds	r2, r3, #1
 800757c:	6022      	str	r2, [r4, #0]
 800757e:	701e      	strb	r6, [r3, #0]
 8007580:	6963      	ldr	r3, [r4, #20]
 8007582:	3001      	adds	r0, #1
 8007584:	4283      	cmp	r3, r0
 8007586:	d004      	beq.n	8007592 <__swbuf_r+0x62>
 8007588:	89a3      	ldrh	r3, [r4, #12]
 800758a:	07db      	lsls	r3, r3, #31
 800758c:	d506      	bpl.n	800759c <__swbuf_r+0x6c>
 800758e:	2e0a      	cmp	r6, #10
 8007590:	d104      	bne.n	800759c <__swbuf_r+0x6c>
 8007592:	4621      	mov	r1, r4
 8007594:	4628      	mov	r0, r5
 8007596:	f000 f919 	bl	80077cc <_fflush_r>
 800759a:	b988      	cbnz	r0, 80075c0 <__swbuf_r+0x90>
 800759c:	4638      	mov	r0, r7
 800759e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075a0:	4b0a      	ldr	r3, [pc, #40]	; (80075cc <__swbuf_r+0x9c>)
 80075a2:	429c      	cmp	r4, r3
 80075a4:	d101      	bne.n	80075aa <__swbuf_r+0x7a>
 80075a6:	68ac      	ldr	r4, [r5, #8]
 80075a8:	e7cf      	b.n	800754a <__swbuf_r+0x1a>
 80075aa:	4b09      	ldr	r3, [pc, #36]	; (80075d0 <__swbuf_r+0xa0>)
 80075ac:	429c      	cmp	r4, r3
 80075ae:	bf08      	it	eq
 80075b0:	68ec      	ldreq	r4, [r5, #12]
 80075b2:	e7ca      	b.n	800754a <__swbuf_r+0x1a>
 80075b4:	4621      	mov	r1, r4
 80075b6:	4628      	mov	r0, r5
 80075b8:	f000 f80c 	bl	80075d4 <__swsetup_r>
 80075bc:	2800      	cmp	r0, #0
 80075be:	d0cb      	beq.n	8007558 <__swbuf_r+0x28>
 80075c0:	f04f 37ff 	mov.w	r7, #4294967295
 80075c4:	e7ea      	b.n	800759c <__swbuf_r+0x6c>
 80075c6:	bf00      	nop
 80075c8:	0800839c 	.word	0x0800839c
 80075cc:	080083bc 	.word	0x080083bc
 80075d0:	0800837c 	.word	0x0800837c

080075d4 <__swsetup_r>:
 80075d4:	4b32      	ldr	r3, [pc, #200]	; (80076a0 <__swsetup_r+0xcc>)
 80075d6:	b570      	push	{r4, r5, r6, lr}
 80075d8:	681d      	ldr	r5, [r3, #0]
 80075da:	4606      	mov	r6, r0
 80075dc:	460c      	mov	r4, r1
 80075de:	b125      	cbz	r5, 80075ea <__swsetup_r+0x16>
 80075e0:	69ab      	ldr	r3, [r5, #24]
 80075e2:	b913      	cbnz	r3, 80075ea <__swsetup_r+0x16>
 80075e4:	4628      	mov	r0, r5
 80075e6:	f000 f985 	bl	80078f4 <__sinit>
 80075ea:	4b2e      	ldr	r3, [pc, #184]	; (80076a4 <__swsetup_r+0xd0>)
 80075ec:	429c      	cmp	r4, r3
 80075ee:	d10f      	bne.n	8007610 <__swsetup_r+0x3c>
 80075f0:	686c      	ldr	r4, [r5, #4]
 80075f2:	89a3      	ldrh	r3, [r4, #12]
 80075f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80075f8:	0719      	lsls	r1, r3, #28
 80075fa:	d42c      	bmi.n	8007656 <__swsetup_r+0x82>
 80075fc:	06dd      	lsls	r5, r3, #27
 80075fe:	d411      	bmi.n	8007624 <__swsetup_r+0x50>
 8007600:	2309      	movs	r3, #9
 8007602:	6033      	str	r3, [r6, #0]
 8007604:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007608:	81a3      	strh	r3, [r4, #12]
 800760a:	f04f 30ff 	mov.w	r0, #4294967295
 800760e:	e03e      	b.n	800768e <__swsetup_r+0xba>
 8007610:	4b25      	ldr	r3, [pc, #148]	; (80076a8 <__swsetup_r+0xd4>)
 8007612:	429c      	cmp	r4, r3
 8007614:	d101      	bne.n	800761a <__swsetup_r+0x46>
 8007616:	68ac      	ldr	r4, [r5, #8]
 8007618:	e7eb      	b.n	80075f2 <__swsetup_r+0x1e>
 800761a:	4b24      	ldr	r3, [pc, #144]	; (80076ac <__swsetup_r+0xd8>)
 800761c:	429c      	cmp	r4, r3
 800761e:	bf08      	it	eq
 8007620:	68ec      	ldreq	r4, [r5, #12]
 8007622:	e7e6      	b.n	80075f2 <__swsetup_r+0x1e>
 8007624:	0758      	lsls	r0, r3, #29
 8007626:	d512      	bpl.n	800764e <__swsetup_r+0x7a>
 8007628:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800762a:	b141      	cbz	r1, 800763e <__swsetup_r+0x6a>
 800762c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007630:	4299      	cmp	r1, r3
 8007632:	d002      	beq.n	800763a <__swsetup_r+0x66>
 8007634:	4630      	mov	r0, r6
 8007636:	f7ff fa41 	bl	8006abc <_free_r>
 800763a:	2300      	movs	r3, #0
 800763c:	6363      	str	r3, [r4, #52]	; 0x34
 800763e:	89a3      	ldrh	r3, [r4, #12]
 8007640:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007644:	81a3      	strh	r3, [r4, #12]
 8007646:	2300      	movs	r3, #0
 8007648:	6063      	str	r3, [r4, #4]
 800764a:	6923      	ldr	r3, [r4, #16]
 800764c:	6023      	str	r3, [r4, #0]
 800764e:	89a3      	ldrh	r3, [r4, #12]
 8007650:	f043 0308 	orr.w	r3, r3, #8
 8007654:	81a3      	strh	r3, [r4, #12]
 8007656:	6923      	ldr	r3, [r4, #16]
 8007658:	b94b      	cbnz	r3, 800766e <__swsetup_r+0x9a>
 800765a:	89a3      	ldrh	r3, [r4, #12]
 800765c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007660:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007664:	d003      	beq.n	800766e <__swsetup_r+0x9a>
 8007666:	4621      	mov	r1, r4
 8007668:	4630      	mov	r0, r6
 800766a:	f000 fa09 	bl	8007a80 <__smakebuf_r>
 800766e:	89a0      	ldrh	r0, [r4, #12]
 8007670:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007674:	f010 0301 	ands.w	r3, r0, #1
 8007678:	d00a      	beq.n	8007690 <__swsetup_r+0xbc>
 800767a:	2300      	movs	r3, #0
 800767c:	60a3      	str	r3, [r4, #8]
 800767e:	6963      	ldr	r3, [r4, #20]
 8007680:	425b      	negs	r3, r3
 8007682:	61a3      	str	r3, [r4, #24]
 8007684:	6923      	ldr	r3, [r4, #16]
 8007686:	b943      	cbnz	r3, 800769a <__swsetup_r+0xc6>
 8007688:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800768c:	d1ba      	bne.n	8007604 <__swsetup_r+0x30>
 800768e:	bd70      	pop	{r4, r5, r6, pc}
 8007690:	0781      	lsls	r1, r0, #30
 8007692:	bf58      	it	pl
 8007694:	6963      	ldrpl	r3, [r4, #20]
 8007696:	60a3      	str	r3, [r4, #8]
 8007698:	e7f4      	b.n	8007684 <__swsetup_r+0xb0>
 800769a:	2000      	movs	r0, #0
 800769c:	e7f7      	b.n	800768e <__swsetup_r+0xba>
 800769e:	bf00      	nop
 80076a0:	2000000c 	.word	0x2000000c
 80076a4:	0800839c 	.word	0x0800839c
 80076a8:	080083bc 	.word	0x080083bc
 80076ac:	0800837c 	.word	0x0800837c

080076b0 <abort>:
 80076b0:	b508      	push	{r3, lr}
 80076b2:	2006      	movs	r0, #6
 80076b4:	f000 fab0 	bl	8007c18 <raise>
 80076b8:	2001      	movs	r0, #1
 80076ba:	f7f9 fbf1 	bl	8000ea0 <_exit>
	...

080076c0 <__sflush_r>:
 80076c0:	898a      	ldrh	r2, [r1, #12]
 80076c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076c6:	4605      	mov	r5, r0
 80076c8:	0710      	lsls	r0, r2, #28
 80076ca:	460c      	mov	r4, r1
 80076cc:	d458      	bmi.n	8007780 <__sflush_r+0xc0>
 80076ce:	684b      	ldr	r3, [r1, #4]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	dc05      	bgt.n	80076e0 <__sflush_r+0x20>
 80076d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	dc02      	bgt.n	80076e0 <__sflush_r+0x20>
 80076da:	2000      	movs	r0, #0
 80076dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076e2:	2e00      	cmp	r6, #0
 80076e4:	d0f9      	beq.n	80076da <__sflush_r+0x1a>
 80076e6:	2300      	movs	r3, #0
 80076e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80076ec:	682f      	ldr	r7, [r5, #0]
 80076ee:	602b      	str	r3, [r5, #0]
 80076f0:	d032      	beq.n	8007758 <__sflush_r+0x98>
 80076f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80076f4:	89a3      	ldrh	r3, [r4, #12]
 80076f6:	075a      	lsls	r2, r3, #29
 80076f8:	d505      	bpl.n	8007706 <__sflush_r+0x46>
 80076fa:	6863      	ldr	r3, [r4, #4]
 80076fc:	1ac0      	subs	r0, r0, r3
 80076fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007700:	b10b      	cbz	r3, 8007706 <__sflush_r+0x46>
 8007702:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007704:	1ac0      	subs	r0, r0, r3
 8007706:	2300      	movs	r3, #0
 8007708:	4602      	mov	r2, r0
 800770a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800770c:	6a21      	ldr	r1, [r4, #32]
 800770e:	4628      	mov	r0, r5
 8007710:	47b0      	blx	r6
 8007712:	1c43      	adds	r3, r0, #1
 8007714:	89a3      	ldrh	r3, [r4, #12]
 8007716:	d106      	bne.n	8007726 <__sflush_r+0x66>
 8007718:	6829      	ldr	r1, [r5, #0]
 800771a:	291d      	cmp	r1, #29
 800771c:	d82c      	bhi.n	8007778 <__sflush_r+0xb8>
 800771e:	4a2a      	ldr	r2, [pc, #168]	; (80077c8 <__sflush_r+0x108>)
 8007720:	40ca      	lsrs	r2, r1
 8007722:	07d6      	lsls	r6, r2, #31
 8007724:	d528      	bpl.n	8007778 <__sflush_r+0xb8>
 8007726:	2200      	movs	r2, #0
 8007728:	6062      	str	r2, [r4, #4]
 800772a:	04d9      	lsls	r1, r3, #19
 800772c:	6922      	ldr	r2, [r4, #16]
 800772e:	6022      	str	r2, [r4, #0]
 8007730:	d504      	bpl.n	800773c <__sflush_r+0x7c>
 8007732:	1c42      	adds	r2, r0, #1
 8007734:	d101      	bne.n	800773a <__sflush_r+0x7a>
 8007736:	682b      	ldr	r3, [r5, #0]
 8007738:	b903      	cbnz	r3, 800773c <__sflush_r+0x7c>
 800773a:	6560      	str	r0, [r4, #84]	; 0x54
 800773c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800773e:	602f      	str	r7, [r5, #0]
 8007740:	2900      	cmp	r1, #0
 8007742:	d0ca      	beq.n	80076da <__sflush_r+0x1a>
 8007744:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007748:	4299      	cmp	r1, r3
 800774a:	d002      	beq.n	8007752 <__sflush_r+0x92>
 800774c:	4628      	mov	r0, r5
 800774e:	f7ff f9b5 	bl	8006abc <_free_r>
 8007752:	2000      	movs	r0, #0
 8007754:	6360      	str	r0, [r4, #52]	; 0x34
 8007756:	e7c1      	b.n	80076dc <__sflush_r+0x1c>
 8007758:	6a21      	ldr	r1, [r4, #32]
 800775a:	2301      	movs	r3, #1
 800775c:	4628      	mov	r0, r5
 800775e:	47b0      	blx	r6
 8007760:	1c41      	adds	r1, r0, #1
 8007762:	d1c7      	bne.n	80076f4 <__sflush_r+0x34>
 8007764:	682b      	ldr	r3, [r5, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d0c4      	beq.n	80076f4 <__sflush_r+0x34>
 800776a:	2b1d      	cmp	r3, #29
 800776c:	d001      	beq.n	8007772 <__sflush_r+0xb2>
 800776e:	2b16      	cmp	r3, #22
 8007770:	d101      	bne.n	8007776 <__sflush_r+0xb6>
 8007772:	602f      	str	r7, [r5, #0]
 8007774:	e7b1      	b.n	80076da <__sflush_r+0x1a>
 8007776:	89a3      	ldrh	r3, [r4, #12]
 8007778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800777c:	81a3      	strh	r3, [r4, #12]
 800777e:	e7ad      	b.n	80076dc <__sflush_r+0x1c>
 8007780:	690f      	ldr	r7, [r1, #16]
 8007782:	2f00      	cmp	r7, #0
 8007784:	d0a9      	beq.n	80076da <__sflush_r+0x1a>
 8007786:	0793      	lsls	r3, r2, #30
 8007788:	680e      	ldr	r6, [r1, #0]
 800778a:	bf08      	it	eq
 800778c:	694b      	ldreq	r3, [r1, #20]
 800778e:	600f      	str	r7, [r1, #0]
 8007790:	bf18      	it	ne
 8007792:	2300      	movne	r3, #0
 8007794:	eba6 0807 	sub.w	r8, r6, r7
 8007798:	608b      	str	r3, [r1, #8]
 800779a:	f1b8 0f00 	cmp.w	r8, #0
 800779e:	dd9c      	ble.n	80076da <__sflush_r+0x1a>
 80077a0:	6a21      	ldr	r1, [r4, #32]
 80077a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80077a4:	4643      	mov	r3, r8
 80077a6:	463a      	mov	r2, r7
 80077a8:	4628      	mov	r0, r5
 80077aa:	47b0      	blx	r6
 80077ac:	2800      	cmp	r0, #0
 80077ae:	dc06      	bgt.n	80077be <__sflush_r+0xfe>
 80077b0:	89a3      	ldrh	r3, [r4, #12]
 80077b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077b6:	81a3      	strh	r3, [r4, #12]
 80077b8:	f04f 30ff 	mov.w	r0, #4294967295
 80077bc:	e78e      	b.n	80076dc <__sflush_r+0x1c>
 80077be:	4407      	add	r7, r0
 80077c0:	eba8 0800 	sub.w	r8, r8, r0
 80077c4:	e7e9      	b.n	800779a <__sflush_r+0xda>
 80077c6:	bf00      	nop
 80077c8:	20400001 	.word	0x20400001

080077cc <_fflush_r>:
 80077cc:	b538      	push	{r3, r4, r5, lr}
 80077ce:	690b      	ldr	r3, [r1, #16]
 80077d0:	4605      	mov	r5, r0
 80077d2:	460c      	mov	r4, r1
 80077d4:	b913      	cbnz	r3, 80077dc <_fflush_r+0x10>
 80077d6:	2500      	movs	r5, #0
 80077d8:	4628      	mov	r0, r5
 80077da:	bd38      	pop	{r3, r4, r5, pc}
 80077dc:	b118      	cbz	r0, 80077e6 <_fflush_r+0x1a>
 80077de:	6983      	ldr	r3, [r0, #24]
 80077e0:	b90b      	cbnz	r3, 80077e6 <_fflush_r+0x1a>
 80077e2:	f000 f887 	bl	80078f4 <__sinit>
 80077e6:	4b14      	ldr	r3, [pc, #80]	; (8007838 <_fflush_r+0x6c>)
 80077e8:	429c      	cmp	r4, r3
 80077ea:	d11b      	bne.n	8007824 <_fflush_r+0x58>
 80077ec:	686c      	ldr	r4, [r5, #4]
 80077ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d0ef      	beq.n	80077d6 <_fflush_r+0xa>
 80077f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80077f8:	07d0      	lsls	r0, r2, #31
 80077fa:	d404      	bmi.n	8007806 <_fflush_r+0x3a>
 80077fc:	0599      	lsls	r1, r3, #22
 80077fe:	d402      	bmi.n	8007806 <_fflush_r+0x3a>
 8007800:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007802:	f000 f915 	bl	8007a30 <__retarget_lock_acquire_recursive>
 8007806:	4628      	mov	r0, r5
 8007808:	4621      	mov	r1, r4
 800780a:	f7ff ff59 	bl	80076c0 <__sflush_r>
 800780e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007810:	07da      	lsls	r2, r3, #31
 8007812:	4605      	mov	r5, r0
 8007814:	d4e0      	bmi.n	80077d8 <_fflush_r+0xc>
 8007816:	89a3      	ldrh	r3, [r4, #12]
 8007818:	059b      	lsls	r3, r3, #22
 800781a:	d4dd      	bmi.n	80077d8 <_fflush_r+0xc>
 800781c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800781e:	f000 f908 	bl	8007a32 <__retarget_lock_release_recursive>
 8007822:	e7d9      	b.n	80077d8 <_fflush_r+0xc>
 8007824:	4b05      	ldr	r3, [pc, #20]	; (800783c <_fflush_r+0x70>)
 8007826:	429c      	cmp	r4, r3
 8007828:	d101      	bne.n	800782e <_fflush_r+0x62>
 800782a:	68ac      	ldr	r4, [r5, #8]
 800782c:	e7df      	b.n	80077ee <_fflush_r+0x22>
 800782e:	4b04      	ldr	r3, [pc, #16]	; (8007840 <_fflush_r+0x74>)
 8007830:	429c      	cmp	r4, r3
 8007832:	bf08      	it	eq
 8007834:	68ec      	ldreq	r4, [r5, #12]
 8007836:	e7da      	b.n	80077ee <_fflush_r+0x22>
 8007838:	0800839c 	.word	0x0800839c
 800783c:	080083bc 	.word	0x080083bc
 8007840:	0800837c 	.word	0x0800837c

08007844 <std>:
 8007844:	2300      	movs	r3, #0
 8007846:	b510      	push	{r4, lr}
 8007848:	4604      	mov	r4, r0
 800784a:	e9c0 3300 	strd	r3, r3, [r0]
 800784e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007852:	6083      	str	r3, [r0, #8]
 8007854:	8181      	strh	r1, [r0, #12]
 8007856:	6643      	str	r3, [r0, #100]	; 0x64
 8007858:	81c2      	strh	r2, [r0, #14]
 800785a:	6183      	str	r3, [r0, #24]
 800785c:	4619      	mov	r1, r3
 800785e:	2208      	movs	r2, #8
 8007860:	305c      	adds	r0, #92	; 0x5c
 8007862:	f7fe ffcf 	bl	8006804 <memset>
 8007866:	4b05      	ldr	r3, [pc, #20]	; (800787c <std+0x38>)
 8007868:	6263      	str	r3, [r4, #36]	; 0x24
 800786a:	4b05      	ldr	r3, [pc, #20]	; (8007880 <std+0x3c>)
 800786c:	62a3      	str	r3, [r4, #40]	; 0x28
 800786e:	4b05      	ldr	r3, [pc, #20]	; (8007884 <std+0x40>)
 8007870:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007872:	4b05      	ldr	r3, [pc, #20]	; (8007888 <std+0x44>)
 8007874:	6224      	str	r4, [r4, #32]
 8007876:	6323      	str	r3, [r4, #48]	; 0x30
 8007878:	bd10      	pop	{r4, pc}
 800787a:	bf00      	nop
 800787c:	08007c51 	.word	0x08007c51
 8007880:	08007c73 	.word	0x08007c73
 8007884:	08007cab 	.word	0x08007cab
 8007888:	08007ccf 	.word	0x08007ccf

0800788c <_cleanup_r>:
 800788c:	4901      	ldr	r1, [pc, #4]	; (8007894 <_cleanup_r+0x8>)
 800788e:	f000 b8af 	b.w	80079f0 <_fwalk_reent>
 8007892:	bf00      	nop
 8007894:	080077cd 	.word	0x080077cd

08007898 <__sfmoreglue>:
 8007898:	b570      	push	{r4, r5, r6, lr}
 800789a:	2268      	movs	r2, #104	; 0x68
 800789c:	1e4d      	subs	r5, r1, #1
 800789e:	4355      	muls	r5, r2
 80078a0:	460e      	mov	r6, r1
 80078a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80078a6:	f7ff f975 	bl	8006b94 <_malloc_r>
 80078aa:	4604      	mov	r4, r0
 80078ac:	b140      	cbz	r0, 80078c0 <__sfmoreglue+0x28>
 80078ae:	2100      	movs	r1, #0
 80078b0:	e9c0 1600 	strd	r1, r6, [r0]
 80078b4:	300c      	adds	r0, #12
 80078b6:	60a0      	str	r0, [r4, #8]
 80078b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80078bc:	f7fe ffa2 	bl	8006804 <memset>
 80078c0:	4620      	mov	r0, r4
 80078c2:	bd70      	pop	{r4, r5, r6, pc}

080078c4 <__sfp_lock_acquire>:
 80078c4:	4801      	ldr	r0, [pc, #4]	; (80078cc <__sfp_lock_acquire+0x8>)
 80078c6:	f000 b8b3 	b.w	8007a30 <__retarget_lock_acquire_recursive>
 80078ca:	bf00      	nop
 80078cc:	20000281 	.word	0x20000281

080078d0 <__sfp_lock_release>:
 80078d0:	4801      	ldr	r0, [pc, #4]	; (80078d8 <__sfp_lock_release+0x8>)
 80078d2:	f000 b8ae 	b.w	8007a32 <__retarget_lock_release_recursive>
 80078d6:	bf00      	nop
 80078d8:	20000281 	.word	0x20000281

080078dc <__sinit_lock_acquire>:
 80078dc:	4801      	ldr	r0, [pc, #4]	; (80078e4 <__sinit_lock_acquire+0x8>)
 80078de:	f000 b8a7 	b.w	8007a30 <__retarget_lock_acquire_recursive>
 80078e2:	bf00      	nop
 80078e4:	20000282 	.word	0x20000282

080078e8 <__sinit_lock_release>:
 80078e8:	4801      	ldr	r0, [pc, #4]	; (80078f0 <__sinit_lock_release+0x8>)
 80078ea:	f000 b8a2 	b.w	8007a32 <__retarget_lock_release_recursive>
 80078ee:	bf00      	nop
 80078f0:	20000282 	.word	0x20000282

080078f4 <__sinit>:
 80078f4:	b510      	push	{r4, lr}
 80078f6:	4604      	mov	r4, r0
 80078f8:	f7ff fff0 	bl	80078dc <__sinit_lock_acquire>
 80078fc:	69a3      	ldr	r3, [r4, #24]
 80078fe:	b11b      	cbz	r3, 8007908 <__sinit+0x14>
 8007900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007904:	f7ff bff0 	b.w	80078e8 <__sinit_lock_release>
 8007908:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800790c:	6523      	str	r3, [r4, #80]	; 0x50
 800790e:	4b13      	ldr	r3, [pc, #76]	; (800795c <__sinit+0x68>)
 8007910:	4a13      	ldr	r2, [pc, #76]	; (8007960 <__sinit+0x6c>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	62a2      	str	r2, [r4, #40]	; 0x28
 8007916:	42a3      	cmp	r3, r4
 8007918:	bf04      	itt	eq
 800791a:	2301      	moveq	r3, #1
 800791c:	61a3      	streq	r3, [r4, #24]
 800791e:	4620      	mov	r0, r4
 8007920:	f000 f820 	bl	8007964 <__sfp>
 8007924:	6060      	str	r0, [r4, #4]
 8007926:	4620      	mov	r0, r4
 8007928:	f000 f81c 	bl	8007964 <__sfp>
 800792c:	60a0      	str	r0, [r4, #8]
 800792e:	4620      	mov	r0, r4
 8007930:	f000 f818 	bl	8007964 <__sfp>
 8007934:	2200      	movs	r2, #0
 8007936:	60e0      	str	r0, [r4, #12]
 8007938:	2104      	movs	r1, #4
 800793a:	6860      	ldr	r0, [r4, #4]
 800793c:	f7ff ff82 	bl	8007844 <std>
 8007940:	68a0      	ldr	r0, [r4, #8]
 8007942:	2201      	movs	r2, #1
 8007944:	2109      	movs	r1, #9
 8007946:	f7ff ff7d 	bl	8007844 <std>
 800794a:	68e0      	ldr	r0, [r4, #12]
 800794c:	2202      	movs	r2, #2
 800794e:	2112      	movs	r1, #18
 8007950:	f7ff ff78 	bl	8007844 <std>
 8007954:	2301      	movs	r3, #1
 8007956:	61a3      	str	r3, [r4, #24]
 8007958:	e7d2      	b.n	8007900 <__sinit+0xc>
 800795a:	bf00      	nop
 800795c:	08008194 	.word	0x08008194
 8007960:	0800788d 	.word	0x0800788d

08007964 <__sfp>:
 8007964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007966:	4607      	mov	r7, r0
 8007968:	f7ff ffac 	bl	80078c4 <__sfp_lock_acquire>
 800796c:	4b1e      	ldr	r3, [pc, #120]	; (80079e8 <__sfp+0x84>)
 800796e:	681e      	ldr	r6, [r3, #0]
 8007970:	69b3      	ldr	r3, [r6, #24]
 8007972:	b913      	cbnz	r3, 800797a <__sfp+0x16>
 8007974:	4630      	mov	r0, r6
 8007976:	f7ff ffbd 	bl	80078f4 <__sinit>
 800797a:	3648      	adds	r6, #72	; 0x48
 800797c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007980:	3b01      	subs	r3, #1
 8007982:	d503      	bpl.n	800798c <__sfp+0x28>
 8007984:	6833      	ldr	r3, [r6, #0]
 8007986:	b30b      	cbz	r3, 80079cc <__sfp+0x68>
 8007988:	6836      	ldr	r6, [r6, #0]
 800798a:	e7f7      	b.n	800797c <__sfp+0x18>
 800798c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007990:	b9d5      	cbnz	r5, 80079c8 <__sfp+0x64>
 8007992:	4b16      	ldr	r3, [pc, #88]	; (80079ec <__sfp+0x88>)
 8007994:	60e3      	str	r3, [r4, #12]
 8007996:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800799a:	6665      	str	r5, [r4, #100]	; 0x64
 800799c:	f000 f847 	bl	8007a2e <__retarget_lock_init_recursive>
 80079a0:	f7ff ff96 	bl	80078d0 <__sfp_lock_release>
 80079a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80079a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80079ac:	6025      	str	r5, [r4, #0]
 80079ae:	61a5      	str	r5, [r4, #24]
 80079b0:	2208      	movs	r2, #8
 80079b2:	4629      	mov	r1, r5
 80079b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80079b8:	f7fe ff24 	bl	8006804 <memset>
 80079bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80079c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80079c4:	4620      	mov	r0, r4
 80079c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079c8:	3468      	adds	r4, #104	; 0x68
 80079ca:	e7d9      	b.n	8007980 <__sfp+0x1c>
 80079cc:	2104      	movs	r1, #4
 80079ce:	4638      	mov	r0, r7
 80079d0:	f7ff ff62 	bl	8007898 <__sfmoreglue>
 80079d4:	4604      	mov	r4, r0
 80079d6:	6030      	str	r0, [r6, #0]
 80079d8:	2800      	cmp	r0, #0
 80079da:	d1d5      	bne.n	8007988 <__sfp+0x24>
 80079dc:	f7ff ff78 	bl	80078d0 <__sfp_lock_release>
 80079e0:	230c      	movs	r3, #12
 80079e2:	603b      	str	r3, [r7, #0]
 80079e4:	e7ee      	b.n	80079c4 <__sfp+0x60>
 80079e6:	bf00      	nop
 80079e8:	08008194 	.word	0x08008194
 80079ec:	ffff0001 	.word	0xffff0001

080079f0 <_fwalk_reent>:
 80079f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079f4:	4606      	mov	r6, r0
 80079f6:	4688      	mov	r8, r1
 80079f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80079fc:	2700      	movs	r7, #0
 80079fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a02:	f1b9 0901 	subs.w	r9, r9, #1
 8007a06:	d505      	bpl.n	8007a14 <_fwalk_reent+0x24>
 8007a08:	6824      	ldr	r4, [r4, #0]
 8007a0a:	2c00      	cmp	r4, #0
 8007a0c:	d1f7      	bne.n	80079fe <_fwalk_reent+0xe>
 8007a0e:	4638      	mov	r0, r7
 8007a10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a14:	89ab      	ldrh	r3, [r5, #12]
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d907      	bls.n	8007a2a <_fwalk_reent+0x3a>
 8007a1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a1e:	3301      	adds	r3, #1
 8007a20:	d003      	beq.n	8007a2a <_fwalk_reent+0x3a>
 8007a22:	4629      	mov	r1, r5
 8007a24:	4630      	mov	r0, r6
 8007a26:	47c0      	blx	r8
 8007a28:	4307      	orrs	r7, r0
 8007a2a:	3568      	adds	r5, #104	; 0x68
 8007a2c:	e7e9      	b.n	8007a02 <_fwalk_reent+0x12>

08007a2e <__retarget_lock_init_recursive>:
 8007a2e:	4770      	bx	lr

08007a30 <__retarget_lock_acquire_recursive>:
 8007a30:	4770      	bx	lr

08007a32 <__retarget_lock_release_recursive>:
 8007a32:	4770      	bx	lr

08007a34 <__swhatbuf_r>:
 8007a34:	b570      	push	{r4, r5, r6, lr}
 8007a36:	460e      	mov	r6, r1
 8007a38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a3c:	2900      	cmp	r1, #0
 8007a3e:	b096      	sub	sp, #88	; 0x58
 8007a40:	4614      	mov	r4, r2
 8007a42:	461d      	mov	r5, r3
 8007a44:	da08      	bge.n	8007a58 <__swhatbuf_r+0x24>
 8007a46:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	602a      	str	r2, [r5, #0]
 8007a4e:	061a      	lsls	r2, r3, #24
 8007a50:	d410      	bmi.n	8007a74 <__swhatbuf_r+0x40>
 8007a52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a56:	e00e      	b.n	8007a76 <__swhatbuf_r+0x42>
 8007a58:	466a      	mov	r2, sp
 8007a5a:	f000 f95f 	bl	8007d1c <_fstat_r>
 8007a5e:	2800      	cmp	r0, #0
 8007a60:	dbf1      	blt.n	8007a46 <__swhatbuf_r+0x12>
 8007a62:	9a01      	ldr	r2, [sp, #4]
 8007a64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007a68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007a6c:	425a      	negs	r2, r3
 8007a6e:	415a      	adcs	r2, r3
 8007a70:	602a      	str	r2, [r5, #0]
 8007a72:	e7ee      	b.n	8007a52 <__swhatbuf_r+0x1e>
 8007a74:	2340      	movs	r3, #64	; 0x40
 8007a76:	2000      	movs	r0, #0
 8007a78:	6023      	str	r3, [r4, #0]
 8007a7a:	b016      	add	sp, #88	; 0x58
 8007a7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007a80 <__smakebuf_r>:
 8007a80:	898b      	ldrh	r3, [r1, #12]
 8007a82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a84:	079d      	lsls	r5, r3, #30
 8007a86:	4606      	mov	r6, r0
 8007a88:	460c      	mov	r4, r1
 8007a8a:	d507      	bpl.n	8007a9c <__smakebuf_r+0x1c>
 8007a8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007a90:	6023      	str	r3, [r4, #0]
 8007a92:	6123      	str	r3, [r4, #16]
 8007a94:	2301      	movs	r3, #1
 8007a96:	6163      	str	r3, [r4, #20]
 8007a98:	b002      	add	sp, #8
 8007a9a:	bd70      	pop	{r4, r5, r6, pc}
 8007a9c:	ab01      	add	r3, sp, #4
 8007a9e:	466a      	mov	r2, sp
 8007aa0:	f7ff ffc8 	bl	8007a34 <__swhatbuf_r>
 8007aa4:	9900      	ldr	r1, [sp, #0]
 8007aa6:	4605      	mov	r5, r0
 8007aa8:	4630      	mov	r0, r6
 8007aaa:	f7ff f873 	bl	8006b94 <_malloc_r>
 8007aae:	b948      	cbnz	r0, 8007ac4 <__smakebuf_r+0x44>
 8007ab0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ab4:	059a      	lsls	r2, r3, #22
 8007ab6:	d4ef      	bmi.n	8007a98 <__smakebuf_r+0x18>
 8007ab8:	f023 0303 	bic.w	r3, r3, #3
 8007abc:	f043 0302 	orr.w	r3, r3, #2
 8007ac0:	81a3      	strh	r3, [r4, #12]
 8007ac2:	e7e3      	b.n	8007a8c <__smakebuf_r+0xc>
 8007ac4:	4b0d      	ldr	r3, [pc, #52]	; (8007afc <__smakebuf_r+0x7c>)
 8007ac6:	62b3      	str	r3, [r6, #40]	; 0x28
 8007ac8:	89a3      	ldrh	r3, [r4, #12]
 8007aca:	6020      	str	r0, [r4, #0]
 8007acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ad0:	81a3      	strh	r3, [r4, #12]
 8007ad2:	9b00      	ldr	r3, [sp, #0]
 8007ad4:	6163      	str	r3, [r4, #20]
 8007ad6:	9b01      	ldr	r3, [sp, #4]
 8007ad8:	6120      	str	r0, [r4, #16]
 8007ada:	b15b      	cbz	r3, 8007af4 <__smakebuf_r+0x74>
 8007adc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ae0:	4630      	mov	r0, r6
 8007ae2:	f000 f92d 	bl	8007d40 <_isatty_r>
 8007ae6:	b128      	cbz	r0, 8007af4 <__smakebuf_r+0x74>
 8007ae8:	89a3      	ldrh	r3, [r4, #12]
 8007aea:	f023 0303 	bic.w	r3, r3, #3
 8007aee:	f043 0301 	orr.w	r3, r3, #1
 8007af2:	81a3      	strh	r3, [r4, #12]
 8007af4:	89a0      	ldrh	r0, [r4, #12]
 8007af6:	4305      	orrs	r5, r0
 8007af8:	81a5      	strh	r5, [r4, #12]
 8007afa:	e7cd      	b.n	8007a98 <__smakebuf_r+0x18>
 8007afc:	0800788d 	.word	0x0800788d

08007b00 <memcpy>:
 8007b00:	440a      	add	r2, r1
 8007b02:	4291      	cmp	r1, r2
 8007b04:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b08:	d100      	bne.n	8007b0c <memcpy+0xc>
 8007b0a:	4770      	bx	lr
 8007b0c:	b510      	push	{r4, lr}
 8007b0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b16:	4291      	cmp	r1, r2
 8007b18:	d1f9      	bne.n	8007b0e <memcpy+0xe>
 8007b1a:	bd10      	pop	{r4, pc}

08007b1c <memmove>:
 8007b1c:	4288      	cmp	r0, r1
 8007b1e:	b510      	push	{r4, lr}
 8007b20:	eb01 0402 	add.w	r4, r1, r2
 8007b24:	d902      	bls.n	8007b2c <memmove+0x10>
 8007b26:	4284      	cmp	r4, r0
 8007b28:	4623      	mov	r3, r4
 8007b2a:	d807      	bhi.n	8007b3c <memmove+0x20>
 8007b2c:	1e43      	subs	r3, r0, #1
 8007b2e:	42a1      	cmp	r1, r4
 8007b30:	d008      	beq.n	8007b44 <memmove+0x28>
 8007b32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b3a:	e7f8      	b.n	8007b2e <memmove+0x12>
 8007b3c:	4402      	add	r2, r0
 8007b3e:	4601      	mov	r1, r0
 8007b40:	428a      	cmp	r2, r1
 8007b42:	d100      	bne.n	8007b46 <memmove+0x2a>
 8007b44:	bd10      	pop	{r4, pc}
 8007b46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007b4e:	e7f7      	b.n	8007b40 <memmove+0x24>

08007b50 <__malloc_lock>:
 8007b50:	4801      	ldr	r0, [pc, #4]	; (8007b58 <__malloc_lock+0x8>)
 8007b52:	f7ff bf6d 	b.w	8007a30 <__retarget_lock_acquire_recursive>
 8007b56:	bf00      	nop
 8007b58:	20000280 	.word	0x20000280

08007b5c <__malloc_unlock>:
 8007b5c:	4801      	ldr	r0, [pc, #4]	; (8007b64 <__malloc_unlock+0x8>)
 8007b5e:	f7ff bf68 	b.w	8007a32 <__retarget_lock_release_recursive>
 8007b62:	bf00      	nop
 8007b64:	20000280 	.word	0x20000280

08007b68 <_realloc_r>:
 8007b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b6c:	4680      	mov	r8, r0
 8007b6e:	4614      	mov	r4, r2
 8007b70:	460e      	mov	r6, r1
 8007b72:	b921      	cbnz	r1, 8007b7e <_realloc_r+0x16>
 8007b74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b78:	4611      	mov	r1, r2
 8007b7a:	f7ff b80b 	b.w	8006b94 <_malloc_r>
 8007b7e:	b92a      	cbnz	r2, 8007b8c <_realloc_r+0x24>
 8007b80:	f7fe ff9c 	bl	8006abc <_free_r>
 8007b84:	4625      	mov	r5, r4
 8007b86:	4628      	mov	r0, r5
 8007b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b8c:	f000 f8fa 	bl	8007d84 <_malloc_usable_size_r>
 8007b90:	4284      	cmp	r4, r0
 8007b92:	4607      	mov	r7, r0
 8007b94:	d802      	bhi.n	8007b9c <_realloc_r+0x34>
 8007b96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007b9a:	d812      	bhi.n	8007bc2 <_realloc_r+0x5a>
 8007b9c:	4621      	mov	r1, r4
 8007b9e:	4640      	mov	r0, r8
 8007ba0:	f7fe fff8 	bl	8006b94 <_malloc_r>
 8007ba4:	4605      	mov	r5, r0
 8007ba6:	2800      	cmp	r0, #0
 8007ba8:	d0ed      	beq.n	8007b86 <_realloc_r+0x1e>
 8007baa:	42bc      	cmp	r4, r7
 8007bac:	4622      	mov	r2, r4
 8007bae:	4631      	mov	r1, r6
 8007bb0:	bf28      	it	cs
 8007bb2:	463a      	movcs	r2, r7
 8007bb4:	f7ff ffa4 	bl	8007b00 <memcpy>
 8007bb8:	4631      	mov	r1, r6
 8007bba:	4640      	mov	r0, r8
 8007bbc:	f7fe ff7e 	bl	8006abc <_free_r>
 8007bc0:	e7e1      	b.n	8007b86 <_realloc_r+0x1e>
 8007bc2:	4635      	mov	r5, r6
 8007bc4:	e7df      	b.n	8007b86 <_realloc_r+0x1e>

08007bc6 <_raise_r>:
 8007bc6:	291f      	cmp	r1, #31
 8007bc8:	b538      	push	{r3, r4, r5, lr}
 8007bca:	4604      	mov	r4, r0
 8007bcc:	460d      	mov	r5, r1
 8007bce:	d904      	bls.n	8007bda <_raise_r+0x14>
 8007bd0:	2316      	movs	r3, #22
 8007bd2:	6003      	str	r3, [r0, #0]
 8007bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd8:	bd38      	pop	{r3, r4, r5, pc}
 8007bda:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007bdc:	b112      	cbz	r2, 8007be4 <_raise_r+0x1e>
 8007bde:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007be2:	b94b      	cbnz	r3, 8007bf8 <_raise_r+0x32>
 8007be4:	4620      	mov	r0, r4
 8007be6:	f000 f831 	bl	8007c4c <_getpid_r>
 8007bea:	462a      	mov	r2, r5
 8007bec:	4601      	mov	r1, r0
 8007bee:	4620      	mov	r0, r4
 8007bf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bf4:	f000 b818 	b.w	8007c28 <_kill_r>
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d00a      	beq.n	8007c12 <_raise_r+0x4c>
 8007bfc:	1c59      	adds	r1, r3, #1
 8007bfe:	d103      	bne.n	8007c08 <_raise_r+0x42>
 8007c00:	2316      	movs	r3, #22
 8007c02:	6003      	str	r3, [r0, #0]
 8007c04:	2001      	movs	r0, #1
 8007c06:	e7e7      	b.n	8007bd8 <_raise_r+0x12>
 8007c08:	2400      	movs	r4, #0
 8007c0a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007c0e:	4628      	mov	r0, r5
 8007c10:	4798      	blx	r3
 8007c12:	2000      	movs	r0, #0
 8007c14:	e7e0      	b.n	8007bd8 <_raise_r+0x12>
	...

08007c18 <raise>:
 8007c18:	4b02      	ldr	r3, [pc, #8]	; (8007c24 <raise+0xc>)
 8007c1a:	4601      	mov	r1, r0
 8007c1c:	6818      	ldr	r0, [r3, #0]
 8007c1e:	f7ff bfd2 	b.w	8007bc6 <_raise_r>
 8007c22:	bf00      	nop
 8007c24:	2000000c 	.word	0x2000000c

08007c28 <_kill_r>:
 8007c28:	b538      	push	{r3, r4, r5, lr}
 8007c2a:	4d07      	ldr	r5, [pc, #28]	; (8007c48 <_kill_r+0x20>)
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	4604      	mov	r4, r0
 8007c30:	4608      	mov	r0, r1
 8007c32:	4611      	mov	r1, r2
 8007c34:	602b      	str	r3, [r5, #0]
 8007c36:	f7f9 f923 	bl	8000e80 <_kill>
 8007c3a:	1c43      	adds	r3, r0, #1
 8007c3c:	d102      	bne.n	8007c44 <_kill_r+0x1c>
 8007c3e:	682b      	ldr	r3, [r5, #0]
 8007c40:	b103      	cbz	r3, 8007c44 <_kill_r+0x1c>
 8007c42:	6023      	str	r3, [r4, #0]
 8007c44:	bd38      	pop	{r3, r4, r5, pc}
 8007c46:	bf00      	nop
 8007c48:	20000284 	.word	0x20000284

08007c4c <_getpid_r>:
 8007c4c:	f7f9 b910 	b.w	8000e70 <_getpid>

08007c50 <__sread>:
 8007c50:	b510      	push	{r4, lr}
 8007c52:	460c      	mov	r4, r1
 8007c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c58:	f000 f89c 	bl	8007d94 <_read_r>
 8007c5c:	2800      	cmp	r0, #0
 8007c5e:	bfab      	itete	ge
 8007c60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007c62:	89a3      	ldrhlt	r3, [r4, #12]
 8007c64:	181b      	addge	r3, r3, r0
 8007c66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007c6a:	bfac      	ite	ge
 8007c6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007c6e:	81a3      	strhlt	r3, [r4, #12]
 8007c70:	bd10      	pop	{r4, pc}

08007c72 <__swrite>:
 8007c72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c76:	461f      	mov	r7, r3
 8007c78:	898b      	ldrh	r3, [r1, #12]
 8007c7a:	05db      	lsls	r3, r3, #23
 8007c7c:	4605      	mov	r5, r0
 8007c7e:	460c      	mov	r4, r1
 8007c80:	4616      	mov	r6, r2
 8007c82:	d505      	bpl.n	8007c90 <__swrite+0x1e>
 8007c84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c88:	2302      	movs	r3, #2
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f000 f868 	bl	8007d60 <_lseek_r>
 8007c90:	89a3      	ldrh	r3, [r4, #12]
 8007c92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c9a:	81a3      	strh	r3, [r4, #12]
 8007c9c:	4632      	mov	r2, r6
 8007c9e:	463b      	mov	r3, r7
 8007ca0:	4628      	mov	r0, r5
 8007ca2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ca6:	f000 b817 	b.w	8007cd8 <_write_r>

08007caa <__sseek>:
 8007caa:	b510      	push	{r4, lr}
 8007cac:	460c      	mov	r4, r1
 8007cae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cb2:	f000 f855 	bl	8007d60 <_lseek_r>
 8007cb6:	1c43      	adds	r3, r0, #1
 8007cb8:	89a3      	ldrh	r3, [r4, #12]
 8007cba:	bf15      	itete	ne
 8007cbc:	6560      	strne	r0, [r4, #84]	; 0x54
 8007cbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007cc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007cc6:	81a3      	strheq	r3, [r4, #12]
 8007cc8:	bf18      	it	ne
 8007cca:	81a3      	strhne	r3, [r4, #12]
 8007ccc:	bd10      	pop	{r4, pc}

08007cce <__sclose>:
 8007cce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cd2:	f000 b813 	b.w	8007cfc <_close_r>
	...

08007cd8 <_write_r>:
 8007cd8:	b538      	push	{r3, r4, r5, lr}
 8007cda:	4d07      	ldr	r5, [pc, #28]	; (8007cf8 <_write_r+0x20>)
 8007cdc:	4604      	mov	r4, r0
 8007cde:	4608      	mov	r0, r1
 8007ce0:	4611      	mov	r1, r2
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	602a      	str	r2, [r5, #0]
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	f7f9 f901 	bl	8000eee <_write>
 8007cec:	1c43      	adds	r3, r0, #1
 8007cee:	d102      	bne.n	8007cf6 <_write_r+0x1e>
 8007cf0:	682b      	ldr	r3, [r5, #0]
 8007cf2:	b103      	cbz	r3, 8007cf6 <_write_r+0x1e>
 8007cf4:	6023      	str	r3, [r4, #0]
 8007cf6:	bd38      	pop	{r3, r4, r5, pc}
 8007cf8:	20000284 	.word	0x20000284

08007cfc <_close_r>:
 8007cfc:	b538      	push	{r3, r4, r5, lr}
 8007cfe:	4d06      	ldr	r5, [pc, #24]	; (8007d18 <_close_r+0x1c>)
 8007d00:	2300      	movs	r3, #0
 8007d02:	4604      	mov	r4, r0
 8007d04:	4608      	mov	r0, r1
 8007d06:	602b      	str	r3, [r5, #0]
 8007d08:	f7f9 f90d 	bl	8000f26 <_close>
 8007d0c:	1c43      	adds	r3, r0, #1
 8007d0e:	d102      	bne.n	8007d16 <_close_r+0x1a>
 8007d10:	682b      	ldr	r3, [r5, #0]
 8007d12:	b103      	cbz	r3, 8007d16 <_close_r+0x1a>
 8007d14:	6023      	str	r3, [r4, #0]
 8007d16:	bd38      	pop	{r3, r4, r5, pc}
 8007d18:	20000284 	.word	0x20000284

08007d1c <_fstat_r>:
 8007d1c:	b538      	push	{r3, r4, r5, lr}
 8007d1e:	4d07      	ldr	r5, [pc, #28]	; (8007d3c <_fstat_r+0x20>)
 8007d20:	2300      	movs	r3, #0
 8007d22:	4604      	mov	r4, r0
 8007d24:	4608      	mov	r0, r1
 8007d26:	4611      	mov	r1, r2
 8007d28:	602b      	str	r3, [r5, #0]
 8007d2a:	f7f9 f908 	bl	8000f3e <_fstat>
 8007d2e:	1c43      	adds	r3, r0, #1
 8007d30:	d102      	bne.n	8007d38 <_fstat_r+0x1c>
 8007d32:	682b      	ldr	r3, [r5, #0]
 8007d34:	b103      	cbz	r3, 8007d38 <_fstat_r+0x1c>
 8007d36:	6023      	str	r3, [r4, #0]
 8007d38:	bd38      	pop	{r3, r4, r5, pc}
 8007d3a:	bf00      	nop
 8007d3c:	20000284 	.word	0x20000284

08007d40 <_isatty_r>:
 8007d40:	b538      	push	{r3, r4, r5, lr}
 8007d42:	4d06      	ldr	r5, [pc, #24]	; (8007d5c <_isatty_r+0x1c>)
 8007d44:	2300      	movs	r3, #0
 8007d46:	4604      	mov	r4, r0
 8007d48:	4608      	mov	r0, r1
 8007d4a:	602b      	str	r3, [r5, #0]
 8007d4c:	f7f9 f907 	bl	8000f5e <_isatty>
 8007d50:	1c43      	adds	r3, r0, #1
 8007d52:	d102      	bne.n	8007d5a <_isatty_r+0x1a>
 8007d54:	682b      	ldr	r3, [r5, #0]
 8007d56:	b103      	cbz	r3, 8007d5a <_isatty_r+0x1a>
 8007d58:	6023      	str	r3, [r4, #0]
 8007d5a:	bd38      	pop	{r3, r4, r5, pc}
 8007d5c:	20000284 	.word	0x20000284

08007d60 <_lseek_r>:
 8007d60:	b538      	push	{r3, r4, r5, lr}
 8007d62:	4d07      	ldr	r5, [pc, #28]	; (8007d80 <_lseek_r+0x20>)
 8007d64:	4604      	mov	r4, r0
 8007d66:	4608      	mov	r0, r1
 8007d68:	4611      	mov	r1, r2
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	602a      	str	r2, [r5, #0]
 8007d6e:	461a      	mov	r2, r3
 8007d70:	f7f9 f900 	bl	8000f74 <_lseek>
 8007d74:	1c43      	adds	r3, r0, #1
 8007d76:	d102      	bne.n	8007d7e <_lseek_r+0x1e>
 8007d78:	682b      	ldr	r3, [r5, #0]
 8007d7a:	b103      	cbz	r3, 8007d7e <_lseek_r+0x1e>
 8007d7c:	6023      	str	r3, [r4, #0]
 8007d7e:	bd38      	pop	{r3, r4, r5, pc}
 8007d80:	20000284 	.word	0x20000284

08007d84 <_malloc_usable_size_r>:
 8007d84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d88:	1f18      	subs	r0, r3, #4
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	bfbc      	itt	lt
 8007d8e:	580b      	ldrlt	r3, [r1, r0]
 8007d90:	18c0      	addlt	r0, r0, r3
 8007d92:	4770      	bx	lr

08007d94 <_read_r>:
 8007d94:	b538      	push	{r3, r4, r5, lr}
 8007d96:	4d07      	ldr	r5, [pc, #28]	; (8007db4 <_read_r+0x20>)
 8007d98:	4604      	mov	r4, r0
 8007d9a:	4608      	mov	r0, r1
 8007d9c:	4611      	mov	r1, r2
 8007d9e:	2200      	movs	r2, #0
 8007da0:	602a      	str	r2, [r5, #0]
 8007da2:	461a      	mov	r2, r3
 8007da4:	f7f9 f886 	bl	8000eb4 <_read>
 8007da8:	1c43      	adds	r3, r0, #1
 8007daa:	d102      	bne.n	8007db2 <_read_r+0x1e>
 8007dac:	682b      	ldr	r3, [r5, #0]
 8007dae:	b103      	cbz	r3, 8007db2 <_read_r+0x1e>
 8007db0:	6023      	str	r3, [r4, #0]
 8007db2:	bd38      	pop	{r3, r4, r5, pc}
 8007db4:	20000284 	.word	0x20000284

08007db8 <_init>:
 8007db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dba:	bf00      	nop
 8007dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dbe:	bc08      	pop	{r3}
 8007dc0:	469e      	mov	lr, r3
 8007dc2:	4770      	bx	lr

08007dc4 <_fini>:
 8007dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dc6:	bf00      	nop
 8007dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dca:	bc08      	pop	{r3}
 8007dcc:	469e      	mov	lr, r3
 8007dce:	4770      	bx	lr
